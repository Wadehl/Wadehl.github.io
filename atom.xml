<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Venkiˡᵒᵛᵉ💕</title>
  
  
  <link href="http://dayswithvenki.top/atom.xml" rel="self"/>
  
  <link href="http://dayswithvenki.top/"/>
  <updated>2022-09-21T14:46:17.986Z</updated>
  <id>http://dayswithvenki.top/</id>
  
  <author>
    <name>Kevin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django数据库操作</title>
    <link href="http://dayswithvenki.top/posts/db-of-django.html"/>
    <id>http://dayswithvenki.top/posts/db-of-django.html</id>
    <published>2022-09-21T07:49:56.471Z</published>
    <updated>2022-09-21T14:46:17.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django项目"><a href="#Django项目" class="headerlink" title="Django项目"></a>Django项目</h2><p><img src="https://s2.loli.net/2022/09/21/M6nibRrQ8cDEIq3.png" alt="Django _1_.png"></p><h3 id="0说在前面"><a href="#0-说在前面" class="headerlink" title="0.说在前面"></a>0.说在前面</h3><h4 id="01-django-orm"><a href="#0-1-Django-ORM" class="headerlink" title="0.1 Django ORM"></a>0.1 Django ORM</h4><p>Django 模型使用自带的 ORM。</p><p>对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p><p>ORM 在业务逻辑层和数据库层之间充当了桥梁的作用。</p><p>ORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/django-orm1.png" alt="img"></p><p>使用 ORM 的好处：</p><ul><li>提高开发效率。</li><li>不同数据库可以平滑切换。</li></ul><p>使用 ORM 的缺点：</p><ul><li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li><li>长期写 ORM 代码，会降低编写 SQL 语句的能力。</li></ul><p>ORM 解析过程:</p><ul><li>1、ORM 会将 Python 代码转成为 SQL 语句。</li><li>2、SQL 语句通过 pymysql 传送到数据库服务端。</li><li>3、在数据库中执行 SQL 语句并将结果返回。</li></ul><p>ORM 对应关系表：<img src="https://www.runoob.com/wp-content/uploads/2020/05/orm-object.png" alt="img"></p><h3 id="1连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h3><h4 id="11-直接下载mysql57版本以上"><a href="#1-1-直接下载MySQL（5-7版本以上）" class="headerlink" title="1.1 直接下载MySQL（5.7版本以上）"></a>1.1 直接下载MySQL（5.7版本以上）</h4><p> 将端口Port设置为3306，管理员Management User为root，密码Password为123456。</p><p>运行以下命令启动MySQL服务。</p><figure class="highlight dos"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> mysql<br></code></pre></td></tr></tbody></table></figure><h4 id="12-通过docker安装mysql"><a href="#1-2-通过Docker安装MySQL" class="headerlink" title="1.2 通过Docker安装MySQL"></a>1.2 通过Docker安装MySQL</h4><p>Windows Terminal运行以下命令：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -p 3306:3306 --name mysql -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=123456 -d mysql:latest<br></code></pre></td></tr></tbody></table></figure><p>在Docker container 启动 MySQL服务。</p><h4 id="13-django项目连接mysql数据库"><a href="#1-3-Django项目连接MySQL数据库" class="headerlink" title="1.3 Django项目连接MySQL数据库"></a>1.3 Django项目连接MySQL数据库</h4><h5 id="131-安装mysqlclient"><a href="#1-3-1-安装MySQLClient" class="headerlink" title="1.3.1 安装MySQLClient"></a>1.3.1 安装MySQLClient</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install mysqlclient<br></code></pre></td></tr></tbody></table></figure><h5 id="132-配置settings文件"><a href="#1-3-2-配置settings文件" class="headerlink" title="1.3.2 配置settings文件"></a>1.3.2 配置settings文件</h5><p>打开settings.py项目配置文件</p><p>找到DATABASES配置项，并按以下修改：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>DATABASES = {<br>    <span class="hljs-string">'default'</span>: {<br>        <span class="hljs-comment"># 连接本地mysql数据库</span><br>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.mysql'</span>,<br>        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'mysql'</span>,  <span class="hljs-comment"># 你的数据库名</span><br>        <span class="hljs-string">'USER'</span>: <span class="hljs-string">'root'</span>,  <span class="hljs-comment"># 你的用户名</span><br>        <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'123456'</span>,  <span class="hljs-comment"># 你的密码</span><br>        <span class="hljs-string">'HOST'</span>: <span class="hljs-string">'localhost'</span>,  <span class="hljs-comment"># 本地连接</span><br>        <span class="hljs-string">'PORT'</span>: <span class="hljs-string">'3306'</span>,  <span class="hljs-comment"># 本地端口号</span><br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-建表并进行简单的增删改操作"><a href="#2-建表并进行简单的增删改操作" class="headerlink" title="2. 建表并进行简单的增删改操作"></a>2. 建表并进行简单的增删改操作</h3><h4 id="21-建立表格"><a href="#2-1-建立表格" class="headerlink" title="2.1 建立表格"></a>2.1 建立表格</h4><p>打开APP下的models.py文件</p><p>假设要创建一个评价模块，其中：</p><p>需要编码，模块名称，分值</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">models.py<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Evaluation</span>(models.Model):<br>    <span class="hljs-built_in">id</span> = models.AutoField(primary_key=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">"编码"</span>)<br>    name = models.CharField(verbose_name=<span class="hljs-string">"模块名称"</span>, max_length=<span class="hljs-number">32</span>)<br>    score = models.PositiveIntegerField(verbose_name=<span class="hljs-string">"分值"</span>, max_length=<span class="hljs-number">2</span>)    <span class="hljs-comment"># 正整数</span><br></code></pre></td></tr></tbody></table></figure><p>在终端运行以下命令:</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></tbody></table></figure><p>可以看到数据库内以及建好一个名为app01_evalution的表，表的结构如下图所示：</p><p><img src="https://s2.loli.net/2022/09/21/9n51BJcj4yNelVw.png" alt="image-20220921212211849"></p><h4 id="22-数据增删改"><a href="#2-2-数据增删改" class="headerlink" title="2.2 数据增删改"></a>2.2 数据增删改</h4><p>先于urls.py 文件的urlpatterns添加以下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br>urlpatterns = [<br>    ...,<br>    path(<span class="hljs-string">'test/add/'</span>, views.test_add),<br>    path(<span class="hljs-string">'test/edit/'</span>, views.test_edit),<br>    path(<span class="hljs-string">'test/delete/'</span>, views.test_delete),<br>    path(<span class="hljs-string">'test/list/'</span>, views.test_list),<br>]<br></code></pre></td></tr></tbody></table></figure><h5 id="221-新增数据"><a href="#2-2-1-新增数据" class="headerlink" title="2.2.1 新增数据"></a>2.2.1 新增数据</h5><blockquote><p>新增如下数据</p></blockquote><div class="table-container"><table><thead><tr><th>ID</th><th>模板名称</th><th>分值</th></tr></thead><tbody><tr><td>1</td><td>模块1：选择题目</td><td>20</td></tr><tr><td>2</td><td>模块2：掌握情况</td><td>10</td></tr><tr><td>3</td><td>Need_TO_DELETE</td><td>0</td></tr></tbody></table></div><p>于views.py 添加:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,redirect,HttpResponse<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">"""添加评价"""</span><br>    names = [<span class="hljs-string">'模块1：选择题目'</span>, <span class="hljs-string">'模块2：掌握情况'</span>, <span class="hljs-string">'Need_TO_DELETE'</span>]<br>    scores = [<span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        models.Evaluation.objects.create(name=names[i], score=scores[i])<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'添加成功'</span>)<br></code></pre></td></tr></tbody></table></figure><p>浏览器访问 <a href="http://localhost:8888/test/add/">http://localhost:8888/test/add/</a></p><p>可观察到已经有新增的数据：</p><p><img src="https://s2.loli.net/2022/09/21/7dgewsXOqb6VKnm.png" alt="image-20220921215756701"></p><h5 id="222-修改数据"><a href="#2-2-2-修改数据" class="headerlink" title="2.2.2 修改数据"></a>2.2.2 修改数据</h5><blockquote><p>将id为3的数据的score 改为 5</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_edit</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">"""修改评价"""</span><br>    models.Evaluation.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).update(score=<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'修改成功'</span>)<br></code></pre></td></tr></tbody></table></figure><p>浏览器访问<a href="http://localhost:8888/test/edit/">http://localhost:8888/test/edit/</a></p><p><img src="https://s2.loli.net/2022/09/21/6nzYHj5yrcPhKkW.png" alt="image-20220921220530673"></p><h5 id="223-删除数据"><a href="#2-2-3-删除数据" class="headerlink" title="2.2.3 删除数据"></a>2.2.3 删除数据</h5><blockquote><p>删除id为3的数据</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_delete</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">"""删除评价"""</span><br>    models.Evaluation.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).delete()<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'删除成功'</span>)<br></code></pre></td></tr></tbody></table></figure><p>浏览器访问<a href="http://localhost:8888/test/delete/">http://localhost:8888/test/delete/</a></p><p><img src="https://s2.loli.net/2022/09/21/GIonq5AU3usgPye.png" alt="image-20220921220729930"></p><h5 id="224-展示所有数据"><a href="#2-2-4-展示所有数据" class="headerlink" title="2.2.4 展示所有数据"></a>2.2.4 展示所有数据</h5><blockquote><p>在Python中输出表中的数据并展示在页面上</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_list</span>(<span class="hljs-params">request</span>):<br>    datas = models.Evaluation.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> datas:<br>        <span class="hljs-built_in">print</span>(data.<span class="hljs-built_in">id</span>, data.name, data.score)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">'test.html'</span>, {<span class="hljs-string">'datas'</span>: datas})<br></code></pre></td></tr></tbody></table></figure><p>在test.html的nav标签下新增以下代码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-header"</span>&gt;</span><br>            评价模块<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-body"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table table-bordered table-striped"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"col"</span>&gt;</span>编码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"col"</span>&gt;</span>模块名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"col"</span>&gt;</span>分值<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"col"</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                {% for obj in datas %}<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"row"</span>&gt;</span>{{ obj.id }}<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{{ obj.name }}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{{ obj.score }}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-sm"</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                {% endfor %}<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>python控制台输出结果为：</p></blockquote><p><img src="https://s2.loli.net/2022/09/21/WIkcD26uadFf1rS.png" alt="image.png"></p><blockquote><p>浏览器返回如下：</p></blockquote><p><img src="https://s2.loli.net/2022/09/21/fvNrgSsj7kEqA8i.png" alt="image-20220921222920070" style="zoom:50%;"></p>]]></content>
    
    
    <summary type="html">Django项目连接数据库并进行数据库操作</summary>
    
    
    
    
    <category term="👨‍💻Django" scheme="http://dayswithvenki.top/tags/%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBDjango/"/>
    
  </entry>
  
  <entry>
    <title>Django的配置与安装</title>
    <link href="http://dayswithvenki.top/posts/install-django.html"/>
    <id>http://dayswithvenki.top/posts/install-django.html</id>
    <published>2022-09-21T01:14:45.967Z</published>
    <updated>2022-09-21T03:29:00.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django项目"><a href="#Django项目" class="headerlink" title="Django项目"></a>Django项目</h2><p><img src="https://s2.loli.net/2022/09/21/M6nibRrQ8cDEIq3.png" alt="Django _1_.png"></p><h3 id="1安装django"><a href="#1-安装Django" class="headerlink" title="1.安装Django"></a>1.安装Django</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install django<br><br><span class="hljs-comment"># Python终端验证安装</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> django<br><span class="hljs-meta">&gt;&gt;&gt; </span>django.get_version()<br><span class="hljs-string">'4.1.1'</span><br></code></pre></td></tr></tbody></table></figure><h4 id="11终端创建django项目"><a href="#1-1终端创建Django项目" class="headerlink" title="1.1终端创建Django项目"></a>1.1终端创建Django项目</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">django-admin startproject DjangoProject<br></code></pre></td></tr></tbody></table></figure><p> 目录结构：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">$ cd DjangoProject/<br>$ tree<br>.<br>|-- DjangoProject<br>|   |-- __init__.py<br>|   |-- asgi.py<br>|   |-- settings.py<br>|   |-- urls.py<br>|   `-- wsgi.py<br>`-- manage.py<br></code></pre></td></tr></tbody></table></figure><p>目录说明：</p><ul><li>DjangoProject: 项目容器</li><li>manage.py: 命令行工具</li><li>DjangoProject/<strong> init </strong>.py: 告诉Python该目录为Python包</li><li>DjangoProject/asgi.py: ASGI兼容的Web服务器入口，以便项目运行</li><li>DjangoProject/settings.py: 当前项目的配置文件</li><li>DjangoProject/urls.py: 当前项目的URL声明，由Django驱动的网站”目录“</li><li>DjangoProject/wsgi.py: WSGI兼容的Web服务器入口，以便项目运行</li></ul><h4 id="12pycharm创建django项目"><a href="#1-2PyCharm创建Django项目" class="headerlink" title="1.2PyCharm创建Django项目"></a>1.2PyCharm创建Django项目</h4><p><img src="https://s2.loli.net/2022/09/21/nAMc9k2imo3XEHW.png" alt></p><p>配置启动项：</p><p><img src="https://s2.loli.net/2022/09/21/RCmenVq9K6YZWAF.png" alt="image-20220921093707281"></p><p><img src="https://s2.loli.net/2022/09/21/8QbiZdaYIkJNKsf.png" alt="image-20220921093738030"></p><p>运行即可自动启动项目。</p><h3 id="2-创建可以在浏览器查看的页面"><a href="#2-创建可以在浏览器查看的页面" class="headerlink" title="2. 创建可以在浏览器查看的页面"></a>2. 创建可以在浏览器查看的页面</h3><h4 id="21-创建并注册app"><a href="#2-1-创建并注册APP" class="headerlink" title="2.1 创建并注册APP"></a>2.1 创建并注册APP</h4><h5 id="211创建app"><a href="#2-1-1创建APP" class="headerlink" title="2.1.1创建APP"></a>2.1.1创建APP</h5><p>Pycharm左上角目录&gt;工具&gt;运行 manage.py 任务：</p><p>​    在启动的窗口中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">manage.py@djangoProject2 &gt; startapp app01<br></code></pre></td></tr></tbody></table></figure><p>新建app目录如下：</p><p><img src="https://s2.loli.net/2022/09/21/FIs4AvLrjlnyGg1.png" alt="image-20220921095606996"></p><h5 id="212-注册app"><a href="#2-1-2-注册APP" class="headerlink" title="2.1.2 注册APP"></a>2.1.2 注册APP</h5><p>找到DjangoProject/settings.py &gt; INSTALLED_APPS</p><p>加入以下内容</p><p><img src="https://s2.loli.net/2022/09/21/1vBiCWAQakuIgnc.png" alt="image-20220921095951467"></p><h4 id="22-启动项目"><a href="#2-2-启动项目" class="headerlink" title="2.2 启动项目"></a>2.2 启动项目</h4><p>终端启动（Pycharm直接运行项目即可）：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py runserver <span class="hljs-number">8888</span><br></code></pre></td></tr></tbody></table></figure><p>出现链接<a href="http://127.0.0.1:8888/点击跳转后：">http://127.0.0.1:8888/点击跳转后：</a></p><p><img src="https://s2.loli.net/2022/09/21/UVwi7A34dFPZLGC.png" alt="image-20220921100325923"></p><p>Django项目启动成功。</p><h3 id="3创建可访问页面"><a href="#3-创建可访问页面" class="headerlink" title="3.创建可访问页面"></a>3.创建可访问页面</h3><h4 id="31在app文件夹下创建templates和static文件夹"><a href="#3-1在APP文件夹下创建templates和static文件夹" class="headerlink" title="3.1在APP文件夹下创建templates和static文件夹"></a>3.1在APP文件夹下创建templates和static文件夹</h4><p>templates：用于存放html文件。</p><p>static：用于存放静态文件。</p><h5 id="311-于templates下新建html文件如testhtml"><a href="#3-1-1-于templates下新建html文件（如：test-html）" class="headerlink" title="3.1.1 于templates下新建html文件（如：test.html）"></a>3.1.1 于templates下新建html文件（如：test.html）</h5><p><img src="https://s2.loli.net/2022/09/21/v72YR1JuUVQTXW3.png" alt="image-20220921101233013"></p><h5 id="312-于static下新建css目录与js目录"><a href="#3-1-2-于static下新建css目录与js目录" class="headerlink" title="3.1.2 于static下新建css目录与js目录"></a>3.1.2 于static下新建css目录与js目录</h5><p>(1)在CSS目录下新建bootstrap的bootstrap.min.css文件</p><p>将<a href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.1/css/bootstrap.min.css">https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.1/css/bootstrap.min.css</a> 复制进入新建的bootstrap.min.css中</p><p>(2)在JS目录下新建boostrap.bundle.min.js</p><p>将<a href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.1/js/bootstrap.bundle.min.js">https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.1/js/bootstrap.bundle.min.js</a> 复制进新建的bootstrap.bundle.min.js中</p><p><img src="https://s2.loli.net/2022/09/21/Y6eCjFDmsfzVkgI.png" alt="image-20220921101843485"></p><h5 id="313-于html文件中引入js和css文件并增添内容"><a href="#3-1-3-于html文件中引入js和css文件并增添内容" class="headerlink" title="3.1.3 于html文件中引入js和css文件并增添内容"></a>3.1.3 于html文件中引入js和css文件并增添内容</h5><p>(1) 将html改为以下：</p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ {% load static %}</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang="en"&gt;<br>&lt;head&gt;<br>    &lt;meta charset="UTF-8"&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br><span class="hljs-addition">+   &lt;link href="{% static 'css/bootstrap.min.css' %}" rel="stylesheet" /&gt;</span><br>&lt;/head&gt;<br>&lt;body&gt;<br><span class="hljs-addition">+ &lt;div class="container"&gt;</span><br><span class="hljs-addition">+    &lt;nav class="navbar navbar-light bg-light"&gt;</span><br><span class="hljs-addition">+        &lt;div class="container-fluid"&gt;</span><br><span class="hljs-addition">+            &lt;a class="navbar-brand" href="#"&gt;</span><br><span class="hljs-addition">+                &lt;img src="https://v5.bootcss.com/docs/5.1/assets/brand/bootstrap-logo.svg" alt="" width="30" height="24"</span><br><span class="hljs-addition">+                     class="d-inline-block align-text-top"&gt;</span><br><span class="hljs-addition">+                Bootstrap</span><br><span class="hljs-addition">+            &lt;/a&gt;</span><br><span class="hljs-addition">+        &lt;/div&gt;</span><br><span class="hljs-addition">+    &lt;/nav&gt;</span><br><span class="hljs-addition">+ &lt;/div&gt;</span><br>&lt;/body&gt;<br><span class="hljs-addition">+&lt;script src="{% static 'js/boostrap.bundle.min.js' %}"&gt;&lt;/script&gt;</span><br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="32-使新增的html可访问"><a href="#3-2-使新增的html可访问" class="headerlink" title="3.2 使新增的html可访问"></a>3.2 使新增的html可访问</h4><h5 id="321-新建视图函数"><a href="#3-2-1-新建视图函数" class="headerlink" title="3.2.1 新建视图函数"></a>3.2.1 新建视图函数</h5><p>打开APP中的views.py文件</p><p>增加以下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">newtest</span>(<span class="hljs-params">request</span>):<br><span class="hljs-keyword">return</span> render(request, <span class="hljs-string">'test.html'</span>)<br></code></pre></td></tr></tbody></table></figure><h5 id="322-配置url绑定视图函数"><a href="#3-2-2-配置URL绑定视图函数" class="headerlink" title="3.2.2 配置URL绑定视图函数"></a>3.2.2 配置URL绑定视图函数</h5><p>打开项目中的urls.py文件</p><p>(1)从app中import views</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<span class="hljs-comment"># app01是新建的app名</span><br></code></pre></td></tr></tbody></table></figure><p>(2)在urlpatterns列表下新增path</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">'test/'</span>, views.newtest),<span class="hljs-comment"># test/为你需要访问的url</span><br></code></pre></td></tr></tbody></table></figure><h6 id="3221-path函数"><a href="#3-2-2-1-path函数：" class="headerlink" title="3.2.2.1 path函数："></a>3.2.2.1 path函数：</h6><p>Django path() 可以接收四个参数，分别是两个必选参数：route、view 和两个可选参数：kwargs、name。</p><p>语法格式：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(route, view, kwargs=<span class="hljs-literal">None</span>, name=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></tbody></table></figure><ul><li>route: 字符串，表示 URL 规则，与之匹配的 URL 会执行对应的第二个参数 view。</li><li>view: 用于执行与正则表达式匹配的 URL 请求。</li><li>kwargs: 视图使用的字典类型的参数。</li><li>name: 用来反向获取 URL。</li></ul><h5 id="323-访问新建的页面"><a href="#3-2-3-访问新建的页面" class="headerlink" title="3.2.3 访问新建的页面"></a>3.2.3 访问新建的页面</h5><h6 id="3231-浏览器访问-1270018888"><a href="#3-2-3-1-浏览器访问-127-0-0-1-8888" class="headerlink" title="3.2.3.1 浏览器访问 127.0.0.1:8888"></a>3.2.3.1 浏览器访问 127.0.0.1:8888</h6><p>页面变为：</p><p><img src="https://s2.loli.net/2022/09/21/oPmiOlvXdUCaQ5L.png" alt="image-20220921103728982"></p><p>可以看到已经可以访问以下URL：</p><p>1.admin/</p><p>2.test/</p><h6 id="3232-访问1270018888test"><a href="#3-2-3-2-访问127-0-0-1-8888-test" class="headerlink" title="3.2.3.2 访问127.0.0.1:8888/test/"></a>3.2.3.2 访问127.0.0.1:8888/test/</h6><p><img src="https://s2.loli.net/2022/09/21/7JTVxp6n3z1i5NE.png" alt="image-20220921104118986"></p><p>到这里，以及完成项目的建立和运行，以及URL和视图函数的配置与绑定。</p>]]></content>
    
    
    <summary type="html">Django项目配置安装的记录</summary>
    
    
    
    
    <category term="👨‍💻Django" scheme="http://dayswithvenki.top/tags/%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBDjango/"/>
    
  </entry>
  
  <entry>
    <title>OS LAB1 实验报告</title>
    <link href="http://dayswithvenki.top/posts/os-lab1.html"/>
    <id>http://dayswithvenki.top/posts/os-lab1.html</id>
    <published>2022-09-18T14:30:56.651Z</published>
    <updated>2022-09-18T14:47:54.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xv6环境搭建过程"><a href="#xv6环境搭建过程" class="headerlink" title="xv6环境搭建过程"></a>xv6环境搭建过程</h2><h3 id="1-安装vmware虚拟机"><a href="#1-安装VMware虚拟机" class="headerlink" title="1.  安装VMware虚拟机"></a>1.  安装VMware虚拟机</h3><h3 id="2-下载ubuntu-iso包"><a href="#2-下载Ubuntu-ISO包" class="headerlink" title="2.  下载Ubuntu ISO包"></a>2.  下载Ubuntu ISO包</h3><h3 id="3-于vmware创建ubuntu-系统虚拟机"><a href="#3-于VMware创建Ubuntu-系统虚拟机" class="headerlink" title="3.  于VMware创建Ubuntu 系统虚拟机"></a>3.  于VMware创建Ubuntu 系统虚拟机</h3><h3 id="4-xv6的环境搭建"><a href="#4-xv6的环境搭建" class="headerlink" title="4.   xv6的环境搭建"></a>4.   xv6的环境搭建</h3><h4 id="41-在虚拟机中运行以下命令"><a href="#4-1-在虚拟机中运行以下命令" class="headerlink" title="4.1 在虚拟机中运行以下命令"></a>4.1 在虚拟机中运行以下命令</h4><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt-get <span class="hljs-keyword">install </span>git <span class="hljs-keyword">build-essential </span>gdb-<span class="hljs-keyword">multiarch </span>qemu-system-misc gcc-riscv64-linux-gnu <span class="hljs-keyword">binutils-riscv64-linux-gnu </span><br></code></pre></td></tr></tbody></table></figure><p>​    运行中出现以下错误</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220916094258.png" alt></p><p>​    按提示运行命令:</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></tbody></table></figure><p>​    再次运行命令1后安装成功。</p><p>​    检验qwmu是否安装成功:</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220915232401731.png" alt></p><h4 id="42-安装xv6"><a href="#4-2-安装Xv6" class="headerlink" title="4.2 安装Xv6"></a>4.2 安装Xv6</h4><p>​        安装git:</p><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> git<br></code></pre></td></tr></tbody></table></figure><p>​        然后运行以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2021<br><span class="hljs-built_in">cd</span> xv6-labs-2021<br>git checkout util<br>git commit -am <span class="hljs-string">'my solution for util lab exercise 1'</span><br></code></pre></td></tr></tbody></table></figure><p>​        此时需要配置用户名、邮箱：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">'Kevin'</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">'1171407839@qq.com'</span><br></code></pre></td></tr></tbody></table></figure><p>​        在xv6目录下运行以下命令:</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make qemu</span><br></code></pre></td></tr></tbody></table></figure><p>​        得到以下结果：</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220915233200732.png" alt></p><p>XV6环境搭建完毕。</p><h3 id="5三个练手小程序"><a href="#5-三个练手小程序" class="headerlink" title="5.三个练手小程序"></a>5.三个练手小程序</h3><h4 id="51-sleep"><a href="#5-1-sleep" class="headerlink" title="5.1 sleep"></a>5.1 sleep</h4><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Implement <span class="hljs-keyword">the</span> UNIX program sleep <span class="hljs-keyword">for</span> xv6; your sleep should pause <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> user-specified <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-built_in">ticks</span>. A <span class="hljs-built_in">tick</span> is <span class="hljs-keyword">a</span> notion <span class="hljs-keyword">of</span> <span class="hljs-built_in">time</span> defined <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> xv6 kernel, namely <span class="hljs-keyword">the</span> <span class="hljs-built_in">time</span> between <span class="hljs-literal">two</span> interrupts <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> timer chip. Your solution should be <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> user/sleep.c. <br></code></pre></td></tr></tbody></table></figure><h5 id="511-解题思路"><a href="#5-1-1-解题思路" class="headerlink" title="5.1.1 解题思路"></a>5.1.1 解题思路</h5><p>​        从user/user.h 中system call可以看到sleep函数的声明为 int sleep(int); </p><p>​        所以，可以从main中的参数argc(argument count)确定参数的个数，其中，第一个参数为程序的名称，即sleep，而正确运行还需要一个且仅需要一个int型参数。所以当argc不为2时，则输出错误信息并退出；否则，将argv[1]转化为int传入sleep()，随后正常退出。</p><h5 id="512-代码"><a href="#5-1-2-代码" class="headerlink" title="5.1.2 代码"></a>5.1.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* argv[])</span>{<br>    <span class="hljs-comment">// argv[0]为程序的名称sleep,argv[1]为参数</span><br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">2</span>){<br>        <span class="hljs-comment">// 若除了sleep外参数传入个数不为1</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>,<span class="hljs-string">"Error！Wrong Format!"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 错误退出</span><br>    }<br>    sleep(atoi(argv[<span class="hljs-number">1</span>])); <br>    <span class="hljs-comment">// 将argv[1]转化为整型传入sleep</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="513-运行结果测试"><a href="#5-1-3-运行结果测试" class="headerlink" title="5.1.3 运行结果测试"></a>5.1.3 运行结果测试</h5><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220916093520883.png" alt></p><h4 id="52-pingpong"><a href="#5-2-pingpong" class="headerlink" title="5.2 pingpong"></a>5.2 pingpong</h4><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Write a program that uses UNIX system calls to <span class="hljs-string">''</span>ping-pong<span class="hljs-string">''</span> a byte between two processes over a pair of pipes, one <span class="hljs-keyword">for</span> each direction. The parent should send a byte to the child; the child should print <span class="hljs-string">"&lt;pid&gt;: received ping"</span>, where &lt;pid&gt; is its process ID, write the byte on the pipe to the parent, and <span class="hljs-keyword">exit</span>; the parent should read the byte from the child, print <span class="hljs-string">"&lt;pid&gt;: received pong"</span>, and <span class="hljs-keyword">exit</span>. Your solution should be <span class="hljs-keyword">in</span> the file user/pingpong.c. <br></code></pre></td></tr></tbody></table></figure><h5 id="521-解题思路"><a href="#5-2-1-解题思路" class="headerlink" title="5.2.1 解题思路"></a>5.2.1 解题思路</h5><p>​        fork()用于创建子进程，当fork返回0时，表示当前正处于子进程；在父进程中，fork返回新创建子进程的进程ID；若出现错误，fork返回负值。</p><p>​        pipe()被调用时开辟一块缓冲区（管道）用于通信，拥有读端与写端，可通过filedes参数传出给用户程序两个文件描述符，其中filedes[0]指向读端，filedes[1]指向写端。管道在程序中如同打开的文件，所以可以通过write(filedes[1])和read(filedes[0])读写内核缓冲区。</p><p>​        当前进程为子进程时，关闭子进程的写与父进程的读端，当子进程从管道0读到父进程写入管道1的字节时，输出当前pid 与 ping；当前进程为父进程时，关闭父进程的写与子进程的读端，当父进程从管道1读到子进程写入管道0的字节时，输出当前pid 与 pong，最后关闭两个管道的所有读写端口。</p><h5 id="522-代码"><a href="#5-2-2-代码" class="headerlink" title="5.2.2 代码"></a>5.2.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> READ = <span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> WRITE = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> child;<span class="hljs-comment">//若此处写成int child = fork() 测试时会报错</span><br>    <span class="hljs-type">int</span> filede0[<span class="hljs-number">2</span>];     <span class="hljs-comment">// 子进程的读写端</span><br>    <span class="hljs-type">int</span> filede1[<span class="hljs-number">2</span>];     <span class="hljs-comment">// 父进程的读写端</span><br><br>    <span class="hljs-keyword">if</span> (pipe(filede0) || pipe(filede1)) <span class="hljs-comment">// pipe调用返回-1表示失败，返回1表示成功</span><br>    {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error!Pipe Call Fails!"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    }<br><br>    <span class="hljs-keyword">if</span> ((child= fork()) == <span class="hljs-number">0</span>) <span class="hljs-comment">// 创建子进程且当前为子进程时</span><br>    {<br>        close(filede0[WRITE]);<span class="hljs-comment">// 关闭子进程的写</span><br>        close(filede1[READ]);<span class="hljs-comment">// 关闭父进程的读</span><br>        write(filede0[WRITE], <span class="hljs-string">"child"</span>, <span class="hljs-number">1</span>);<br>        read(filede1[READ], <span class="hljs-string">"from father"</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d: received ping\n"</span>, getpid());<br>        <span class="hljs-comment">//先关闭读再关闭写</span><br>        close(filede0[READ]);<br>        close(filede1[WRITE]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>        close(filede0[READ]);<br>        close(filede1[WRITE]);<br>        write(filede0[WRITE], <span class="hljs-string">"father"</span>, <span class="hljs-number">1</span>);<br>        read(filede1[READ], <span class="hljs-string">"from child"</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d: received pong\n"</span>, getpid());<br>        close(filede1[READ]);<br>        close(filede0[WRITE]);<br>        wait(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="523-运行结果测试"><a href="#5-2-3-运行结果测试" class="headerlink" title="5.2.3 运行结果测试"></a>5.2.3 运行结果测试</h5><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220916104606876.png" alt></p><h4 id="53-primes"><a href="#5-3-primes" class="headerlink" title="5.3 primes"></a>5.3 primes</h4><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Write <span class="hljs-keyword">a</span> concurrent <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> prime sieve <span class="hljs-keyword">using</span> pipes. This idea is due <span class="hljs-built_in">to</span> Doug McIlroy, inventor <span class="hljs-keyword">of</span> Unix pipes. The picture halfway down this page <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span> surrounding <span class="hljs-keyword">text</span> explain how <span class="hljs-built_in">to</span> <span class="hljs-built_in">do</span> <span class="hljs-keyword">it</span>. Your solution should be <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> user/primes.c. <br></code></pre></td></tr></tbody></table></figure><h5 id="531-解题思路"><a href="#5-3-1-解题思路" class="headerlink" title="5.3.1 解题思路"></a>5.3.1 解题思路</h5><p>​    进程1输入2-35；进程2打印第一个质数2后，将所有进程1输入的、是进程2打印的质数的倍数的丢弃，把剩余的交给进程3；进程3打印第二个质数3，将所有进程2输入的、是进程3打印的质数的倍数丢弃，把剩余交给进程4……一直重复，直至剩余的输入为空。</p><h5 id="532-代码"><a href="#5-3-2-代码" class="headerlink" title="5.3.2 代码"></a>5.3.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">35</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> READ = <span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> WRITE = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">primes</span><span class="hljs-params">(<span class="hljs-type">int</span> pre_read)</span><br>{<br>    <span class="hljs-type">int</span> prime;<br>    <span class="hljs-keyword">if</span> (read(pre_read, &amp;prime, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)) &lt;= <span class="hljs-number">0</span>)<span class="hljs-comment">// 若prime不为空或文件尾</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"prime %d\n"</span>, prime);<br>    <span class="hljs-type">int</span> filede[<span class="hljs-number">2</span>];<br>    pipe(filede);<br>    <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)<span class="hljs-comment">// 若为上个进程的子进程，即清空上一个输出的质数的倍数后</span><br>    {<br>        close(filede[WRITE]); <span class="hljs-comment">// 关闭写</span><br>        primes(filede[READ]);<span class="hljs-comment">// 递归</span><br>        close(filede[READ]);<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>        <span class="hljs-type">int</span> temp;<br>        close(filede[READ]);<br>        <span class="hljs-keyword">while</span> (read(pre_read, &amp;temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)))<br>            <span class="hljs-keyword">if</span> (temp % prime != <span class="hljs-number">0</span>)<span class="hljs-comment">// 剔除prime的倍数，将剩余的写回pipe中</span><br>                write(filede[WRITE], &amp;temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        close(filede[WRITE]);<br>        wait(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> filede[<span class="hljs-number">2</span>];<br>    pipe(filede);<br>    <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)<br>    {<br>        close(filede[WRITE]);<br>        primes(filede[READ]);<br>        close(filede[READ]);<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>        close(filede[READ]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=MAX;i++)<br>            write(filede[WRITE],&amp;i,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//将2-35依次写入filede</span><br>        close(filede[WRITE]);<br>        wait(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br><br></code></pre></td></tr></tbody></table></figure><h5 id="533-运行结果测试"><a href="#5-3-3-运行结果测试" class="headerlink" title="5.3.3 运行结果测试"></a>5.3.3 运行结果测试</h5><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220916121027380.png" alt></p><h3 id="6实验心得"><a href="#6-实验心得" class="headerlink" title="6.实验心得"></a>6.实验心得</h3><p>​        首先，配置环境应该选比较充裕的时间，防止校园网网速过慢导致一个学生失去他的梦想，几个G的Ubuntu系统，以及几百M的VMware虚拟机软件等，还没开始配置一个下午就过去了；不仅如此，git clone 在 github+校园网双重debuff下，更是交出了10k/s的下载速度，看他下载又看了一晚上，不过最后也终于可以运行了。</p><p>​        回到练手小程序上，首先比较重要的是看懂hints的内容，对其中出现的如fork()，pipe()等系统调用，想要编写程序必须得先明白他们的作用，以及需要用到哪些参数，我自己是习惯先看中文的解释，等到差不多看明白能够使用了，再好好看看xv6内部是如何进行调用的。</p><p>​        最后，学好英语很重要，无论是Ubuntu系统的Terminal终端，还是各种官方的文档，都是全英的，报错信息都有自带的命令建议。</p>]]></content>
    
    
    <summary type="html">在Ubuntu上搭建XV6环境。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>对未来的小小规划</title>
    <link href="http://dayswithvenki.top/posts/expectation.html"/>
    <id>http://dayswithvenki.top/posts/expectation.html</id>
    <published>2022-09-10T07:51:13.348Z</published>
    <updated>2022-09-18T14:39:36.548Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/10/dI12uhYCAXSTger.png" alt="小规划"></p><h2 id="关于网站维护"><a href="#关于网站维护" class="headerlink" title="关于网站维护"></a>关于网站维护</h2><p>​    &nbsp;&nbsp;宝宝呀宝宝，原来自从7月底之后，我就没有再怎么处理过我们网站啦。从8月1号入职开始我才慢慢体会到当工作啥的一起来之后，要维护一个网站的难度真的太大啦！！！特别是当我把很多很多东西都放到了国外的服务商之后，一但被墙，我就要花巨多巨多的时间去维护，功能越多，维护的东西也就越多啦！哎呀呀！！！！</p><p>不过还好啦！也终于把现在有的东西维护好啦！！！然后还学了一些新知识，估计未来慢慢更改，维护成本会越来越低的！！！</p><h2 id="小小规划"><a href="#小小规划" class="headerlink" title="小小规划"></a>小小规划</h2><p>&nbsp;&nbsp;入职之后，特别是接触到许多项目开发后，对从前一些零零散散的知识体系会有一个很不一样的看法，然后现在刚开始，就尽量把前端的各种框架比如：Vue.js,Node.js之类的呀都多多了解清楚，然后把之前一直没有系统训练的HTML语法呀、CSS语法呀、JAVASCRIPT之类的都先做一个系统的学习；然后后端也需要去尽量学习学习，目前正在慢慢学Django的后端框架哇，总之现在对未来的小小希望，也从单纯的前端工程师-&gt;全栈工程师啦！</p><h2 id="认证展示"><a href="#认证展示" class="headerlink" title="认证展示"></a>认证展示</h2><p>&nbsp;&nbsp;最后这里呢，就留给自己展示展示在FreeCodeCamp上面获得的学习证书吧嘎嘎嘎，虽然呢，这些认证意义不大，也非常简单，但是还是放在这儿！留给自己臭美臭美吧！！！！哈哈哈哈哈哈嘎嘎嘎嘎嘎嘎！！！</p><p>1.Responsive Web Design</p><p><img src="https://s2.loli.net/2022/09/10/OBPDCMUIj8xHiv9.jpg" alt="响应式网站" style="zoom: 66%; margin: auto 10px;"></p><p>2.JavaScript 算法和数据结构 </p><p><img src="https://s2.loli.net/2022/09/18/7h5zomaZGnPKM6R.png" style="zoom:73.5%;"></p>]]></content>
    
    
    <summary type="html">About Kevin</summary>
    
    
    
    
    <category term="💻前端" scheme="http://dayswithvenki.top/tags/%F0%9F%92%BB%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一个小小总结</title>
    <link href="http://dayswithvenki.top/posts/summary1.html"/>
    <id>http://dayswithvenki.top/posts/summary1.html</id>
    <published>2022-07-28T09:18:02.000Z</published>
    <updated>2022-07-28T15:07:11.302Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="247323fdbc6fe3e42e170e3f66b7ac2d81d2b69dc6f9d83a15e09e7826fc8b0e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="Days" scheme="http://dayswithvenki.top/categories/Days/"/>
    
    
  </entry>
  
  <entry>
    <title>祝小吴崽生日快乐！！！</title>
    <link href="http://dayswithvenki.top/posts/lovevenki.html"/>
    <id>http://dayswithvenki.top/posts/lovevenki.html</id>
    <published>2022-07-23T16:00:00.000Z</published>
    <updated>2022-07-23T07:10:45.998Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><audio src="https://jsdelivr.pai233.top/gh/Wadehl/web-data/MyBlogdata/music/769735566.mp3" autoplay="autoplay" controls="controls" loop="loop" style="display:none;"></audio></div><p><img src="https://s2.loli.net/2022/07/07/keMqu4rFZJbtRUi.png" alt="郭崽日报"></p><h2 id="你好呀小吴宝宝"><a href="#你好呀，小吴宝宝" class="headerlink" title="你好呀，小吴宝宝"></a>你好呀，小吴宝宝</h2><p>​    不知道，当你看到这里是什么时候呢，是半夜啦，还是早上呢？还是说我们已经一起度过一天了呢？</p><p>​    不知不觉中，咱们也在一起快10个月啦，真的过得好快好快呢！！！我们也算是快要完完整整的在彼此身边度过彼此的20岁啦，谢谢宝宝让我见证了你精彩的20岁呀！希望我有在这一岁里做到让你更加的开心和快乐！在你生日到来的这一天，也希望我能够好好地让你过上一个开开心心快快乐乐的生日吧！</p><p>​    这些画画和布局不知道你还是否满意呢？其实这些从刚刚放假开始我就已经在着手策划啦（比如说上面的这个郭崽日报，就是先设计好海报，再去想到用一个网站的新功能来铺垫一下子的嘿嘿！），但是苦于没有任何的经验，所以只能想到什么就先做什么吧，然后也有很多是发现你有新的兴趣爱好呀，新的喜欢的动漫角色呀，再去慢慢地重新补上，一点点修改。也正因为花了许多的时间在这些上面，偶尔过于认真会导致没有及时回消息呀什么的，可能会让你感觉到很敷衍吧，果咩呀宝宝，因为在做的事情如果先给你看了的话，就会让你失去一些当天才看到的开心吧，但是这样做的话就导致我没办法告诉你为什么我会这样子呀，我也只好先糊弄过去吧，但是后来想想的话，是否又有些本末倒置了呢，假如我做这一切都是为了让你更加开心一点，那我没那么认真回复你的时候，你的不高兴又怎么可能仅靠这些来弥补呢？嗨呀，不过仅仅是这段时间才会这样的，往后我会更加更加注意的啦宝宝。我们吃越南卷，吃蛋糕，吃好多好多好吃的，一起过开开心心的一天，可以不啦宝宝。</p><p>​    总之，希望在看到这些网站上的改变之后，能够稍微安抚安抚你吧宝宝！！</p><div align="center"><img src="https://img2.baidu.com/it/u=1809388834,3346518114&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=434" alt="果咩！！" style="zoom:25%; "></div><p>​    </p><p>​    </p><p>​    <font size="5px" color="red">生日快乐呀宝宝！希望我做的这一些小小的事情，能够为你赶走最近的小烦躁，把小快乐带进你的生活吧！我爱你小吴！！！我们继续加油大步走吧！</font></p><p><img src="https://s2.loli.net/2022/07/17/7lPgXOrHDqM2NSv.png" alt="生日快乐！小吴崽!"></p>]]></content>
    
    
    <summary type="html">to美女小吴</summary>
    
    
    
    <category term="Days" scheme="http://dayswithvenki.top/categories/Days/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 多线程</title>
    <link href="http://dayswithvenki.top/posts/python-thread.html"/>
    <id>http://dayswithvenki.top/posts/python-thread.html</id>
    <published>2022-07-16T07:20:00.000Z</published>
    <updated>2022-07-17T13:01:21.059Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'func'</span>, i)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    t = Thread(target=func)<span class="hljs-comment"># 创建线程并给线程安排任务</span><br>    t.start()<span class="hljs-comment"># 多线程状态为可以开始工作状态，具体执行时间由CPU决定</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">'main'</span>, i)<br>        <br></code></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">funcmain <span class="hljs-number">0</span> <span class="hljs-number">0</span><br>func<br>main <span class="hljs-number">1</span><br>func <span class="hljs-number">2</span><br>func <span class="hljs-number">3</span><br>func <span class="hljs-number">4</span><br> <span class="hljs-number">1</span><br>main func <span class="hljs-number">5</span><br>func <span class="hljs-number">6</span><br>func2<br> <span class="hljs-number">7</span><br>......<br>funcmain  <span class="hljs-number">998992</span><br><br>funcmain  <span class="hljs-number">999993</span><br><br>main <span class="hljs-number">994</span><br>main <span class="hljs-number">995</span><br>main <span class="hljs-number">996</span><br>main <span class="hljs-number">997</span><br>main <span class="hljs-number">998</span><br>main <span class="hljs-number">999</span><br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    
    <category term="🐍Python" scheme="http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"/>
    
    <category term="🕷️爬虫" scheme="http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫实战！</title>
    <link href="http://dayswithvenki.top/posts/python-exercises.html"/>
    <id>http://dayswithvenki.top/posts/python-exercises.html</id>
    <published>2022-07-13T12:30:00.000Z</published>
    <updated>2022-09-18T13:28:00.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注爬虫需要遵循各网站根目录下的robotstxt协议"><a href="#注-爬虫需要遵循各网站根目录下的robots-txt协议！！！" class="headerlink" title="注:爬虫需要遵循各网站根目录下的robots.txt协议！！！"></a><font color="red">注:爬虫需要遵循各网站根目录下的robots.txt协议！！！</font></h1><p>本篇文章仅用于个人学习记录使用，获取到的资源在当天已全部删除，且仅爬取网站其中的部分信息，并未涉及到其他用户的私人信息等，且并未以此产生非法牟利。</p><div class="tabs" id="主要方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主要方法-1">实战1:爬取某视频首页视频</button></li><li class="tab"><button type="button" data-href="#主要方法-2">实战2:爬取某音乐评论</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主要方法-1"><h2 id="实战1爬取某视频首页视频"><a href="#实战1-爬取某视频首页视频" class="headerlink" title="实战1:爬取某视频首页视频"></a>实战1:爬取某视频首页视频</h2><h3 id="爬取内容"><a href="#爬取内容" class="headerlink" title="爬取内容:"></a>爬取内容:</h3><p><img src="https://s2.loli.net/2022/07/13/a8HqniAPFS5TUME.png" alt="image-20220713203443427"></p><h3 id="爬取结果"><a href="#爬取结果" class="headerlink" title="爬取结果:"></a>爬取结果:</h3><p><img src="https://s2.loli.net/2022/07/13/iGO1RNK6WwYxe37.png" alt="image-20220713204319757"></p><h3 id="实现过程及思路"><a href="#实现过程及思路" class="headerlink" title="实现过程及思路:"></a>实现过程及思路:</h3><ol><li><p>从网页主页url中打开控制台，获取主页的html源码，利用xpath解析得到这一块的子页面href。</p></li><li><p>打开子页面的源代码，发现视频并不在其中，则通过network中的Fetch/XHR查找视频来源。</p></li><li><p>从中得到Request URL，进行requests.get发现获取失败，并得到以下内容。</p><p><img src="https://s2.loli.net/2022/07/13/5X6hv3YdDSLZzq7.png" alt="image-20220713210131646" style="zoom: 67%;"></p></li><li><p>分析得到结果，是防盗链反爬导致的，回头找network内headers属性，将User-Agent,Cookie加入headers字典，再次使用requests.get发现仍然如此 ，最后发现是Referer防盗链造成的，Referer的值为子页面的href，将其组成键值对加入headers字典，再次进行requests.get，得到srcUrl。</p></li><li><p>对srcUrl进入发现还有最后一层反爬，通过比对正确的视频url和srcUrl发现：srcUrl是通过真正的url与systemTime组合修改的，找到其修改规律，用replace方法将systemTime改为f’cont-{video_id}’，得到最后正确的视频链接。</p></li><li><p>通过最后的write(requests.get(true_url).content)得到所需视频。</p></li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码:"></a>实现代码:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.13 Kevin</span><br><span class="hljs-string">防盗链处理 某视频 视频爬虫 爬取首页第一个大div里面所有视频</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> html<br>etree = html.etree<br>url = <span class="hljs-string">'https://www.pearvideo.com/'</span><br>res = requests.get(url)<br>tree = etree.HTML(res.text)<br>href_list = tree.xpath(<span class="hljs-string">'//*[@id="vervideoTlist"]/div//@href'</span>)<br><span class="hljs-built_in">print</span>(href_list)<br><span class="hljs-keyword">for</span> href <span class="hljs-keyword">in</span> href_list:<br>    url = <span class="hljs-string">'https://www.pearvideo.com/'</span>+ href<br>    video_id = url.split(<span class="hljs-string">'_'</span>)[<span class="hljs-number">1</span>]<br>    params = {<br>        <span class="hljs-string">'contId'</span>: video_id<br>    }<br>    videoStatus = requests.get(<span class="hljs-string">'https://www.pearvideo.com/videoStatus.jsp'</span>, params)<br>    new_url = videoStatus.url<br>    headers = {<br>        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'</span>,<br>        <span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'__secdyid=e9d7070e31f729879bd4edec9f3db4567721f9f23769837d021657708580; acw_tc=2f624a1916577085808321223e1c9d5da783477514d7ff177f8220c470bbf8; JSESSIONID=2EF2FE6E5DE5C57BD7DAA3C0C372BE69; PEAR_UUID=dd85645b-e891-4615-a677-a8d2db1df2a2; _uab_collina=165770858183026495245603; Hm_lvt_9707bc8d5f6bba210e7218b8496f076a=1657708583; p_h5_u=B2141296-37D6-4117-87E8-E50BC33AFE84; Hm_lpvt_9707bc8d5f6bba210e7218b8496f076a=1657708644; SERVERID=ed8d5ad7d9b044d0dd5993c7c771ef48|1657708664|1657708580'</span>,<br>        <span class="hljs-string">'Referer'</span>: url<br>    }<br>    resp = requests.get(new_url, headers=headers)<br>    resp_json = resp.json()<br>    fake_url = resp_json[<span class="hljs-string">'videoInfo'</span>][<span class="hljs-string">'videos'</span>][<span class="hljs-string">'srcUrl'</span>]<br><br>    <span class="hljs-comment"># 这里用切片方法组合得到真实的url再组合，没用对脑子,非常复杂</span><br>    <span class="hljs-comment"># srcUrl = https://video.pearvideo.com/mp4/third/20220712/1657710591280-11905134-122533-hd.mp4</span><br>    <span class="hljs-comment"># part_list1 = fake_url.split('/')[-1].split('-')[1:]</span><br>    <span class="hljs-comment"># part_list2 = fake_url.split('-')[0].split('/')[0:-1]</span><br>    <span class="hljs-comment"># part_left = ''</span><br>    <span class="hljs-comment"># part_right = ''</span><br>    <span class="hljs-comment"># for item in part_list1:</span><br>    <span class="hljs-comment">#     part_right += item+'-'</span><br>    <span class="hljs-comment"># for it in part_list2:</span><br>    <span class="hljs-comment">#     part_left += it+'/'</span><br>    <span class="hljs-comment"># true_url = part_left + 'cont-'+video_id + '-' + part_right.strip('-')</span><br><br>    <span class="hljs-comment"># 以下使用replace方法</span><br>    systemTime = resp_json[<span class="hljs-string">'systemTime'</span>]<br>    true_url = fake_url.replace(systemTime, <span class="hljs-string">f"cont-<span class="hljs-subst">{video_id}</span>"</span>)<br>    <span class="hljs-comment">#print(true_url)</span><br>    video_name = <span class="hljs-string">f'<span class="hljs-subst">{video_id}</span>.mp4'</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">'video/'</span>+video_name, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> fw:<br>        resp2 = requests.get(true_url)<br>        fw.write(resp2.content)<br></code></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主要方法-2"><h2 id="实战2爬取某音乐评论"><a href="#实战2-爬取某音乐评论" class="headerlink" title="实战2:爬取某音乐评论"></a>实战2:爬取某音乐评论</h2><h3 id="爬取内容"><a href="#爬取内容" class="headerlink" title="爬取内容:"></a>爬取内容:</h3><p><img src="https://s2.loli.net/2022/07/14/VYU6u3vpg92Ij7R.png" alt="image-20220714130414636"></p><h3 id="爬取结果"><a href="#爬取结果" class="headerlink" title="爬取结果:"></a>爬取结果:</h3><h3 id="实现过程及思路"><a href="#实现过程及思路" class="headerlink" title="实现过程及思路:"></a>实现过程及思路:</h3><ol><li><p>查看网页源代码，发现评论并没有在源代码内，转而找NetWork下对应评论的请求，查看headers。</p></li><li><p><img src="https://s2.loli.net/2022/07/14/Skq6uQ1yL2GMTxC.png" alt="image-20220714132316671"></p><p><img src="https://s2.loli.net/2022/07/14/rDvLUy7sa8TiHnx.png" alt="image-20220714132043044.png"></p><p>发现From Data内数据被加密。</p><p>解决思路：</p><ol><li>找到未加密的参数    </li><li>参考原来的加密逻辑加密自己的参数</li><li>请求到网址，得到加密信息</li></ol><p>步骤：</p><ol><li><p>寻找加密过程：</p><p><img src="https://s2.loli.net/2022/07/14/kwu7nvrbiaSsyZF.png" alt="image-20220714134944760.png"></p><p><img src="https://s2.loli.net/2022/07/14/BirJSIt3NlZpM5n.png" alt="image-20220714135602339.png"></p><p><img src="https://s2.loli.net/2022/07/14/6CSUQ3xpBlFywTP.png" alt="image-20220714135815208.png"></p><p>进入Call Stack查看上一步的，直至找到数据未加密的时候：</p><p><img src="https://s2.loli.net/2022/07/14/A7FWYifKpRZI39C.png" alt="image-20220714141748722.png"></p><p><img src="https://s2.loli.net/2022/07/14/rjkmUIBsneTwF3v.png" alt="image-20220714142056651.png"></p><p>观察后可得到加密函数如下：</p><p><img src="https://s2.loli.net/2022/07/14/t5flNAaSwB8K14y.png" alt="image-20220714142756520.png"></p><p>∴加密的过程为 windows.asrsea(加密前数据,xxx,xxx)</p><p>进一步找asrsea函数组的定义:</p><p><img src="https://s2.loli.net/2022/07/14/dxfWiu3HQsk4X1C.png" alt="image-20220714143906039.png"></p><p>所以具体实参对应：d=data参数, e=buV0x([“流泪”, “强”]), f=buV0x(Rg4k.md), g=buV0x([“爱心”, “女孩”, “惊恐”, “大笑”])<font color="red">【参数efg可以从Console运行得出以下结果】</font></p><p><img src="https://s2.loli.net/2022/07/14/5AwbUs7Y4mdecB2.png" alt="image-20220714144449898.png"></p><p>分析函数运行过程：在代码里有</p></li></ol></li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码:"></a>实现代码:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.14 Kevin</span><br><span class="hljs-string">网易云音乐 热评 爬虫</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode<br><span class="hljs-keyword">import</span> json<br><br>d = <span class="hljs-string">'010001'</span><br>f = <span class="hljs-string">'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'</span><br>g = <span class="hljs-string">'0CoJUm6Qyw8W8jud'</span><br>i = <span class="hljs-string">"kyM74e2babr6Ktf3"</span><br>data = {<br>    <span class="hljs-string">"rid"</span>: <span class="hljs-string">"R_SO_4_28160882"</span>,<br>    <span class="hljs-string">"threadId"</span>: <span class="hljs-string">"R_SO_4_28160882"</span>,<br>    <span class="hljs-string">"pageNo"</span>: <span class="hljs-string">"1"</span>,<br>    <span class="hljs-string">"pageSize"</span>: <span class="hljs-string">"20"</span>,<br>    <span class="hljs-string">"cursor"</span>: <span class="hljs-string">"-1"</span>,<br>    <span class="hljs-string">"offset"</span>: <span class="hljs-string">"0"</span>,<br>    <span class="hljs-string">"orderType"</span>: <span class="hljs-string">"1"</span>,<br>    <span class="hljs-string">"csrf_token"</span>: <span class="hljs-string">"4a42317491b25188649cd33d5ccfe8c4"</span><br>}   <span class="hljs-comment"># data为解密前的数据</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_encSecKey</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"5015aaf2b9d0c1487908bf12cd0afdac506c4e7527cb6805ead6f4f6fa363aed69d876a0a9ecf18caaadc09ff9a61dcbf868657e15bbd0a24a44c41b499e19d5e9eede71d3f99232f965515aef8fc282f15b7ee7816fd9b5ac2d3784f385f03213ea8882edafe47bf88b3cd0f120f441f9246348fb2d75b6799f8548b021b04b"</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_params</span>(<span class="hljs-params">data</span>):   <span class="hljs-comment"># 默认所得为字符串</span><br>    first = enc_params(data, g)<br>    second = enc_params(first, i)<br>    <span class="hljs-keyword">return</span> second<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_16</span>(<span class="hljs-params">data</span>):<br>    pad = <span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(data) % <span class="hljs-number">16</span><br>    data += <span class="hljs-built_in">chr</span>(pad)*pad<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc_params</span>(<span class="hljs-params">data, key</span>):<br>    iv = <span class="hljs-string">'0102030405060708'</span><br>    data = to_16(data)<br>    aes = AES.new(key=key.encode(<span class="hljs-string">"utf-8"</span>), IV=iv.encode(<span class="hljs-string">'utf-8'</span>), mode=AES.MODE_CBC)    <span class="hljs-comment"># 创建加密器</span><br>    bs = aes.encrypt(data.encode(<span class="hljs-string">'utf-8'</span>))  <span class="hljs-comment"># 加密,加密的内容长度必须是16的倍数,</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(b64encode(bs), <span class="hljs-string">"utf-8"</span>)<br><br><br>url = <span class="hljs-string">'https://music.163.com/weapi/comment/resource/comments/get?csrf_token=4a42317491b25188649cd33d5ccfe8c4'</span><br><span class="hljs-comment"># 处理加密过程</span><br><span class="hljs-string">""" </span><br><span class="hljs-string">function a(a) { # 返回随机16位字符串</span><br><span class="hljs-string">        var d, e, b = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", c = "";</span><br><span class="hljs-string">        for (d = 0; a &gt; d; d += 1)  # 循环16次</span><br><span class="hljs-string">            e = Math.random() * b.length,   # 随机数</span><br><span class="hljs-string">            e = Math.floor(e),  # 取整</span><br><span class="hljs-string">            c += b.charAt(e);   # 取字符串</span><br><span class="hljs-string">        return c</span><br><span class="hljs-string">    }</span><br><span class="hljs-string">    function b(a, b) {</span><br><span class="hljs-string">        var c = CryptoJS.enc.Utf8.parse(b)  # b是秘钥</span><br><span class="hljs-string">          , d = CryptoJS.enc.Utf8.parse("0102030405060708")</span><br><span class="hljs-string">          , e = CryptoJS.enc.Utf8.parse(a)  # e是数据</span><br><span class="hljs-string">          , f = CryptoJS.AES.encrypt(e, c, {    # c是加密的秘钥</span><br><span class="hljs-string">            iv: d,  # 偏移量</span><br><span class="hljs-string">            mode: CryptoJS.mode.CBC # 加密模式</span><br><span class="hljs-string">        });</span><br><span class="hljs-string">        return f.toString()</span><br><span class="hljs-string">    }</span><br><span class="hljs-string">    function c(a, b, c) {</span><br><span class="hljs-string">        var d, e;</span><br><span class="hljs-string">        return setMaxDigits(131),</span><br><span class="hljs-string">        d = new RSAKeyPair(b,"",c),</span><br><span class="hljs-string">        e = encryptedString(d, a)</span><br><span class="hljs-string">    }</span><br><span class="hljs-string">    function d(d, e, f, g) {</span><br><span class="hljs-string">        var h = {}</span><br><span class="hljs-string">          , i = a(16);  # i是16位随机字符串</span><br><span class="hljs-string">        return h.encText = b(d, g), # g是秘钥</span><br><span class="hljs-string">        h.encText = b(h.encText, i),    # 返回params，i是秘钥</span><br><span class="hljs-string">        h.encSecKey = c(i, e, f),   #得到encSecKey  8===D 此时i已经是一个定制，所以可def一个函数get_encSecKey</span><br><span class="hljs-string">        h</span><br><span class="hljs-string">    }</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    具体调用: var bKB1x = window.asrsea( d=JSON.stringify(i9b), e=buV0x(["流泪", "强"]), f=buV0x(Rg4k.md), g=buV0x(["爱心", "女孩", "惊恐", "大笑"]));</span><br><span class="hljs-string">    d:数据，e</span><br><span class="hljs-string">"""</span><br><br>resp = requests.post(url, data={<br>    <span class="hljs-string">"params"</span>: get_params(json.dumps(data)),<br>    <span class="hljs-string">"encSecKey"</span>: get_encSecKey()<br>})<br><span class="hljs-built_in">print</span>(resp.json())<br></code></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">一些爬虫实战</summary>
    
    
    
    
    <category term="🐍Python" scheme="http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"/>
    
    <category term="🕷️爬虫" scheme="http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python Xpath模块</title>
    <link href="http://dayswithvenki.top/posts/python-xpath1.html"/>
    <id>http://dayswithvenki.top/posts/python-xpath1.html</id>
    <published>2022-07-12T08:18:00.000Z</published>
    <updated>2022-07-12T14:24:21.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="xpath模块"><a href="#Xpath模块" class="headerlink" title="Xpath模块"></a>Xpath模块</h1><blockquote><p>from lxml import html</p><p>etree = html.etree</p></blockquote><h2 id="使用到的html文件"><a href="#使用到的HTML文件" class="headerlink" title="使用到的HTML文件:"></a>使用到的HTML文件:</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">titile</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">titile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.baidu.com"</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.google.com"</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.sougou.com"</span>&gt;</span>搜狗<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"feiji"</span>&gt;</span>飞机<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"dapao"</span>&gt;</span>大炮<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"huoche"</span>&gt;</span>火车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"job"</span>&gt;</span>李嘉诚<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"common"</span>&gt;</span>胡辣汤<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="一个小样例"><a href="#一个小样例：" class="headerlink" title="一个小样例："></a>一个小样例：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> html<br><br>tree = html.etree.parse(<span class="hljs-string">"b.html"</span>)<br><span class="hljs-comment"># result = tree.xpath('/html')</span><br><span class="hljs-comment"># result = tree.xpath('/html/body/ul/li/a/text()')     # xpath索引从1开始</span><br><br><span class="hljs-comment"># result = tree.xpath('/html/body/ol/li[2]/a/text()')# 指取该标签的内容</span><br>result = tree.xpath(<span class="hljs-string">'/html/body/ol/li/a[@href="dapao"]/text()'</span>)  <br><span class="hljs-comment"># @href表示属性href等于双引号内内容</span><br><span class="hljs-built_in">print</span>(result)<br><br>li_list = tree.xpath(<span class="hljs-string">'/html/body/ol/li'</span>)<br><span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_list:<br>    tex = li.xpath(<span class="hljs-string">'./a/@href'</span>)<span class="hljs-comment"># 指取属性href的值</span><br>    <span class="hljs-built_in">print</span>(tex)<br><br><span class="hljs-built_in">print</span>(tree.xpath(<span class="hljs-string">'/html/body/div[1]/text()'</span>))<br></code></pre></td></tr></tbody></table></figure><p>可以通过浏览器控制台的功能快速得到xpath</p><h2 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.12 Kevin</span><br><span class="hljs-string">猪八戒网 Xpath 爬虫</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> html<br><span class="hljs-keyword">import</span> requests<br><br>etree = html.etree<br>url = <span class="hljs-string">'https://beijing.zbj.com/search/shop/?type=new&amp;kw=saas'</span><br>resp = requests.get(url)<br><br>html = etree.HTML(resp.text)<br><br>divs = html.xpath(<span class="hljs-string">'//*[@id="__layout"]/div/div[3]/div/div[3]/div[4]/div[1]/div'</span>)<br><span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> divs:<br>    name = div.xpath(<span class="hljs-string">'./div[1]/div/div/a/div/div/div/div[1]/div[1]/div[2]/div[1]/text()'</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) != <span class="hljs-number">0</span>:<br>        com_name = name[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        com_name = <span class="hljs-string">"no info"</span><br>    city = div.xpath(<span class="hljs-string">'./div[1]/div/div/a/div/div/div/div[1]/div[1]/div[2]/div[2]/text()'</span>)<br>    price = div.xpath(<span class="hljs-string">'./div/div/div/a[@target="_blank"]/div/div/div/div[1]/div[2]/div/div/text()'</span>)<br>    com_good = div.xpath(<span class="hljs-string">'.//div[1]/div/div/a/div/div/div/div[2]/div[2]/text()'</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(city) != <span class="hljs-number">0</span>:<br>        city_name = (city[<span class="hljs-number">2</span>][<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">else</span>:<br>        city_name = <span class="hljs-string">"no info"</span><br>    <span class="hljs-built_in">print</span>(com_name, city_name, com_good[<span class="hljs-number">0</span>], price[<span class="hljs-number">0</span>])   <span class="hljs-comment"># 公司名、所处城市、擅长、平均成交价格</span><br><br><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">网页爬虫初学——Python Xpath模块</summary>
    
    
    
    
    <category term="🐍Python" scheme="http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"/>
    
    <category term="🕷️爬虫" scheme="http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python BS模块</title>
    <link href="http://dayswithvenki.top/posts/python-beautifulsoup.html"/>
    <id>http://dayswithvenki.top/posts/python-beautifulsoup.html</id>
    <published>2022-07-12T05:38:32.877Z</published>
    <updated>2022-07-12T10:13:14.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bs模块"><a href="#bs模块" class="headerlink" title="bs模块"></a>bs模块</h1><blockquote><p>from bs4 import BeautifulSoup</p></blockquote><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><p><img src="https://s2.loli.net/2022/07/12/dl8GhTYni5Crgyk.png" alt="image-20220712155440694"></p><h3 id="lxml-html-解析器下的选择器"><a href="#lxml-HTML-解析器下的选择器" class="headerlink" title="lxml HTML 解析器下的选择器"></a>lxml HTML 解析器下的选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>•选择元素、获取名称、获取属性、获取内容、嵌套选择、子节点和子孙节点、父节点和祖先节点、兄弟节点</p><blockquote><p>•soup.prettify()、soup.title.name、soup.head、soup.p.string、soup.p[‘name’]</p></blockquote><h4 id="标准选择器"><a href="#标准选择器" class="headerlink" title="标准选择器"></a>标准选择器</h4><blockquote><p>•soup.find_all(‘ul’)、find_parents()、find_next_siblings()、find_previous_siblings()</p><p>•soup.find(‘ul’)、find_parent()、find_next_sibling()、find_previous_sibling()</p></blockquote><h4 id="css选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><blockquote><p>soup.select()、soup.select_one()直接传入选择器参数 [.代表class,#代表id]</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">soup.select(<span class="hljs-string">'.panel .panel-heading'</span>)<br>soup.select(<span class="hljs-string">'ul li'</span>)<br>soup.select(<span class="hljs-string">'#list-2 .element'</span>)<br>ul = soup.select(<span class="hljs-string">'ul'</span>)[<span class="hljs-number">0</span>]<br>uid = ul[<span class="hljs-string">'id'</span>]<br>trs = soup.select(<span class="hljs-string">'table tbody tr'</span>)<br>title = trs[<span class="hljs-number">0</span>].select_one(<span class="hljs-string">'td a'</span>).text<br></code></pre></td></tr></tbody></table></figure><h2 id="一个样例"><a href="#一个样例" class="headerlink" title="一个样例"></a>一个样例</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">url = <span class="hljs-string">''</span><br>resp = requests.get(url)<br><br><span class="hljs-comment">#解析数据</span><br><span class="hljs-comment"># 1.把页面源代码交给BeautifulSoup处理，生成bs对象</span><br>page = BeautifulSoup(resp.text, <span class="hljs-string">"lxml"</span>) <span class="hljs-comment">#指定html解析器</span><br><span class="hljs-comment"># 2.从bs对象中查找数据</span><br><span class="hljs-comment"># find(标签,属性=值)</span><br><span class="hljs-comment"># find_all（标签,属性=值)</span><br><span class="hljs-comment"># table = page.find("table", class_="hq_table") #class是Python关键字</span><br>table = page.find(<span class="hljs-string">"table"</span>, attrs={<span class="hljs-string">"class"</span>: <span class="hljs-string">"hq_table"</span>})  <span class="hljs-comment">#避免class</span><br></code></pre></td></tr></tbody></table></figure><h2 id="一个实例"><a href="#一个实例" class="headerlink" title="一个实例"></a>一个实例</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.12 Kevin</span><br><span class="hljs-string">优美图库 唯美壁纸 BeautifulSoup解析实例</span><br><span class="hljs-string">"""</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>url = <span class="hljs-string">'https://www.umei.cc/bizhitupian/weimeibizhi/'</span><br>resp = requests.get(url)<br>resp.encoding = <span class="hljs-string">'utf-8'</span><br><br><br>page = BeautifulSoup(resp.text, <span class="hljs-string">"lxml"</span>)<br>a_list = page.find(<span class="hljs-string">"ul"</span>, class_=<span class="hljs-string">"pic-list after"</span>).find_all(<span class="hljs-string">"a"</span>)<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> a_list:<br>    curl = <span class="hljs-string">'https://www.umei.cc'</span>+a.get(<span class="hljs-string">'href'</span>)<br>    resp2 = requests.get(curl)<br>    resp2.encoding = <span class="hljs-string">'utf-8'</span><br>    page2 = BeautifulSoup(resp2.text, <span class="hljs-string">"lxml"</span>)<br>    src = page2.find(<span class="hljs-string">"section"</span>, class_=<span class="hljs-string">"img-content"</span>).find(<span class="hljs-string">"img"</span>).get(<span class="hljs-string">'src'</span>)<br>    img_name = src.split(<span class="hljs-string">'/'</span>)[-<span class="hljs-number">1</span>]   <span class="hljs-comment"># 以网站图片名字命名图片</span><br>    src = requests.get(src)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"img/"</span>+img_name, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> fw:<br>        fw.write(src.content)   <span class="hljs-comment"># 以字节方式写入文件</span><br>        <span class="hljs-built_in">print</span>(img_name, <span class="hljs-string">"over!"</span>)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">网页爬虫初学——Python BS模块</summary>
    
    
    
    
    <category term="🐍Python" scheme="http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"/>
    
    <category term="🕷️爬虫" scheme="http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python Re模块</title>
    <link href="http://dayswithvenki.top/posts/python-remodule.html"/>
    <id>http://dayswithvenki.top/posts/python-remodule.html</id>
    <published>2022-07-11T07:15:00.000Z</published>
    <updated>2022-07-11T12:41:29.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><blockquote><p>import re</p></blockquote><h2 id="findall"><a href="#findall：" class="headerlink" title="findall："></a>findall：</h2><p>匹配字符串中所有符合正则的内容，返回迭代器。</p><p>lst = re.findall(r”\d+”, “我的电话号码一个是：12345,另一个是：13579”)<br>print(lst)</p><blockquote><p>[‘12345’,’13579’]</p></blockquote><h2 id="finditer"><a href="#finditer" class="headerlink" title="finditer:"></a>finditer:</h2><p>匹配字符串中所有的内容，返回迭代器,获取内容需要.group()。<br>it = re.finditer(r”\d+”, “我的电话号码一个是：12345,另一个是：13579”)<br>for i in it:<br>    print(i.group())</p><blockquote><p>12345<br>13579</p></blockquote><h2 id="search"><a href="#search" class="headerlink" title="search:"></a>search:</h2><p>返回match对象，获取数据需要.group()，找到一个结果就返回。<br>s = re.search(r”\d+”, “我的电话号码一个是：12345,另一个是：13579”)<br>print(s.group())</p><blockquote><p>12345</p></blockquote><h2 id="match"><a href="#match" class="headerlink" title="match:"></a>match:</h2><p>从头开始匹配与search类似<br>s = re.search(r”\d+”, “12345,另一个是：13579”)<br>print(s.group())</p><blockquote><p>12345</p></blockquote><h2 id="预加载正则表达式"><a href="#预加载正则表达式" class="headerlink" title="预加载正则表达式"></a>预加载正则表达式</h2><p>obj = re.compile(r”\d+”)<br>rets = obj.finditer(“我的电话号码一个是：12345,另一个是：13579”)<br>for ret in rets:<br>    print(ret.group())</p><blockquote><p>12345<br>13579</p></blockquote><p>一个样例[选择符合表达式内容的部分内容方法]:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>s = <span class="hljs-string">"""</span><br><span class="hljs-string">&lt;div class='Jay'&gt;&lt;span id='1'&gt;周杰伦&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">&lt;div class='Eason'&gt;&lt;span id='2'&gt;陈奕迅&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">&lt;div class='JJ'&gt;&lt;span id='3'&gt;林俊杰&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">"""</span><br><br><span class="hljs-comment"># (?p&lt;分组名字&gt;正则) 可以单独从正则匹配的内容中进一步提取内容</span><br><span class="hljs-comment"># re.S 令.能够匹配所有字符</span><br>obj = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r"&lt;div class='.*?'&gt;&lt;span id='(?P&lt;top_id&gt;\d+)'&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;&lt;/div&gt;"</span>, re.S)<br><br>res = obj.finditer(s)<br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> res:<br>    <span class="hljs-built_in">print</span>(it.group(<span class="hljs-string">'top_id'</span>), it.group(<span class="hljs-string">'name'</span>))<br></code></pre></td></tr></tbody></table></figure><div class="tabs" id="两个案例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#两个案例-1">豆瓣top250</button></li><li class="tab"><button type="button" data-href="#两个案例-2">盗版天堂电影</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="两个案例-1"><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.11 Kevin</span><br><span class="hljs-string">豆瓣电影排行榜top250爬虫(源代码只能进行前25个电影爬虫,通过while+params解决)</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> csv<br><br>st = <span class="hljs-number">0</span><br>url = <span class="hljs-string">'https://movie.douban.com/top250'</span><br>header = [<span class="hljs-string">'电影名'</span>, <span class="hljs-string">'上映年份'</span>, <span class="hljs-string">'评分'</span>, <span class="hljs-string">'评分人数'</span>]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"ranting.csv"</span>, <span class="hljs-string">"w"</span>, encoding=<span class="hljs-string">"utf-8"</span>, newline=<span class="hljs-string">''</span>) <span class="hljs-keyword">as</span> fw:<br>    writer = csv.writer(fw)<br>    writer.writerow(header)<br><br><span class="hljs-keyword">while</span> st &lt; <span class="hljs-number">250</span>:<br>    params = {<span class="hljs-string">'start'</span>: st}<br>    headers = {<br>        <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'</span><br>    }<br>    resp = requests.get(url, headers=headers, params=params)<br>    resp.encoding = <span class="hljs-string">'utf-8'</span><br>    html = resp.text<br>    <br>    obj = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r'&lt;li&gt;.*?&lt;span class="title"&gt;(?P&lt;name&gt;.*?)'</span><br>                     <span class="hljs-string">r'&lt;/span&gt;.*?&lt;p class=""&gt;.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp'</span><br>                     <span class="hljs-string">r'.*?&lt;span class="rating_num" property="v:average"&gt;(?P&lt;rating&gt;.*?)&lt;/span&gt;'</span><br>                     <span class="hljs-string">r'.*?&lt;span&gt;(?P&lt;amount&gt;.*?)人评价&lt;/span&gt;'</span>, re.S)<br>    res = obj.finditer(html)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"ranting.csv"</span>, <span class="hljs-string">"a"</span>, encoding=<span class="hljs-string">"utf-8"</span>, newline=<span class="hljs-string">''</span>) <span class="hljs-keyword">as</span> fw:<br>        writer = csv.writer(fw)<br>        <span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> res:<br>            dic = it.groupdict()<br>            dic[<span class="hljs-string">"year"</span>] = dic[<span class="hljs-string">"year"</span>].strip()<br>            writer.writerow(dic.values())<br>    st += <span class="hljs-number">25</span><br></code></pre></td></tr></tbody></table></figure><p>结果：</p><p><img src="https://s2.loli.net/2022/07/11/wURD3JSYHog6npO.png" alt="image-20220711173010251"></p><p><img src="https://s2.loli.net/2022/07/11/O8aotcHj4mlTEb6.png" alt="image-20220711173030280"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="两个案例-2"><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.11 Kevin</span><br><span class="hljs-string">爬取电影天堂2022必看电影名称，下载链接</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>url = <span class="hljs-string">"https://dytt89.com/"</span><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'</span><br>}<br><br>resp = requests.get(url, headers)<br>resp.encoding = <span class="hljs-string">'gb2312'</span><br>html = resp.text<br>url_list = []<br>obj1 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r"2022必看热片.*?&lt;ul&gt;(?P&lt;ul&gt;.*?)&lt;/ul&gt;"</span>, re.S)<br>obj2 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r"&lt;a href='(?P&lt;href&gt;.*?)'"</span>, re.S)<br>obj3 = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r'◎片　　名(?P&lt;name&gt;.*?)&lt;br /&gt;.*?'</span><br>                  <span class="hljs-string">r'&lt;td style="WORD-WRAP: break-word" bgcolor="#fdfddf"&gt;&lt;a href="(?P&lt;magnet&gt;.*?)"&gt;'</span>, re.S)<br>res1 = obj1.finditer(html)<br><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> res1:<br>    ul = it.group(<span class="hljs-string">'ul'</span>)<br>    res2 = obj2.finditer(ul)<br>    <span class="hljs-keyword">for</span> it2 <span class="hljs-keyword">in</span> res2:<br>        new_url = url+it2.group(<span class="hljs-string">'href'</span>).strip(<span class="hljs-string">'/'</span>)<br>        url_list.append(new_url)<br>        <span class="hljs-comment">#resp2 = requests.get(new_url, headers=headers)</span><br>        <span class="hljs-comment"># resp2.encoding = 'gb2312'</span><br>        <span class="hljs-comment"># res3 = obj3.finditer(resp2.text)</span><br>        <span class="hljs-comment"># for it3 in res3:</span><br>        <span class="hljs-comment">#     print(it3.group('name'), it3.group('magnet'))</span><br>        <span class="hljs-comment">#     break</span><br><span class="hljs-keyword">for</span> href <span class="hljs-keyword">in</span> url_list:<br>    child_resp = requests.get(href, headers=headers)<br>    child_resp.encoding = <span class="hljs-string">'gb2312'</span><br>    res3 = obj3.search(child_resp.text)<br>    <span class="hljs-built_in">print</span>(res3.group(<span class="hljs-string">'name'</span>), res3.group(<span class="hljs-string">'magnet'</span>))<br></code></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">网页爬虫初学——Python Re模块</summary>
    
    
    
    
    <category term="🐍Python" scheme="http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"/>
    
    <category term="🕷️爬虫" scheme="http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析</title>
    <link href="http://dayswithvenki.top/posts/python-data-analysis.html"/>
    <id>http://dayswithvenki.top/posts/python-data-analysis.html</id>
    <published>2022-07-10T16:00:00.000Z</published>
    <updated>2022-07-11T12:41:07.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><p>Requests等可以抓取整个网页，但是我们并不需要整个网页的内容，则可以通过数据提取得到需要的内容。</p><p>三种解析方式：</p><p>1.正则表达式解析</p><p>2.bs4解析</p><p>3.xpath解析</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>优点: 速度快、效率高、准确性高 缺点：上手困难</p><p>正则语法：使用元字符进行排列组合用来匹配字符串，在线测试正则表达式:tool.oschina.net/regex/</p><p>元字符: 具有固定含义的符号</p><h3 id="常用元字符"><a href="#常用元字符" class="headerlink" title="常用元字符"></a>常用元字符</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">. 匹配除换行符以外的任意字符<br>\w 匹配字母或数字或下划线<br>\s 匹配任意空白字符<br>\d 数字<br>\n 换行符<br>\t 制表符<br><br>^ 字符串的开始<br>$ 字符串的结尾<br><br>\W 匹配非字母或数字或下划线<br>\D 匹配非数字<br>\S 匹配非空白字符<br>a|b a或b<br>() 匹配括号内的表达式，也表示一个组<br>[...] 匹配字符组中的字符<br>[^...] 匹配除了字符组中字符的所有字符<br></code></pre></td></tr></tbody></table></figure><h3 id="量词"><a href="#量词：" class="headerlink" title="量词："></a>量词：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">* 重复零次或更多次<br>+ 重复一次或多次<br>? 重复零次或一次<br>{n} 重复n次<br>{n,} 重复n次或更多次<br>{n,m} 重复n到m次<br></code></pre></td></tr></tbody></table></figure><h3 id="贪婪匹配和惰性匹配"><a href="#贪婪匹配和惰性匹配" class="headerlink" title="贪婪匹配和惰性匹配:"></a>贪婪匹配和<font color="red">惰性匹配</font>:</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">.* 贪婪匹配<br>.*? 惰性匹配<br></code></pre></td></tr></tbody></table></figure><p>案例:</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">str: 一起打游戏吗，待会打游戏吗，还是现在打游戏呢？</span><br><span class="hljs-section">reg: 一.*?打游戏</span><br><br><span class="hljs-section">结果: 一起打游戏</span><br><br><span class="hljs-section">reg: 一.*打游戏</span><br><span class="hljs-section">结果:一起打游戏吗，待会打游戏吗，还是现在打游戏</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">网页爬虫初学——正则表达式</summary>
    
    
    
    
    <category term="🐍Python" scheme="http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"/>
    
    <category term="🕷️爬虫" scheme="http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python Requests</title>
    <link href="http://dayswithvenki.top/posts/python-requests.html"/>
    <id>http://dayswithvenki.top/posts/python-requests.html</id>
    <published>2022-07-07T16:00:00.000Z</published>
    <updated>2022-07-13T10:25:39.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="request库"><a href="#Request库" class="headerlink" title="Request库"></a>Request库</h2><div class="tabs" id="主要方法"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主要方法-1">get</button></li><li class="tab"><button type="button" data-href="#主要方法-2">post</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主要方法-1"><p>获取http网页的主要方法，对应http的get。</p><p><font size="5px">requests.get(url, params=None, **kwargs)</font><br></p><div class="tabs" id="get属性"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#get属性-1">params</button></li><li class="tab"><button type="button" data-href="#get属性-2">**kwargs</button></li><li class="tab"><button type="button" data-href="#get属性-3">Response对象的属性</button></li><li class="tab"><button type="button" data-href="#get属性-4">一个样例</button></li><li class="tab"><button type="button" data-href="#get属性-5">另一个案例(关于需要登录的网页处理：Cookie)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="get属性-1"><p><span class="nota" data-nota="requests.get方法在发起请求之前，会先对params查询参数进行编码，编码后的查询参数会自动的和base_url进行拼接，拼接成一个完整的url地址后，再向网站发起请求。">用于发送查询字符串，一般为字典或者字节流格式。</span></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">'https://www.baidu.com/s'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>values = {<br><span class="hljs-string">'wd'</span>:<span class="hljs-string">'python'</span><br>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>resp = requests.get(url, params=values)<br><span class="hljs-meta">&gt;&gt;&gt; </span>resp.url<br><span class="hljs-string">'https://www.baidu.com/s?wd=python'</span><br></code></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="get属性-2"><p>可选参数。</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">写法</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center">headers</td><td style="text-align:center">headers = {‘User-Agent’:xxx, ‘Cookie’:xxx, ‘Referer’:xxx}</td><td>其实这里是伪装成浏览器 <a href="https://so.csdn.net/so/search?q=header&amp;spm=1001.2101.3001.7020">header</a>是浏览器向服务器发送的一个头信息，上面的代码就是发送了浏览器自己的型号。</td></tr><tr><td style="text-align:center">auth</td><td style="text-align:center">auth = (‘username’, ‘password’)</td><td>Web客户端验证参数，用于网站的用户名和密码验证。</td></tr><tr><td style="text-align:center">verify</td><td style="text-align:center">verify = False/True</td><td>证书认证参数，python去访问一个<strong>没有经过CA证书认证</strong>的<strong>因特网服务类型是https</strong>的网站, 那么就会抛出一个SSLError 异常，进而我们就无法正常访问这个网站。此时！我们就可以通过设置<strong>verify</strong>参数为<strong>False</strong>，忽略证书认证，访问网站。</td></tr><tr><td style="text-align:center">proxies</td><td style="text-align:center">proxies = {‘协议’:’协议://IP:端口号’}</td><td>代理IP参数，爬虫时被封IP可以使用代理IP继续爬取。</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="get属性-3"><p><img src="https://s2.loli.net/2022/07/09/ZHONj4FbeU1txPD.png" alt="img"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="get属性-4"><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.9 Kevin</span><br><span class="hljs-string">爬取一个百度搜索的内容</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">import</span> requests<br>s = <span class="hljs-built_in">input</span>(<span class="hljs-string">"请输入需要查询的内容"</span>)<br><span class="hljs-comment">#headers内容可以从控制台的Network查看</span><br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'</span><br>}<br><span class="hljs-comment">#kv的具体键值对可以通过具体网页观察url</span><br>kv = {<span class="hljs-string">'wd'</span> : s}<br>url = <span class="hljs-string">'https://www.baidu.com/s'</span><br>r = requests.get(url, params=kv, headers=headers)<br>r.encoding = r.apparent_encoding <span class="hljs-comment">#r.encoding = 'utf-8'</span><br><span class="hljs-built_in">print</span>(r.url)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="get属性-5"><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.13 Kevin</span><br><span class="hljs-string">处理Cookie模拟用户登录</span><br><span class="hljs-string"></span><br><span class="hljs-string">1.登录 -&gt; 得到Cookie</span><br><span class="hljs-string">2.带着Cookie 去请求书架的url -&gt; 书架上的内容</span><br><span class="hljs-string"></span><br><span class="hljs-string">必须把以上操作连起来</span><br><span class="hljs-string">可以使用session进行请求 -&gt; session可以认为是一连串的请求，在这个过程中Cookie不会消失</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">import</span> requests<br><br>session = requests.session()<br><br><span class="hljs-comment"># 1.登录</span><br>url = <span class="hljs-string">'https://passport.17k.com/ck/user/login'</span><br><br>resp = session.post(url, data={<span class="hljs-string">'loginName'</span>: <span class="hljs-string">'13433947627'</span>, <span class="hljs-string">'password'</span>: <span class="hljs-string">'EasonChan0830'</span>})<br><span class="hljs-comment"># print(resp.cookies) # 看cookie</span><br><br><span class="hljs-comment"># 2.数据处理</span><br><span class="hljs-comment"># 刚刚的会话session中是有cookie的</span><br>resp2 = session.get(<span class="hljs-string">'https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919'</span>)<br><span class="hljs-built_in">print</span>(resp2.json())<br><br><span class="hljs-comment"># 以上可以用下面内容代替</span><br>headers = {<br><span class="hljs-string">'Cookie'</span>: <span class="hljs-string">'XXX'</span><span class="hljs-comment"># 从控制台Header里面复制</span><br>}<br><br>resp = requests.get(<span class="hljs-string">'https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919'</span>, headers= headers)<br><span class="hljs-built_in">print</span>(resp.json())<br></code></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主要方法-2"><p></p><p>向网页提交post申请的方法，对应http的post。</p><p></p><p></p><p><font size="5px">requests.post(url, data={key: value}, **kwargs)</font><br></p><p></p><div class="tabs" id="post属性"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#post属性-1">data</button></li><li class="tab"><button type="button" data-href="#post属性-2">可选参数</button></li><li class="tab"><button type="button" data-href="#post属性-3">属性参数</button></li><li class="tab"><button type="button" data-href="#post属性-4">一个样例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="post属性-1"><p><span class="nota" data-nota="可以在空值台>network>payload>From Data查看">字典，元组列表，字节或要发送到指定URL的文件对象。</span></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">'https://fanyi.baidu.com'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>values = {<br><span class="hljs-string">'wd'</span>:<span class="hljs-string">'python'</span><br>}<br><span class="hljs-meta">&gt;&gt;&gt; </span>resp = requests.post(url, data=values)<br></code></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="post属性-2"><p>与get类似。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="post属性-3"><p>与get类似。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="post属性-4"><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.9 Kevin</span><br><span class="hljs-string">爬取一个百度翻译的内容</span><br><span class="hljs-string">"""</span><br><br><span class="hljs-keyword">import</span> requests<br><br>s = <span class="hljs-built_in">input</span>(<span class="hljs-string">'请输入你需要翻译的内容\n'</span>)<br>params = {<span class="hljs-string">'kw'</span>: s}<br>headers = {<span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'</span>}<br>url = <span class="hljs-string">'https://fanyi.baidu.com/sug'</span><br><br>resp = requests.post(url, data=params)<br><span class="hljs-built_in">print</span>(resp.json())<br></code></pre></td></tr></tbody></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="另一个实例爬取豆瓣电影排行榜"><a href="#另一个实例-爬取豆瓣电影排行榜" class="headerlink" title="另一个实例(爬取豆瓣电影排行榜):"></a>另一个实例(爬取豆瓣电影排行榜):</h2><p>1.进入douban.com打开控制台观察浏览器控制台的network。</p><p>2.进入Fetch/XDR观察（简化资源视图），从中找到所需的json库的url等属性，观察request method（get/post)</p><p>3.复制url，url”?”后方的可以通过payload得到，post为getdata，get为parameters，通过字典赋值可以简化url。</p><p>4.通过requests.get()/requests.post()得到resp,用resp.text测试是否爬取正常,一般反爬需要加入Headers属性，中间的User-Agent仿造浏览器访问界面。</p><p>实现代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">"""</span><br><span class="hljs-string">7.11 Kevin</span><br><span class="hljs-string">豆瓣电影排行榜爬虫</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">'https://movie.douban.com/j/chart/top_list'</span><br>params = {<br>    <span class="hljs-comment">#其中start和limit属性可切换，start为排行榜的开始位数-1，limit为一次性爬取的电影数量</span><br>    <span class="hljs-string">'type'</span>: <span class="hljs-string">'24'</span>,<br>    <span class="hljs-string">'interval_id'</span>: <span class="hljs-string">'100:90'</span>,<br>    <span class="hljs-string">'action'</span>: <span class="hljs-string">""</span>,<br>    <span class="hljs-string">'start'</span>: <span class="hljs-string">'0'</span>,<br>    <span class="hljs-string">'limit'</span>: <span class="hljs-string">'60'</span><br>}<br>headers = {<br>    <span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'</span><br>}<br>resp = requests.get(url, params=params, headers=headers)<br><span class="hljs-built_in">print</span>(resp.json())<br>resp.close() <span class="hljs-comment">#关闭请求</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">网页爬虫初学——Python Requests库</summary>
    
    
    
    
    <category term="🐍Python" scheme="http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"/>
    
    <category term="🕷️爬虫" scheme="http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬虫</title>
    <link href="http://dayswithvenki.top/posts/python-crawler.html"/>
    <id>http://dayswithvenki.top/posts/python-crawler.html</id>
    <published>2022-07-06T16:00:00.000Z</published>
    <updated>2022-07-09T04:14:42.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些关键信息"><a href="#一些关键信息" class="headerlink" title="一些关键信息"></a>一些关键信息</h2><h3 id="请求头的关键信息"><a href="#请求头的关键信息" class="headerlink" title="请求头的关键信息"></a>请求头的关键信息</h3><p>1.User-Agent：请求载体的身份识别。（用什么发的请求）</p><p>2.Referer：防盗链。（请求的页面来源）</p><p>3.Cookie：本地字符串数据信息。（用户登录信息，反爬的token）</p><h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><p>1.get</p><p>2.post</p><h3 id="响应头的关键信息"><a href="#响应头的关键信息" class="headerlink" title="响应头的关键信息"></a>响应头的关键信息</h3><p>1.Cookie：本地字符串数据信息。（用户登录信息，反爬的token）</p><p>2.一些奇怪的字符串（一般是token字样，防止攻击和反爬）</p><h2 id="得到页面源代码可用库"><a href="#得到页面源代码可用库" class="headerlink" title="得到页面源代码可用库:"></a>得到页面源代码可用库:</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">#from urllib.request import urlopen </span><br></code></pre></td></tr></tbody></table></figure><h3 id="urlopen用法"><a href="#urlopen用法" class="headerlink" title="urlopen用法"></a>urlopen用法</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">'https://www.baidu.com'</span><br>resp = urlopen(url)<br><span class="hljs-built_in">print</span>(resp.read().decode(<span class="hljs-string">'utf-8'</span>))<span class="hljs-comment">#用utf-8解码得到页面源代码</span><br></code></pre></td></tr></tbody></table></figure><h3 id="request库用法"><a href="#request库用法" class="headerlink" title="request库用法"></a>request库用法</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">'https://www.baidu.com/s'</span><br><span class="hljs-comment">#请求头关键信息,可通过f12查看</span><br>headers = {<br><span class="hljs-string">'User-Agent'</span>:<span class="hljs-string">''</span><br><span class="hljs-string">'Cookie'</span>:<span class="hljs-string">''</span><br><span class="hljs-string">'Referer'</span>:<span class="hljs-string">''</span><br>}<br>params = {<br>    <span class="hljs-string">'wd'</span> : <span class="hljs-string">'python'</span><br>}<br><span class="hljs-comment">#连接在url后方的:如www.baidu.com/s?</span><br>resp = requests.get(url, params=params, headers=headers)<br>resp.encoding = <span class="hljs-string">'utf-8'</span><span class="hljs-comment">#将resp的编码改为utf-8</span><br><span class="hljs-built_in">print</span>(resp.text) <span class="hljs-comment">#得到页面源代码</span><br><span class="hljs-built_in">print</span>(resp.url) <span class="hljs-comment">#得到页面的url连接，当前为https://www.baidu.com/s?wd=python</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">网页爬虫初学——关于如何通过Python爬取网页源代码</summary>
    
    
    
    
    <category term="🐍Python" scheme="http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"/>
    
    <category term="🕷️爬虫" scheme="http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Weeks3</title>
    <link href="http://dayswithvenki.top/posts/weeks3.html"/>
    <id>http://dayswithvenki.top/posts/weeks3.html</id>
    <published>2022-04-30T09:18:02.000Z</published>
    <updated>2022-04-30T11:58:25.958Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7bb0f4fad50e9cacdf93170eea801d037b9fb1cf11a07f7859d5d8e5fd56deea">63a42796bbf34b019cf859df3c20cdcb55ca5f0aff747c059f86d25005abd62051fdd2e5792499db43577960fdcada77b86717dab7968954475e3fbd70aeaa8b9f67a29c124e1a58c57eaf0500bb9d277e031e6f415865373a848fe2727012468996e92e321b6774db2a7501075dc7c08173a4cfd058e9c1a00804674761ec4f3e62ea344e369c5a97453b9d52735397eaa05c2993ec4701d50c82751658bc04547426bc8a94fabcfd184ca988beb671528ef604b55f96a999b4ddbcb5a824561a89f7ef0f791d12451c06f5d6b80646059a02a206842321c1338b5c1d78d8487121019e5daf955b2fd5f54c8c87f235830a1dc19a80ed5a6556af99018525f3a07814473234e66c3b94a847aa8f282453f3fe0d3fad3303ab33124f7e178249e280c5663d8b7505b871798500256668b64ee326b980966e1959c3185f13898243a25973d70e23dddf7073e89afc917a7e8365b530dd33b85d61d811beb323886846264d399a5e008b3830a02e988144d1c8d40a8c0be76299b89724381708ff1d7f3743a9bf63294cddd17b2ee885bfef7258d975eee8e4432583002bc1d034e9d907ff18f04b4900d7b2c938767074e22085e20d953b9b4afc487473703ee857bddc36f4ff9af55da21a8b5f9eefe9a0e3dad4afc3a8997fa84bccf5a43366d15c7db289645a379e1ee47c5cfbaa9fcec9cf15518407126b498ebbccac7428542e76feb700e85100b3e68290b997b0e6f6d6148651f994f94837ad1f1c887305238c11cba4752690ce9a23aca08cfabfb579ec277918e0d801c2f0eb3121050e4140504e71583c0a122e651e730014c40714ec0cc4b634dec6bcbbb0badfd054cf6061224c4ca27046eb3aa692fde99ef84d066bc57c976e3ea5e0b3c6a23e0fa666066122963b55753ab028740a127b34ed4063c5ec4e3bc3c1d3286c635f9c00c3f8729311b641997cd5b6190bb67208ed4c673fc5c095cab561eebd069753d5ef027ab183e1cf94399f8ee605f6249d6539bb30fe7b09ece45ce0f34d8e77fce84c6c3ac04a58c518a9dcc8eba97d8005337c233846bf427db1f93cc86ebb730b5a0b7860058c3e94125f954300c7607fbaaa580fc28eb4a7dda1ba30a247b0fbed84d89139ce8f61b07306d6ba9e40a92b66b378a7d30af35aeed1ec77289f4d29465cab5e8c6bf246c3606b9882096b7f3ff1479610f73517acb3123694361d4408b0b983a01542bd47182062a9a50a9d91a4f84e6fac3af95a698b2042401671b4d9d620ec4985ea6e4a4fa7a1dfc8cda20dffacb80053da869a273f8ecd87b0092f5fc6183cf334fdd6d5b833ec0975c39fd136f9cd2b10dcb89509a557ba59e6eacacf30e4bdacfdd1df2e12f73349f3a48a02e66b948a6a68bfb981c10f8ed70f49641c490bfe0596cb2abe8225a69e427f06d6888327c5dac13d5a3970ae9eb7a6d3a84bc96ce7b2e2cc54de3c09eee455ed06a2962465004718762e686ac254c573e68a5164a819359d03c58f4169180fd94310facf75c00ed35a24ee770b40b23c09e51b2f6bf86d05ef715c27682eb43f7117fe92713bdb701af7a30b9b30b0e838dfff25512a396f40ff20705ee84deefffa25958c596508ba3a1c0d8100ca8d360fd6b793323e2bb7a158bc11f9830fcf355ec4e89f9d0f5142311d0c1adc07a7defcce36992946069726a4105e0b084b704a54d79673ab61ad7949ec5e213e21e9422ae41fe27ca7f772bd7bb1101b9dde6af584be1965dd9d3815d712b9ee77231aa14eae67cdb77fde67e11ddc06145c5199d47f85408d39d938e60683e3555f1ab6bc7a9a8670bb8b4090ac4616b90611514a785443ae1f8960d766f8e217b83291984650a74bbc13ec7d7ec0ac591f12319ccdb2fb8a751523e67733545e440777a1b9512790c503101758ad9da768a20f9c55dda69e6afea95f3e84b9c46efb31aa6386ce8b6053f68769ebac75a6726da048fae69c3c05e667e75fa20b34b37428682efc92eb1c287f2fae7e75c1ce5b386e7cbfc5de8ea50da86382c4a13477e8c4337ac1411e4ec7c83aa5a9cd40568a33f467227f31b74772acafb5b367376573d92b59a2c3e9932ef175c657af0785e20692636981549a901c98f4be386ec79465af38c96314322612dceacc8c87291475f8f3ba1380451f770f0ff4c7defbe054429e6b8adbc615cfc79c6f8fc9bfd60818a330729b88baff2bc706747112373d115b197771efce942ff63ee0885f3ab3e3702558d4a825c54d406f0d2da02d6dde9fcf7acca161f814a9483aacc28c08be00cfe538a07a4cf1e30301c5f3cf4bac77864c3cdae9583de5bdb6ca4f2c781a83915e98822691fc7899e5826446d0f2cceb05424f586703f183fbf74fefd3615a68b1ac16bd82936b79beafe343e7e53b464f95d8a464a023319ede0b1b6365dde2bce854064260a1bf6ec04d87f674c22c684d0ad0cca05422d5b974d85700298f50c6fb45f79631323397530808b52589d86614f0c178423d2711f914cd4e1e1bff33c26ab0e213d532d1028eac4d179c71d34330598ecf078668e2bfd26a79ed5ff90aff840d1b22e14204073b2d0268c5a159c55232786cc31b68c1c0fd8020e169ad2c6600aae10e9660c14e4eb1c2c0fc31189f8d19f5b2f1186e34cdf4455dd69b414bf746e3e35ef4b878c187990b734a1dd367b5110cb993886f61ed26a7e9d183d79a56e6ca6ac215037c2c591df103e73403cd0c71c66a3ec8d91c95a2232fb841529ee1650030e14ad5bcdf0923b7530599cd1d7a8ac5029cf4c68d7af9b11c44c67f071a2814500eb9034aee2bb7fc44fadbd127bdbc64af9dd7cef4a0edbaf9c93d3e4fcfcfcf305f45e076dca7a890c043913b584371c8a0b9e1344f4826bbdac82b5023e9d55c5c2b072effc2b441df195d1dfd88e12894d7c9a381490b3af294b5a5d78ed0f9e8f408beb748edb1c025ee578fcde7ba14f9dc1da1c7028d033c755779c629e0c45852c0e4943784616330ba54d1610ddc9f0815c5453058632473aab5764b42e8c31f309862f596ff812763854d773d2189c7a0bc5438c0294929cfae9a9c282dc0b21bf4c11b350667e4b705ad1eb628a0b0527fc83d689283be87f592cda607dbbd9c874ebc174dd44287278b61430317fc2de09257817b611c6b15c7696364008c1c74c2735066117397d445733a4de6b9b850f2a22af4d3f0dadc4a8458b7c87f27f2231567801cb07acaa506320dcbf6ce5bf0f720b9aea607a9e6346d53feaa71c933e0dddb2954f2cee0c3dd07aa3cb89a4452465ff47c78cf09f6ae178748ecdba3c5f0e99e04777dfcbb2719ff797d507f62a113d099c1e9c7decbc90f0e76feec958db7d9f83bb9f18422037c03fb2c3c9128944a1302308b86c7df6a4247296421198b9661b3a50c85998845a29d68f27ccd9cd295ef9a8ff5fe7d0e29c03d383276f11441412deba4d55f17bbcf397c08958ffdf462305453b2f38b0b0187cafa0d9c8c107d44c2b38c0ddc89d74e1d9dfd6484e41498258679eb6af21d79c27cc35acbc842f4bd2fe8cf53cf5c6e81fd8d83ad084b4f3f84981b363bc1f6ff54742bbd1f0ff80cee7b4a5d648870f8c9a2238273ced7047f2c25f0bddf1adfc3c815b060bbf85a58f6e1e463238b7377d5641e78658f448f4f31937cbb2a7170e25f52144499037ecf565a3f759c16f4b25430ea8d28e605a66b01fc29b5e0e8e601a89c600eb3ff96a623bc86a404272ce348d836592125a79b6cff32a39658549efa0393bfd2d975693954a4f2ebe8428b4d5eee4e82b5b50886635abcb93f70292bb8216a30798be659207121551916e12b712af5b924c194793ad890971279840e3aae543bf42c985e2f47df664bf6254ee246bf067a0a2890fc309d4329aa06281b4ea7f10c72a3bbc6eebaae441deeee85fdc2f8e29f25669fb5636bf4d5e2a75144aece77c0234eda233ca11509589a48019d70b36dd896f4a1424a7fcd92dac27dc67c975c64a6772a7def7e75b5cfe8e72bc94af717dc40ad905a04a34734896e9fb8159fb336846f8183cb7e5b77e4c0597bd145f4c0d76ff319878bdc4bf951f573581947128fe9047f11c082388509a3319fe31510610c38f6285870a55681a76e4d0cdcc2edeae93db5ec188a6340bc1211c7e0ba8fec357dafa493b741cc1965eb628f29528325665d680f7528bb1458292e8b21beaf5e1bb37a24dc081f94775ff8ff2c40dbeb157075684d4a8fe2448f2e5e57517b384caeb3bc71bef893dcc8a76fc0340de38fd81d8a2141c104b5c30bfb1f7d8552f9e086e11486e6ebea42803eb13cce27b9ea7563bd2853085208a7362ca59e0109b634fee893b53fad5eaf321149f79001841a16740ea199f8e95986b11e74df0835970f552660df278c33bad7155be4a6d9e0e22a564261394a69bd4c7d64c6ae8f92efa75d52110ec826b67dec61d70f6d95de68231d930e6228f4a7630cafa4ddec929971970d9bdafe267632e2f0d12c6a7aaa59e02b28f15680a57ee0d8d3de9bbb26371eed27c20ceecb48cc77509e318e12e36e000521666ef398c9e3cf229bb6e1748179f7ee85cac4a50c29efe42fe050fe762d9e51dcaa043fb984b60c87b3ecb4fd4409da9334d07d14d5996c0746349def5ed0bfa91a06823e4dfd86a4d207ef093785f3190ce39635038f5c64b9669a5e681ca44899aba5a204acb2627c2fe1bea39c507eac5c4b4875b072357bb307f8f5a1aa497cb36a18629b694ab6d2f7532dc16b6f6a6f95b90cda4a0ae33d0b20ca682d17888a8e1a86bdf227dcc33fcd050056a76be377b8856e126dc66241c3e694bae7c69b211d2c245fdac9634b8a2159853209005677b2fdf6cba58baf8fd6d464ea915cdf97c3500ac659d09151a2049519aabf29ca6fea9ffcb98b24be6c153f6e5c8e202a18ef611669dfc4d11edf74aa9c52cee3db2fd486c094ee7138daa3647d0f2b9913d3367e889b50dbb0b0f1965db72b5a0cb05d7a4460f4c004f5e6799eca06120f6724218336e1b25181f4b69695e9c52adb872fcee07e66a677b60e23d8ee9755a192514884692c1a967318599996144c83544d37bf98dbd249a4b5136d877ddea140d6819d7b06722ad97eb7eed2f3f2f759b50ccd45b77946dad1639d58105454a4806802403efb6991d635da1019338ce6c73e7493dc22dbc88da10849f1d2ef52e93ac089800418abb5c4067c59d3631dbc42b19ccd0c55fc088c2d8057b105dfa8f8e78e3d31015cda6418406ca11a2c93ba8a68856867b2103a550eb9f096fa23d28d37c8dfeef7cfae3f62bef7e107e171ea603bc1ca5b9b4b5ebb1a056c902c2ffce010970f65de891ee46ea5fbe3ad80fd0c06c1b3aaa9b9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="Days" scheme="http://dayswithvenki.top/categories/Days/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络1</title>
    <link href="http://dayswithvenki.top/posts/net1.html"/>
    <id>http://dayswithvenki.top/posts/net1.html</id>
    <published>2022-04-25T08:50:23.606Z</published>
    <updated>2022-07-02T06:42:34.573Z</updated>
    
    <content type="html"><![CDATA[<h2 align="center" id="公式">    公式:</h2><script type="math/tex; mode=display">奈氏准则: 码元传输的最高速率 = 2W (码元/s)</script><script type="math/tex; mode=display">信噪比(dB) = 10\log_{10}{S/N} (dB)</script><script type="math/tex; mode=display">香农公式: C = W\log_2{(1+S/N)} (bit/s)</script><div class="note info simple"><div align="center">    W为信道宽度,S为信道内所传信号的平均功率,N为信道内部高斯噪声功率.<br></div></div><h3 id="意义">意义:</h3><div align="center">    奈氏准则:激励不断探索先进的编码技术,是每一个码元携带更多比特的信息.<br>    香农公式:告诫不可能突破信息传输速率的绝对极限.</div><hr><h2 align="center" id="cdma工作原理">CDMA工作原理:</h2><p>&nbsp;&nbsp;1.将每一个比特时间划分为m个短的间隔,称为码片.</p><p>&nbsp;&nbsp;2.为每个站指派一个唯一的m bit码片序列.</p><p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(1)发送比特1: 发送自己的m位码片序列.</p><p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)发送比特0: 发送该码片序列的二进制反码.</p><div class="note info simple"><p>eg: S的8 bit 码片序列为 00011011.</p><p>1 -&gt; 00011011</p><p>0 -&gt; 11100100</p><p>码片序列: (-1 -1 -1 +1 +1 -1 +1 +1)</p></div><p>每个站分配的码片序列：各不相同，且必须互相正交。<br></p><p><font color="red">正交：</font>向量 S和T的规格化内积 等于0 。</p><p><img src="https://s2.loli.net/2022/04/30/bkguQ1HjBPqREZA.png"></p><p>任何一个码片向量和该码片向量自己的规格化内积都是1 。</p><p>一个码片向量和该码片反码的向量的规格化内积值是-1。</p>]]></content>
    
    
    <summary type="html">计算机网络 第二章笔记</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>像素插画2</title>
    <link href="http://dayswithvenki.top/posts/genshin.html"/>
    <id>http://dayswithvenki.top/posts/genshin.html</id>
    <published>2022-04-17T11:16:29.252Z</published>
    <updated>2022-07-13T07:05:59.472Z</updated>
    
    <content type="html"><![CDATA[<h1 align="center" id="像素插画2">    <font color="#A9BFE3">像素插画2</font></h1>  <p><img src="https://s2.loli.net/2022/04/17/jmTBSL2lNfXnGAs.png" alt="image.png"></p><h2 id="胡桃">    胡桃:</h2><p><img src="https://s2.loli.net/2022/04/17/OlMTq5i9xoN4W6B.png" alt="pixil-frame-0 _62_.png"></p><h2 id="甘雨">    甘雨:</h2><p><img src="https://s2.loli.net/2022/04/17/fLUZzdxYl95bFvW.png" alt="pixil-frame-0 _69_.png"></p><h2 id="魈">    魈:</h2><p><img src="https://s2.loli.net/2022/04/17/5TuRrHKWC7xISBv.png" alt="pixil-frame-0 _75_.png"></p><h2 id="宵宫">    宵宫:</h2><p><img src="https://s2.loli.net/2022/04/17/MbgN8zFRr6pe2Bk.png" alt="pixil-frame-0 _71_.png"></p><h2 id="神里">    神里:</h2><p><img src="https://s2.loli.net/2022/04/17/7STxAz6sHEvi3DR.png" alt="pixil-frame-0 _76_.png"></p><h2 id="万叶">    万叶:</h2><p><img src="https://s2.loli.net/2022/04/17/yrD3hMNd8ZzQjC6.png" alt="pixil-frame-0 _73_.png"></p>]]></content>
    
    
    <summary type="html">Genshin Impact</summary>
    
    
    
    <category term="插画" scheme="http://dayswithvenki.top/categories/%E6%8F%92%E7%94%BB/"/>
    
    
    <category term="🎨像素画" scheme="http://dayswithvenki.top/tags/%F0%9F%8E%A8%E5%83%8F%E7%B4%A0%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>阅读方法</title>
    <link href="http://dayswithvenki.top/posts/english1.html"/>
    <id>http://dayswithvenki.top/posts/english1.html</id>
    <published>2022-04-11T14:39:18.179Z</published>
    <updated>2022-07-13T06:23:58.921Z</updated>
    
    <content type="html"><![CDATA[<h2 align="center" id="01阅读方法">01.阅读方法</h2><h3 id="一-先题后文再看题干不看选项">一、先题后文，再看题干，不看选项</h3><p>why?(先题后文)<br></p><p>1.解题 2.串联题干 -&gt; 预判主旨~（题干中反复提到）~3.通读全文</p><p><img src="https://s2.loli.net/2022/04/11/OngewX2bKB7WvmF.png" alt="image.png" style="zoom:50%;"></p><h3 id="二">二、</h3><p>做阅读理解除了翻译外，需要关注:</p><p>1.感情色彩强烈的词: adj,adv,n(系动词之后)</p><div class="note danger simple"><p>[认识单词!!]</p></div><hr><h4 id="真题">[真题]</h4><p>1.</p><p><img src="https://s2.loli.net/2022/04/11/fzgyF8VxlZCUtk9.png" alt="image.png" style="zoom:50%;"></p><div class="note danger simple"><p>最经常出现的词有Job，但是容易忽略agent。（不能顾此失彼）</p></div><p>job&lt;-&gt;agent关系:</p><p>&nbsp;&nbsp; 第4题: agent offer each job hunter… options.</p><hr><p>2.</p><p><img src="https://s2.loli.net/2022/04/11/DeIcGQpWaUsFZNV.png" alt="image.png" style="zoom:50%;"></p><div class="note warning simple"><p>虽然一般不看选项，但是若选项中有共有的信息,则不为干扰信息为正确信息。</p></div><p><img src="https://s2.loli.net/2022/04/11/yO4BRmL3IPDjsEw.png" alt="image.png" style="zoom:50%;"></p><p>如本题: Women/Stress，有助于帮助判断（提示）中心思想。</p><div class="note success simple"><p>1.串联题干 2.通读全文 3.the best title</p><p>(读一段做一题∵题文同序)</p></div><hr><p>不熟或者不认识的词汇:</p><div class="checkbox green"><input type="checkbox">            <p>predominance 统治地位</p>            </div><div class="checkbox green"><input type="checkbox">            <p>manifest 显示</p>            </div><div class="checkbox green"><input type="checkbox">            <p>revival 进步、振兴</p>            </div>]]></content>
    
    
    <summary type="html">考研英语笔记</summary>
    
    
    
    
    <category term="📖考研英语" scheme="http://dayswithvenki.top/tags/%F0%9F%93%96%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Weeks2</title>
    <link href="http://dayswithvenki.top/posts/weeks2.html"/>
    <id>http://dayswithvenki.top/posts/weeks2.html</id>
    <published>2022-04-03T10:45:02.000Z</published>
    <updated>2022-05-19T02:14:00.951Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0b18fcefde2ad43e037b36efd472e312abc2ec223505f8b85b6701125e71b21e">63a42796bbf34b019cf859df3c20cdcb55ca5f0aff747c059f86d25005abd62051fdd2e5792499db43577960fdcada77b86717dab7968954475e3fbd70aeaa8b38cecdc214b9de0d7ccd1c4a2e1788472e400e1e9331f6e5f3ab8fbf9ccf413a917d277b93221c3ac289bcf6c1067a0ea3cb5e2eab081123fc1a32c9cc488e4abef2bd0e5fe6c4fbe8c6f5db4eb6b5b3c73db25bc601c88e15ddc22eb6cf1d1d776e1e327c2dcaf3e716a2d28f8e35c214989e6ea3ad545bad6924f0befab9c9b017808666a33e5a451af2bca7c353bd9aad77a17a468b55277e023fde0f0a84d4f2e80a894274e91a789f6324d26598e2441d2a6ab11c1cfecb114ccc8bc5b54cd3a7fa7d7491d75870e497b148e506d241968886456fe7d90d71074adb5d002cd36f5844186a085e63bb2f1b64c2ade3095f889a309a285c705012fd177f0ad1fe034ebc17cc8b92823e81b43feb08fe71d2f5c963a350f2469375136218b0b12f10657387615536c42c9af6d8acb8a826bbc842157008f7e635ff3ccb9dc77c71e8f42eb9dbd449db2901427f4e971908b2f54cd27e5a6e89f971b46fe8dea37b76b0c276cc04831d3a749a29ebf65fd7630c4a26709669e03285030dcd5bdf985ab5ba0c19e9147670c176c963fb6e50aaf8ce5de31ad9c58ca1226a0b71365d086bb5b9c49bce203156f6d6b2d9c8f2f8c8a8c137861c10e3d172b90b50ef627670cd6bff055b07a2d726c99f2e032ae376e221611ddb7097d71a1aad1d2e67eff3b45b9a230a616c54927f2fbb880c38a62715866d8e325aa4ad84fd0c55cd2ab707149c1138a8226c7fa06abe09bf830ae906769cdbfaa113ecbb0109f3a724c6cfcb99612e8d3e280f8cab243023b52b6cb0208b06eca2722e3b06fb57e2d44a3910737862d06893438803cab98afa1e5a2935fec8a0296be4ab8f4a6ce72bb4ab6d979b7d55f88cb213f74a4072d57caa2fb8e671b3e33c29ef6b1ee5b4434f0b88053b4788646854a1f37becba285c2db1eb489ee5bb735a4dc4199dc5eb8fafa767d5332c3deadf20caf44718cc56d442af3e7a3b97e556b8401d0aa4742d985899779d28bed82c4f425984df7f979c7156971755a29af88788cd979c50817c126680588d1247a58db93434e18d72b7f32cc5b957057a1f25db58d3c5e9a85968b3a7587090d24ec08059bf412f96e257d74ed799e8ebd5bf6585fc0329a6a1ab69f87dfa37b03019ebfc3fac28ad475de3337d8393a989dc6cda6896bbb267342a86605787be3db85a8301bae12d33252d83ed4a6d2b037b017273abd904fda1b5fcdc9f799a191230b64e2376e670f62377761be44d845959f2d94649c98c7c330ec5161a69f97ff17db4fdcfd7fc20d0559aca4decb7ca749d1d556319cd2e43b33779f6fa04ca032a10584e4ecad901f3fe05e54b3a7364a7bdb454a45d790da1f93084cb34ac79d673e65ef7a54430d756ecb1e58d71c0b0601b536cb60f56768b4bc95910c2e28ca7b449e5c90f6dc245a0a6e31a627d4ad6aa74193a4a1533570554a162006623adce0d652272056093a7bfeaf125e13fcf2e6782bd4a544a0787eb6f727ad1129189ca2e5b86a2f26e86ba1716c6d004283a8a061f1c40fb00eb7fcad1b5ba2a88cbb8f3968bb1acbddeb727fdf877828f540dbc510ff80c349a39ee6c95db0f892790d74aa516995437b888be24015a8858b9c14391953f1f667b18513db0c1193caba2bf9358f7cea4ecebbb3849049e912aa849b9f5300a6a3c8d8243b3c59552f69f8ae80c00f648968be45e1927c5fd28ab6f7f9debb83b9ea0ca88380285cd0fe8e7afa366b7cddf9a9d7b96181c825b5e16b3bc05ce9d048ab5afaa34accb55de7d3e8a8aa2989b8fb3e93c3cfe56534951b9e03a8b2004f9440769f439700722e5d7677a0fe58b4dac58a392b9030f0d5a1ce3dcae6be74928bfcf887376953d3cf6cb4237353db1e3133532114fdc97afe2f7b2506efe44373b38a687aeeb7bdcaf7651c0236e6d060a8f77cfc895c401242ab11bff305b51dad433cfdae89d3bf93802f8ff4db90ced85837f17836639b37092bd97e369bbeb50fae7956dadf3b824ffecd54fadc8baf347f3eeffc555750f06bbc4f9a56d047f944c33f33eeec7d313a3e73e036d1bacbef06413759e14c5f7f455dde11d88a7b7f1824f0fb696dd343eef9066c2f62f55884e6e019cab776a931a3e0d42c98e35c208024c0daf51d4e33279d352a9aa8a5239726765cfe00689157d793d8dd314548506ef9cbc748b226ca6eb08e0ffb0487f08b981722cc856a23078cb3093db371579559d3f1fc3bfab2fa99b6810b1f211b09cf3365d04aabe7bdd9536f602a54d1df32aae6051f06a121a7b2703c56acc741b797e8581e7eb0d2bf59585012411a5ef19d706df32e4f2a72b3b5cfaf2c7277fa5f54ec98ce980d6629885541fefc007f5bb12a3be2b284a1fc335ddc7062d6dd937c4f5725f8f699eb085cfb9c8ccef9295a33ae757886997cf5242d36f0f4d843faaaaf87138334c1e4b6301df735d4f448f717b58fd220b9869f83f1431c0b7b3ad34c728b31c1a70a9cbad14544792d0f0dc82a8bc7d3542f1753f86a6c8453ce857acaa740647d82d04651c9ce0f57bb3dc7c67d416c3513203b44e66e1a706d66669a97135fa96feb6e2ae47a5327fcc6c36ed464f1456c95d6891118723e977361ef6ac5a94956677faac53d8c7b36f911077d4a58202d723b3901d002844aefabdc005888329095dab5f6e9cf77ffb6ca9dc0d7e4264b1292d3502eab7236c1d6c96c6d916898eb749da143faedd422ef1fd6307477a60eeb110f5cf05b7aba52b731eb5737460c9be3ae45c1d13211a8e4fd986edebcc18f24a6e35566d6e4d55e8881ff4888b9b7d4cc4273e9789b9e3bef3ccbc7e634aedb0dfc1db9d31f470609adc46b06a12026c949a482e4e7d4f9e2e8f50d9d87cd1488dd898638d9ad2b57e227dd31be58f70f393ea0dbde5b06beb15fcfe325902380dbffe714346257d830dd4869206bb174356ee2ebe3e199e4d97c57b8377e1d6c62f8282e5bd5455dca54380b32eeec8bcdb67b67942a44f8038a7993daa917dbbe7643de1c3667fbaf43e6621ae4c8eb7cc87e978669db5fc39b1a5ac199c6b0290b3178924e11554cc90714f22cce57f659eacc6a11337dce447c721d1c9301b86be7d50aee47411f7f022873c9299490457a1ba13f92cea1ea8ee73efd538be144ab230df912dbc9c437171e2a290dfcb56257de31d24f94da45ae85c0c482e7cd7b573a42f865b7e78f7634dc54423d8176f433df2ac1a65cfb10a0a5e30ec1f70704923ba0b88f759678b22722171dfbfa3c8d6ddce4ea624f1607a3fbef81797c44883deeaa7bdd407404fb1d4026ad4ac6c024d3e79ae097fe6d1f82dcb3f0470e48192209f7f90ccd39d9a10618b3759b6e3f92673be8e4e9738880481171961e3ad6f38e1a68b8e315605437f423c66c762ddb5b7d43ecd56dcd4b7bef9a71ddc09992904ae58f33cd9b7a0efb1b127d462c31c0b5ff142f70d9ade0e0ce2dd7572e13cdc1bf177ae04526de8f4fa5a2416744e2a4cc252b62e44286b34e048d398a432e85684e79797650c6ab67d77543394e0e791771833337bf962030a71f43d9690bef38552f0a7e03127aaf88b478c963d7cb7c55ce784fca8c0c5b6824f98b7351df76e2f0454978648c955878ccb18a40e0596002442a26da808137095310775c1634bc7edf8f44af80900019ff4e1d1abdcd5bcd65f6645796afd819b293753d41fc27589b15b1a21be9fe4fd2e6c24c25f08f740c1689cb75cd4834bc61a1c073abe2ee4bdd7c4634a8da8b56657b919c6e1306054efcf4ab38c597586878193a07176e2084b9cbb89708465a4023f6cc22caa4fe124a243be99d7558738e7516e75901bbfed85ee30939fd13ef1a1069302f289b4c7f1ffdb5d4c9b0ee7123e0578423f3c612c19f64f5b6a4ae8bafc0db1f626f44755dba87c929a25978948eb48903a72c31fccb7514dcfeac08705dfc7c7ac2cff3104c20d3c7b0d83fdbf9ae62758aa78b60371b85bbe730a2c98caf0ea23afae952af65622d2b5dbf4806fe73fd3a77cab3be7beadc48fe1126e9abcd4b7b01198b8a6143a5cbef37356ba5594680527183f386a30237d59629fec7ddd887ebcb1b964291419576067e0f0f09daf7bced06cea77a7025220190155229c7ec12575ee985e7e602d8aa0dad1e2ea57db7a2dfd818bfd72ca92b2e305e33465dcd0e89fdbca8f45dc0bd2ec50607db0808126895889e85f9f68e9239e692c01bf92e66a462cbd643be8f16b9219bf5528c0eb80cd90a9239b9744969d05a4623ba9bfe15f5fe5847784f3fc85762d4353cf3536740858e8d9a84f7d517caf4ca88521f8b2e71368191ebe187ed409091ebe9be8107d37bc51e05608f67075e69913844a4771495ff86c1762dce07a7c109b49a0d5aa6d94fa663197280a86a868cc468c1922afb7f7b621af1ab89c226e99fae3f7fe5ec96f60c264ef71b1b0f4d6c3ecc2b847a08b9a5f4edd1bd1b5b9fc2297ffb6f273c0bc5ccc1839aebfa8beba00fa10617ca0133aea466512d2a9bffc9d1718474c6733bc1c959dc4aabe56c367c51986eac1ca86a3653c857a24</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="Days" scheme="http://dayswithvenki.top/categories/Days/"/>
    
    
  </entry>
  
  <entry>
    <title>美化记录</title>
    <link href="http://dayswithvenki.top/posts/butterfly.html"/>
    <id>http://dayswithvenki.top/posts/butterfly.html</id>
    <published>2022-03-28T06:44:25.000Z</published>
    <updated>2022-07-09T03:46:37.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="美化记录"><a href="#美化记录" class="headerlink" title="美化记录"></a><div align="center">美化记录</div></h2><h3 id="toc无法跳转问题"><a href="#TOC无法跳转问题" class="headerlink" title="TOC无法跳转问题"></a>TOC无法跳转问题</h3><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: #ee9f63;">预览效果    </button><div class="hide-content"><p>无</p></div></div><p><a href="https://convivae.top/posts/hexo-bo-ke-cai-keng/#%E6%96%B9%E6%B3%95-2">参考文档</a></p></div><h3 id="侧边栏botui"><a href="#侧边栏BOTUI" class="headerlink" title="侧边栏BOTUI"></a>侧边栏BOTUI</h3><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: #ee9f63;">预览效果    </button><div class="hide-content"><p><img src="https://jsdelivr.pai233.top/gh/Wadehl/web-data/MyBlogdata/show/botui.png" alt="botui"></p></div></div><p><a href="https://akilar.top/posts/9dc1acf8/">参考文档</a></p></div><h3 id="文章置顶轮换栏"><a href="#文章置顶轮换栏" class="headerlink" title="文章置顶轮换栏"></a>文章置顶轮换栏</h3><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: #ee9f63;">预览效果    </button><div class="hide-content"><p><img src="https://jsdelivr.pai233.top/gh/Wadehl/web-data/MyBlogdata/show/swiper.png" alt="swiper"></p></div></div><p><a href="https://zfe.space/post/hexo-swiper.html">参考文档 </a></p></div><h3 id="侧边栏碎碎念页面碎碎念artitalk-pro"><a href="#侧边栏碎碎念-页面碎碎念Artitalk-Pro" class="headerlink" title="侧边栏碎碎念+页面碎碎念Artitalk Pro"></a>侧边栏碎碎念+页面碎碎念Artitalk Pro</h3><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: #ee9f63;">预览效果    </button><div class="hide-content"><p><img src="https://jsdelivr.pai233.top/gh/Wadehl/web-data/MyBlogdata/show/artitalk.png" alt="artitalk"></p></div></div><p> <a href="https://akilar.top/posts/f1004b1d/">参考文档</a></p></div><h3 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h3><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: #ee9f63;">预览效果    </button><div class="hide-content"><p>无</p></div></div><p><a href="https://akilar.top/posts/615e2dec/">参考文档</a> </p></div><h3 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h3><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: #ee9f63;">预览效果    </button><div class="hide-content"><p><img src="https://jsdelivr.pai233.top/gh/Wadehl/web-data/MyBlogdata/show/rightmenu.png" alt="rightmenu"></p></div></div><p><a href="https://dorakika.cn/p/20220303.html">参考文档</a> </p></div><h3 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h3><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: #ee9f63;">预览效果    </button><div class="hide-content"><p><img src="https://jsdelivr.pai233.top/gh/Wadehl/web-data/MyBlogdata/show/author.png" alt="author"></p></div></div><p><a href="https://akilar.top/posts/e5cda1b6/">参考文档</a> </p></div><h3 id="首页磁贴"><a href="#首页磁贴" class="headerlink" title="首页磁贴"></a>首页磁贴</h3><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: #ee9f63;">预览效果    </button><div class="hide-content"><p><img src="https://jsdelivr.pai233.top/gh/Wadehl/web-data/MyBlogdata/show/magnet.png" alt="magnet"></p></div></div><p><a href="https://akilar.top/posts/a9131002/">参考文档</a> </p></div><h3 id="custom-beautify"><a href="#Custom-Beautify" class="headerlink" title="Custom Beautify"></a>Custom Beautify</h3><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: #ee9f63;">内容记录    </button><div class="hide-content"><p>·阿里IconFont引入 </p><p>·侧边栏透明</p><p>·公告小人 </p><p>·页脚不同时间不同显示的柴柴 </p><p>·页脚皮卡丘 </p><p>·网站各种像素画</p><p>·文字/图标颜色自定义，字体像素风</p><p>·加载动画: Loading/日夜转换</p><p>·夜间模式背景流星</p></div></div></div>]]></content>
    
    
    <summary type="html">网页美化记录</summary>
    
    
    
    <category term="HEXO" scheme="http://dayswithvenki.top/categories/HEXO/"/>
    
    
    <category term="🦋Butterfly" scheme="http://dayswithvenki.top/tags/%F0%9F%A6%8BButterfly/"/>
    
  </entry>
  
</feed>
