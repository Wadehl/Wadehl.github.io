<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Venkiˡᵒᵛᵉ💕</title>
  
  
  <link href="http://dayswithvenki.top/atom.xml" rel="self"/>
  
  <link href="http://dayswithvenki.top/"/>
  <updated>2023-04-12T16:09:24.311Z</updated>
  <id>http://dayswithvenki.top/</id>
  
  <author>
    <name>Kevin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://dayswithvenki.top/posts/http.html"/>
    <id>http://dayswithvenki.top/posts/http.html</id>
    <published>2023-04-12T16:05:56.903Z</published>
    <updated>2023-04-12T16:09:24.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http的建立"><a href="#HTTP的建立" class="headerlink" title="HTTP的建立"></a>HTTP的建立</h2><h3 id="1-osi七层模型与tcpip四层模型"><a href="#1-OSI七层模型与TCP-IP四层模型" class="headerlink" title="1. OSI七层模型与TCP/IP四层模型"></a>1. OSI七层模型与TCP/IP四层模型</h3><div class="table-container"><table><thead><tr><th>OSI 七层模型</th><th>==&gt;</th><th>TCP/IP四层模型</th></tr></thead><tbody><tr><td>应用层</td><td></td><td>应用层</td></tr><tr><td>表示层</td><td></td><td>-</td></tr><tr><td>会话层</td><td></td><td>-</td></tr><tr><td>传输层</td><td></td><td>传输层</td></tr><tr><td>网络层</td><td></td><td>网络层</td></tr><tr><td>链路层</td><td></td><td>物理层</td></tr><tr><td>物理层</td><td></td><td>-</td></tr></tbody></table></div><h3 id="2-状态码"><a href="#2-状态码" class="headerlink" title="2. 状态码"></a>2. 状态码</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;http的建立&quot;&gt;&lt;a href=&quot;#HTTP的建立&quot; class=&quot;headerlink&quot; title=&quot;HTTP的建立&quot;&gt;&lt;/a&gt;HTTP的建立&lt;/h2&gt;&lt;h3 id=&quot;1-osi七层模型与tcpip四层模型&quot;&gt;&lt;a href=&quot;#1-OSI七层模型与TCP-</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端认证方式</title>
    <link href="http://dayswithvenki.top/posts/auth.html"/>
    <id>http://dayswithvenki.top/posts/auth.html</id>
    <published>2023-04-11T13:06:02.141Z</published>
    <updated>2023-04-12T14:29:58.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="认证cookie-session-token-jwtjson-web-token"><a href="#认证：Cookie、Session、Token、JWT（JSON-Web-Token）" class="headerlink" title="认证：Cookie、Session、Token、JWT（JSON Web Token）"></a>认证：Cookie、Session、Token、JWT（JSON Web Token）</h2><h3 id="1-cookie"><a href="#1-Cookie" class="headerlink" title="1. Cookie"></a>1. Cookie</h3><ul><li>弥补HTTP没有状态的不足（无法判断两次HTTP请求是否来源于同一个用户）</li><li>存储在客户端中</li><li>不可跨域（依靠域名区分）</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取全部Cookie</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAllCookies</span>(<span class="hljs-params"></span>) {<br>    <span class="hljs-keyword">let</span> cookies = {};<br>    <span class="hljs-keyword">const</span> all = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>;<br>    <span class="hljs-keyword">if</span>(all) {<br>        <span class="hljs-keyword">const</span> list = all.<span class="hljs-title function_">split</span>(<span class="hljs-string">"; "</span>);<br>        list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">cookie</span>=&gt;</span>{<br>            <span class="hljs-keyword">const</span> cookieArr = cookie.<span class="hljs-title function_">split</span>(<span class="hljs-string">"="</span>);<br>            cookies[cookieArr[<span class="hljs-number">0</span>]] = <span class="hljs-built_in">decodeURIComponent</span>(cookieArr[<span class="hljs-number">1</span>]);<br>        });<br>    }<br>    <span class="hljs-keyword">return</span> cookies;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-session"><a href="#2-Session" class="headerlink" title="2. Session"></a>2. Session</h3><ul><li>弥补HTTP没有状态的不足（无法判断两次HTTP请求是否来源于同一个用户）</li><li>存储在服务端中</li><li>基于Cookie实现（SessionId）</li></ul><h4 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h4><ol><li>用户第一次请求服务器的时候，服务端会根据用户输入的信息生成对应的Session</li><li>服务端在本次请求返回Session对应的SessionId给客户端(Set-Cookie)</li><li>浏览器会将SessionId存入Cookie中，同时Cookie会记录SessionId对应的Domain</li><li>用户第二次访问服务器的时候，请求将自动将Cookie中的SessionId发送到服务端上，服务端根据该SessionId查找对应的用户信息，若找不到，说明Session不存在或者已过期，要求用户重新输入信息。</li></ol><blockquote><h3 id="session的一个使用场景"><a href="#Session的一个使用场景" class="headerlink" title="Session的一个使用场景"></a>Session的一个使用场景</h3><ul><li>Nginx负载均衡的时候：<ul><li>登录在服务器1，请求个人信息在服务器2，那么登录后请求个人信息又需要重新登录。</li><li>用户将商品a加入购物车，而这个请求发送到服务器1，又将商品b加入购物车，这个请求发送到服务器2，最后订单结算，请求发送到服务器1，那么付款的时候，能看到的就只剩下商品a。</li></ul></li></ul><h3 id="使用session的时候需要考虑的问题"><a href="#使用Session的时候需要考虑的问题" class="headerlink" title="使用Session的时候需要考虑的问题"></a>使用Session的时候需要考虑的问题</h3><ul><li>Session存储在服务器中的时候，如果用户使用量较大，需要定期清理过期的<code>Session</code></li><li>网站使用<strong>集群部署</strong>的时候，会遇到多台服务器共享<code>Session</code>的问题（即上面所述）</li><li>多个服务器共享Session，还需要考虑<code>Cookie</code>跨域的问题</li><li><code>SessionId</code>一般存储在<code>Cookie</code>中，但是如果浏览器禁止<code>Cookie</code>或不支持<code>Cookie</code>，一般把SessionId跟在URL参数后面重写URL（<code>Session</code>不一定需要<code>Cookie</code>）</li><li>移动端对<code>Cookie</code>的支持不是很好，<code>Session</code>一般依赖于<code>Cookie</code>，所以一般移动端应用<code>Token</code></li></ul><h3 id="关闭浏览器后session就永远消失了吗"><a href="#关闭浏览器后Session就永远消失了吗" class="headerlink" title="关闭浏览器后Session就永远消失了吗"></a>关闭浏览器后Session就永远消失了吗</h3><p>​    <strong>不正确的</strong>。是因为大部分<code>Session</code>依赖于<code>Cookie</code>实现<code>SessionId</code>的保存，而关闭浏览器这个<code>Cookie</code>可能消失，这样再次链接服务器就会找不到原来的<code>Session</code>。如果服务器设置的<code>Cookie</code>通过硬盘或者其他手段改写<code>HTTP</code>请求头，把原来的<code>SessionId</code>发送给服务器，仍然能打开原来的<code>Session</code>。</p><p>​    因为<strong>关闭浏览器并不会导致<code>Session</code>被删除，所以服务器才会给<code>Session</code>设置一个过期的时间，当<code>Session</code>到期后，服务器才会删除<code>Session</code>节省空间</strong>。</p><h3 id="session与cookie"><a href="#Session与Cookie" class="headerlink" title="Session与Cookie"></a>Session与Cookie</h3><ul><li><strong>安全性</strong>：Session存在服务端更加安全，Cookie设置HttpOnly可以一定程度避免XSS攻击</li><li><strong>存取值类型</strong>：Cookie只支持字符串类型，Session可以为任意类型</li><li><strong>有效期</strong>：Cookie可以设置为长时间保存，Session一般在客户端关闭或者设定的较短期限到期</li><li><strong>存储大小与个数限制</strong>:Cookie一般单个限制为4KB，限定个数与浏览器有关；而Session一般不存在限制，但是如果访问较多的话会给服务端带来性能影响</li></ul></blockquote><h3 id="3-token"><a href="#3-Token" class="headerlink" title="3. Token"></a>3. Token</h3><p>一种简单的生成Token：</p><p>​    uuid(用户唯一标识)+时间戳+sign(hash处理token前几位生成的十六进制字符串)</p><p><strong>特点</strong>：</p><ul><li>服务端无状态化，可扩展性良好</li><li>支持移动端设备</li><li>安全</li><li>token完全由应用管理，可以避开同源策略</li></ul><h4 id="31-access-token"><a href="#3-1-Access-Token" class="headerlink" title="3.1 Access Token"></a>3.1 Access Token</h4><ol><li>客户端发送用户名密码等验证信息</li><li>服务端收到请求后进行验证，验证通过后，根据登录凭证加密为Access Token后与数据一起返回给客户端</li><li>客户端收到Token后，一般存储到localStorage中</li><li>客户端再次发起请求时，把Token放在请求头中</li><li>服务端收到请求后，查询数据库信息验证Token，验证成功后返回数据</li></ol><h4 id="32-refresh-token"><a href="#3-2-Refresh-Token" class="headerlink" title="3.2 Refresh Token"></a>3.2 Refresh Token</h4><p>AccessToken存在过期时间（服务端存在数据库内），当Access Token过期后，用户需要重新输入验证信息。为了方便用户，还有一个Refresh Token。</p><ol><li>客户端发送用户名密码等验证信息</li><li>服务端收到请求后进行验证，验证通过后，根据登录凭证加密为AccessToken与RefreshToken(RefreshToken过期时限&gt;AccessToken)后与数据一起返回给客户端</li><li>客户端收到Token后存放在本地(一般为localStorage)</li><li>当客户端发送请求的时候将Access Token传输到服务端，服务端进行校验与过期检查，如果没有过期则返回数据</li><li>如果AccessToken过期，服务端向客户端发送过期错误，此时客户端将RefreshToken发送到服务端进行检验</li><li>如果RefreshToken未过期，则发送新的Access Token与 Refresh Token给客户端；否则，客户端需要重新输入登录验证信息</li></ol><blockquote><h3 id="token与session"><a href="#Token与Session" class="headerlink" title="Token与Session"></a>Token与Session</h3><ul><li>Session用于保持会话，使服务端状态化；而Token是访问资源（API）的一个凭证令牌，会使服务端无状态化</li><li>Token的安全性比Session要好，每个请求都会对签名解密，能够防止监听以及重复攻击，而Session必须依赖链路层保障通讯安全</li><li>二者不冲突，可以同时存在</li></ul><h3 id="为什么从cookie转到token"><a href="#为什么从Cookie转到Token" class="headerlink" title="为什么从Cookie转到Token"></a>为什么从Cookie转到Token</h3><p>​    原因在于之前，<code>JQuery</code>前端时代是前后端<strong>不分离</strong>的，后端在模板渲染前会判断路由是否有权限来决定是否跳转。登录的时候，后端只需要设置<code>SetCookie</code>这个响应头，<code>Cookie</code>就能够存储起来并且自动发送。</p><p>​    但是现在的前后端分离，通常需要进行<strong>跨域</strong>操作，此时<code>Cookie</code>就有更多的限制了，因此我们更愿意使用手动管理权限的Token方式。</p></blockquote><h3 id="4-jwt"><a href="#4-JWT" class="headerlink" title="4. JWT"></a>4. JWT</h3><p>JWT原理是在服务器认证后，生成一个JSON对象，发送给用户，这个JSON对象包含用户的信息，之后用户每次发送请求的时候，都需要携带上JWT，为了防止数据被篡改，服务器在生成对象的时候，会加上签名。</p><h4 id="41-jwt的数据结构"><a href="#4-1-JWT的数据结构" class="headerlink" title="4.1 JWT的数据结构"></a>4.1 JWT的数据结构</h4><p><code>Header.Payload.Signature</code>三部分用.链接</p><p><img src="https://www.wangbase.com/blogimg/asset/201807/bg2018072303.jpg" alt="img"></p><ul><li><p>Header</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>    <span class="hljs-attr">"alg"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"HS256"</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">"typ"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"JWT"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p><code>alg</code>表示签名的算法<code>HMAC SHA256</code>，<code>typ</code>表示该token的类型，<code>JWT</code>统一为<code>JWT</code>。</p></li><li><p>Payload</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">{</span><br>    <span class="hljs-string">"iss (issuer)"</span>：<span class="hljs-string">"签发人"</span><br><span class="hljs-string">"exp (expiration time)"</span>：<span class="hljs-string">"过期时间"</span><br><span class="hljs-string">"sub (subject)"</span>：<span class="hljs-string">"主题"</span><br><span class="hljs-string">"aud (audience)"</span>：<span class="hljs-string">"受众"</span><br><span class="hljs-string">"nbf (Not Before)"</span>：<span class="hljs-string">"生效时间"</span><br><span class="hljs-string">"iat (Issued At)"</span>：<span class="hljs-string">"签发时间"</span><br><span class="hljs-string">"jti (JWT ID)"</span>：<span class="hljs-string">"编号"</span><br><span class="hljs-punctuation">}</span><br></code></pre></td></tr></tbody></table></figure><p>除了上面7个官方字段外，还可以定义一些私有字段。</p></li><li><p>Signature</p><p>指定密钥(secret)后，按下面的公式生成。</p><p><code>signature = HMACSHA256(base64UrlEncode(Header)+"."+(base64UrlEncode(Payload), secret)</code></p></li><li><p>BASE64URL算法</p><p>由于<code>JWT</code>作为令牌可能需要放在URL中，因为<code>+</code>、<code>/</code>、<code>=</code>在URL中有特殊的含义，所以要被替换掉，具体算法: <code>=</code>省略、<code>+</code>换位<code>-</code>，<code>/</code>替换为<code>_</code>。</p></li></ul><h4 id="42-jwt的使用"><a href="#4-2-JWT的使用" class="headerlink" title="4.2 JWT的使用"></a>4.2 JWT的使用</h4><ol><li><p>当客户端收到服务端返回的<code>JWT</code>的时候，可以存储在<code>Cookie</code>或<code>localStorage</code>中，在之后的每一次请求都需要带上<code>JWT</code>。当<code>JWT</code>在<code>Cookie</code>中的时候将自动发送（不允许跨域），所以一般会放在HTTP的请求头<code>Authorization</code>中。</p><p>一种使用方法：<code>Authorization: Bearer + 'JWT'</code>(调用OpenAI API的时候就是将api_key放在请求头中)</p><p>另一种：跨域的时候，<code>JWT</code>放在<code>POST</code>请求的BODY中。</p></li></ol><h4 id="43-jwt的特点"><a href="#4-3-JWT的特点" class="headerlink" title="4.3 JWT的特点"></a>4.3 JWT的特点</h4><ol><li><code>JWT</code>默认不加密，但是可以生成原始<code>Token</code>后，使用密钥进行加密。</li><li><code>JWT</code>不加密的时候，由于里面的数据是可以被解码的,可以被直接获取，所以不应该在<code>JWT</code>内写入秘密数据,并且永远使用<strong>强密码哈希算法</strong>处理密码。</li><li><code>JWT</code>除了用于认证外，也可以用于信息的交换，可以减少数据库的查询次数。</li><li><code>JWT</code>的最大缺点在于，服务端并不会保存<code>Session</code>信息，因此无法在过程中废除<code>Token</code>或者更改<code>JWT</code>的权限。就是说，<code>JWT</code>一旦签发，在到期前都始终有效，除非服务器部署额外的逻辑。</li><li><code>JWT</code>本身包含了认证信息，如果泄露，那么任何人都可以获取该令牌的权限。为了减少盗用，<code>JWT</code>的有效期一般被设置的很短，对于一些重要的信息，使用的时候应该再次对用户认证。</li><li>为了减少盗用，<code>JWT</code>不应该使用<code>HTTP</code>传输，而是应该使用<code>HTTPS</code>。</li></ol><blockquote><h3 id="token与jwt的区别"><a href="#TOKEN与JWT的区别" class="headerlink" title="TOKEN与JWT的区别"></a>TOKEN与JWT的区别</h3><ul><li>相同：<ul><li>都是访问资源的令牌</li><li>都可以记录用户的信息</li><li>都使服务器无状态化</li><li>都是只有验证成功后，客户端才能访问服务端上的受保护的资源</li></ul></li><li>不同：<ul><li>Token：服务端验证客户端发送的Token的时候，还需要查询数据库获取用户的信息，并且验证Token是否有效。</li><li>JWT：Payload与Token加密后存储在客户端中，服务端只需要使用密钥解密并检验（JWT自己实现）即可，不需要或较少查询数据库，因为JWT包含了用户信息与加密的数据。</li></ul></li></ul></blockquote>]]></content>
    
    
    <summary type="html">Cookie、Session、Token与JWT</summary>
    
    
    
    
    <category term="💻前端" scheme="http://dayswithvenki.top/tags/%F0%9F%92%BB%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>GoLang学习记录</title>
    <link href="http://dayswithvenki.top/posts/golang-1.html"/>
    <id>http://dayswithvenki.top/posts/golang-1.html</id>
    <published>2023-04-05T12:32:21.105Z</published>
    <updated>2023-04-05T12:45:59.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><p>Go语言中支持<code>label</code>语法：分别是<code>break label</code>，<code>goto label</code>与<code>continue label</code>。</p><p>==break与其他语言类似，但是不和switch搭配使用，goto与continue没有很大区别==</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>    label:<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++ {<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">5</span>; j++ {<br><span class="hljs-keyword">if</span> i == <span class="hljs-number">8</span> &amp;&amp; j == <span class="hljs-number">4</span> {<br><span class="hljs-keyword">break</span> label<br>}<br>fmt.Print(<span class="hljs-string">"+"</span>)<br>}<br>fmt.Print(<span class="hljs-string">"\n"</span>)<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="标准函数"><a href="#标准函数" class="headerlink" title="标准函数"></a>标准函数</h3><ol><li><p>void 不返回</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getSum</span><span class="hljs-params">(n1 <span class="hljs-type">int</span>, n2 <span class="hljs-type">int</span>)</span></span> {<br>    fmt.Println(n1 + n2)<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>返回特定类型</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getSum</span><span class="hljs-params">(n1 <span class="hljs-type">int</span>, n2 <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> {<br>    <span class="hljs-keyword">return</span> n1 + n2<br>}<br></code></pre></td></tr></tbody></table></figure></li><li><p>多个返回值</p><ul><li>普通</li></ul><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getSum</span><span class="hljs-params">(n1, n2 <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) {<br>    sum := n1 + n2<br>    mult := n1 * n2<br>    <span class="hljs-keyword">return</span> sum, mult<br>}<br></code></pre></td></tr></tbody></table></figure><ul><li>返回值命名</li></ul><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getSum</span><span class="hljs-params">(n1, n2 <span class="hljs-type">int</span>)</span></span> (sum, mult <span class="hljs-type">int</span>) {<br>    sum = n1 + n2<br>    mult = n1 * n2<br>    <span class="hljs-keyword">return</span><br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><h3 id="匿名函数-额外指针修改值的问题"><a href="#匿名函数-额外：指针修改值的问题" class="headerlink" title="匿名函数 ==额外：指针修改值的问题=="></a>匿名函数 ==额外：指针修改值的问题==</h3><ol><li><p>函数数据类型</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getSum</span><span class="hljs-params">(n1, n2 <span class="hljs-type">int</span>)</span></span> (sum, mult <span class="hljs-type">int</span>) {<br>    sum = n1 + n2<br>    mult = n1 * n2<br>    <span class="hljs-keyword">return</span><br>}<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>    fmt.Printf(<span class="hljs-string">"type is %T"</span>, getRes)<br>    <span class="hljs-comment">// type is func(int, int) (int, int)</span><br>}<br></code></pre></td></tr></tbody></table></figure></li></ol><ol><li><p>匿名函数</p><ul><li><p>声明变量的形式声明函数 ==这里与JS箭头函数()=&gt;{}类似==</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> getRes = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n1, n2 <span class="hljs-type">int</span>)</span></span> (sum, mult <span class="hljs-type">int</span>) {<br>    sum = n1 + n2<br>    mult = n1 * n2<br>    <span class="hljs-keyword">return</span><br>}<br>a, b := getRes(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>fmt.Println(a, b)<br></code></pre></td></tr></tbody></table></figure></li><li><p>匿名函数立即执行</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(n1, n2 <span class="hljs-type">int</span>)</span></span> (sum, mult <span class="hljs-type">int</span>) {<br>    sum = n1 + n2<br>    mult = n1 * n2<br>    <span class="hljs-keyword">return</span><br>}(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>fmt.Println(a, b)<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ol><h3 id="defer函数"><a href="#defer函数" class="headerlink" title="defer函数"></a>defer函数</h3><blockquote><p>与JS异步函数的执行（EventLoop）不同，在JS中分为宏任务队列与微任务队列，遇到Promise.then、Object.observe…将会将其push到当前宏任务的微任务队列中，遇到setTimeout、setInterval…将会push到宏任务队列中。</p><ol><li>当前宏任务结束后，将处理当前宏任务的微任务队列中的任务；</li><li>当前宏任务的微任务队列全部完成后，将处理宏任务队列中的下一个宏任务。</li></ol></blockquote><p>在Go中，defer函数是进行==压栈==处理，即按顺序的第一个defer函数将在最后进行。（类似于宏任务与微任务==栈==）</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deferFunc1</span><span class="hljs-params">()</span></span> {<br>    fmt.Println(<span class="hljs-number">1</span>)<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deferFunc2</span><span class="hljs-params">()</span></span> {<br>    fmt.Println(<span class="hljs-number">2</span>)<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {<br>    <span class="hljs-keyword">defer</span> deferFunc1()<br>    <span class="hljs-keyword">defer</span> deferFunc2()<br>    fmt.Println(<span class="hljs-number">3</span>)<br>}<br><br><span class="hljs-comment">// 3</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></tbody></table></figure><h3 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h3><ol><li>说明<ul><li>init函数先于main函数自动执行</li><li>每个包中可以有多个init函数，每个包中的源文件中也可以有多个init函数</li><li>init函数没有输入参数、返回值，也未声明，所以无法引用</li><li>不同包的init函数按照包导入的依赖关系决定执行顺序</li><li>无论包被导入多少次，init函数只会被调用一次，也就是只执行一次</li><li>init函数在代码中不能被显示的调用，不能被引用（赋值给函数变量），否则会出现编译错误</li><li>Go程序仅仅想要用一个package的init执行，我们可以这样使用：import _ “test_xxxx”，导入包的时候加上下划线就ok了</li><li>init函数不应该依赖任何在main函数里创建的变量，因为init函数的执行是在main函数之前的</li></ul></li></ol><ol><li><p>init执行顺序：</p><ul><li><strong>单个源文件</strong>： init 函数执行顺序与其定义顺序一致，从上到下。</li><li><strong>单个package</strong>：根据文件名的 字典序 来确定。</li><li><strong>main引入多个package</strong>：<ul><li><strong>不存在依赖</strong>：对于不同的包，如果不相互依赖的话，按照 main 包中导入顺序调用包的 init 函数，最后再调用 main 包的 init 函数。</li><li><strong>存在依赖</strong>：如果 package 存在依赖，不同包的 init 函数按照包导入的依赖关系决定执行顺序。 调用顺序为最后被依赖的最先被初始化，如导入顺序 main &gt; a &gt; b &gt; c，则初始化顺序为 c &gt; b &gt; a &gt; main，依次执行对应的 init 方法。</li></ul></li></ul></li></ol>]]></content>
    
    
    <summary type="html">GoLang学习记录 —— label&amp;函数</summary>
    
    
    
    
    <category term="🐱‍💻GoLang" scheme="http://dayswithvenki.top/tags/%F0%9F%90%B1%E2%80%8D%F0%9F%92%BBGoLang/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染过程</title>
    <link href="http://dayswithvenki.top/posts/7c288f7a.html"/>
    <id>http://dayswithvenki.top/posts/7c288f7a.html</id>
    <published>2023-03-27T16:00:00.000Z</published>
    <updated>2023-04-12T16:01:02.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单渲染前过程描述"><a href="#简单渲染前过程描述" class="headerlink" title="简单渲染前过程描述"></a>简单渲染前过程描述</h2><ol><li>用户输入域名，DNS解析域名为IP地址</li><li>浏览器根据IP地址请求服务器</li><li>服务器响应HTTP请求，并返回数据给浏览器</li><li>浏览器开始渲染</li></ol><h2 id="具体细节"><a href="#具体细节：" class="headerlink" title="具体细节："></a>具体细节：</h2><ol><li><p>当用户输入域名URL后，浏览器进程（一般一个<strong>标签页</strong>对应一个<strong>单独的进程</strong>，但是一些空白页会被合并为一个进程）中的<code>UI线程</code>会建立一个<code>网络线程</code>，<code>网络线程</code>会根据<code>DNS</code>对域名进行<strong>解析</strong>获取<code>IP</code>（如果用户输入的是一些关键字/本地文件路径，就会到对应的搜索引擎/本地文件）。得到<code>IP</code>后，浏览器的<code>SafeBrowsing</code>会对<code>IP</code>进行安全检查（是否在黑名单），如果判定为不安全会提供一个<text style="color: red ">禁止访问</text>的页面，如果安全将与服务器进行通信（TCP三次握手，返回响应报文）通知<code>UI线程</code>进行下一步工作。</p></li><li><p><code>UI线程</code>此时将新建一个<code>渲染进程</code>，并且通过<code>IPC</code>管道传输<code>HTML</code>文件给<code>渲染进程</code>的<code>主线程</code>，此时，正式开始渲染。</p></li></ol><h3 id="️主线程"><a href="#🏊‍♂️主线程" class="headerlink" title="🏊‍♂️主线程"></a>🏊‍♂️主线程</h3><ol><li><p>在<code>主线程</code>中，会将<code>HTML</code>文件进行<strong>词法分析</strong>转义为<code>Token</code>，即<code>Tokenization</code>（标记化）</p></li><li><p>并且创建<code>DOM节点</code>，最后创建成<code>DOM</code>树</p><blockquote><p>上述 1,2 被称为HTML解析</p></blockquote></li><li><p>但解析过程中，可能遇到<code>&lt;link&gt;与&lt;style&gt;</code>，就会涉及到CSS的解析（为了提升解析效率，浏览器在解析前会启动一个<strong>预解析</strong>，会优先下载<code>css</code>与<code>js</code>的资源文件。当<code>CSS</code>文件还未下载的时候，主线程并不会<strong>阻塞</strong>，这是因为<code>CSS</code>的下载与解析是在<code>预解析</code>线程中执行的，CSS解析完成后将生成<code>CSSOM</code>树。</p><p><img src="https://s2.loli.net/2023/04/12/HK6W4eGIp7gSRd3.png" alt="img" style="zoom: 50%;"></p></li><li><p>解析过程中，可能遇到<code>&lt;script&gt;</code>等标签，这就涉及到了<code>JS</code>的解析，而<code>JS</code>的解析会<strong>阻塞</strong>当前的<code>HTML</code>解析，在<code>JS</code>解释完毕后再继续，这是因为我们不清楚<code>JS</code>是否会操作<code>DOM</code>节点或者操作<code>CSS</code>节点。</p><blockquote><p>因此，我们需要注意JS的引入时间，一般JS的加载位置应该放在BODY标签的底部，或者使用<code>Defer</code>。</p></blockquote></li><li><p>此时，我们已经得到了解析好的<code>DOM</code>树与<code>CSSOM</code>树，此时进行<code>Computed Style</code>，得到一棵带有<strong>样式</strong>的<code>DOM</code></p></li><li><p>但是还不够，我们还需要得到<code>Layout</code>来获取每个节点的<strong>几何信息</strong>，通过这个计算过程后，我们将得到一棵带有页面<code>x,y坐标以及盒子尺寸</code>的<code>Layout Tree</code>，此时<code>Layout Tree</code>与我们真实能看到的内容是一一对应的了。</p><blockquote><p><code>Layout Tree</code>与<code>DOM</code>并非一一对应，其中不可视的<code>display: none</code>不会在<code>Layout Tree</code>上，而伪类元素(::before等)会挂载在<code>Layout Tree</code>的相应节点</p></blockquote></li><li><p>但是仍然不够，此时还需要注意，如果两个节点的位置大小有重合的话，我们无法确定哪个节点展示在前，哪个被覆盖，因此我们还需要确认各个节点的<code>绘制顺序</code>，即<code>分层</code>。</p></li><li><p>分层工作完成后,将生成绘制指令，将每个层单独<strong>生成</strong>绘制指令。==只是生成，并未执行==</p></li></ol><h3 id="️合成线程"><a href="#🏊‍♀️合成线程" class="headerlink" title="🏊‍♀️合成线程"></a>🏊‍♀️合成线程</h3><ol><li><p>合成线程会先对图层进行分块处理得到<code>Tiles</code>（会从线程池获取<strong>栅格线程</strong>的帮助）</p></li><li><p>分块完成后，将进行<strong>光栅化</strong>阶段，这一过程会交付给GPU进程，最终得到位图。</p></li><li><p>最后，当所有的图块都被栅格化后，合成线程将生成一个个<strong>指引quad</strong>信息，并通过<code>IPC</code>给浏览器进程发送一个渲染帧，这个渲染帧最终将交由GPU进行显示，每当页面滚动的时候，合成线程都会交付另一个渲染帧给GPU来<code>更新页面</code>。</p><blockquote><p>指引会标识位图的位置，以及考虑旋转，缩放平移等信息，与<strong>渲染主线程无关</strong>。这就是为什么<code>transform</code>效率高的本质原因，以及不会引起<code>回流（重排）与重绘</code>阻塞渲染。</p></blockquote></li></ol><blockquote><h2 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h2><h3 id="1-reflow-回流重排"><a href="#1-Reflow-回流-重排" class="headerlink" title="1. Reflow 回流/重排"></a>1. Reflow 回流/重排</h3><p>​    当进行影响<code>Layout Tree</code>的操作的时候，需要重新计算<code>Layout Tree</code>，而且为了避免连续的多次布局反复计算，浏览器会合并这些操作，当JS代码全部完成后再统一计算，改动属性造成的<code>Reflow</code>是异步完成的。也正因如此，JS获取布局属性的时候可能会无法获取到最新的布局信息。</p><h3 id="2-repaint-重绘"><a href="#2-Repaint-重绘" class="headerlink" title="2. Repaint 重绘"></a>2. Repaint 重绘</h3><p>​    重绘，重新绘制渲染树，一般不影响DOM树，不一定引起回流，而回流一定引起重绘。</p></blockquote>]]></content>
    
    
    <summary type="html">HTML-&gt;DOM,CSS-&gt;CSSOM, ==&gt;(Rendering Tree) -&gt; Layout Tree -&gt; Paint</summary>
    
    
    
    
    <category term="💻前端" scheme="http://dayswithvenki.top/tags/%F0%9F%92%BB%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记7</title>
    <link href="http://dayswithvenki.top/posts/51ed13e5.html"/>
    <id>http://dayswithvenki.top/posts/51ed13e5.html</id>
    <published>2023-01-06T16:00:00.000Z</published>
    <updated>2023-04-08T04:14:24.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-剑指offer"><a href="#LeetCode-剑指Offer" class="headerlink" title="LeetCode 剑指Offer"></a><a href="&quot;https://leetcode.cn/study-plan/lcof/?progress=bqubfyc&quot;">LeetCode 剑指Offer</a></h1><h2 id="剑指-offer-27-二叉树的镜像"><a href="#剑指-Offer-27-二叉树的镜像" class="headerlink" title="剑指 Offer 27. 二叉树的镜像"></a><a href="https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof/">剑指 Offer 27. 二叉树的镜像</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><p>例如输入：</p><p>​     4</p><p>   /   \<br>  2     7<br> / \   / \<br>1   3 6   9<br>镜像输出：</p><p>​     4</p><p>   /   \<br>  7     2<br> / \   / \<br>9   6 3   1</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">输入：root = [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>]<br>输出：[<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]<br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>0 &lt;= 节点个数 &lt;= 1000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>​    递归，对于每个节点来说，树的镜像只是相当于将当前节点的左右子树翻转。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mirrorTree</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; TreeNode:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> root<br>        temp = root.left<br>        root.left = root.right<br>        root.right = temp<br>        self.mirrorTree(root.left)<br>        self.mirrorTree(root.right)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></td></tr></tbody></table></figure><h2 id="剑指-offer-28-对称的二叉树"><a href="#剑指-Offer-28-对称的二叉树" class="headerlink" title="剑指 Offer 28. 对称的二叉树"></a><a href="https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/">剑指 Offer 28. 对称的二叉树</a></h2><h3 id="题目描述"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p><p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p><p>​    1</p><p>   / \<br>  2   2<br> / \ / \<br>3  4 4  3<br>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p><p>​    1</p><p>   / \<br>  2   2<br>   \   \<br>   3    3</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">输入：root = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>]<br>输出：true<br><br>输入：root = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,null,<span class="hljs-number">3</span>,null,<span class="hljs-number">3</span>]<br>输出：false<br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>0 &lt;= 节点个数 &lt;= 1000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>对于任意两个节点L,R来说：<ol><li><code>L.val == R.val</code>;</li><li><code>L.left.val == R.right.val</code>;</li><li><code>L.right.val == R.left.val</code></li></ol></li><li>因此可以进行递归，递归结束的条件：<ol><li>L与R同时越过叶子节点为空，此时return True;</li><li>L与R只有一个越过，说明不对称，return False;</li><li>L与R的val不等，return False</li></ol></li></ul><h3 id="实现代码"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for a binary tree node.</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isSymmetric</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">recur</span>(<span class="hljs-params">L,R</span>):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> L <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> R:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> L <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> R <span class="hljs-keyword">or</span> L.val!=R.val:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">return</span> recur(L.left,R.right) <span class="hljs-keyword">and</span> recur(L.right,R.left)<br>        <span class="hljs-keyword">return</span> recur(root.left, root.right) <span class="hljs-keyword">if</span> root <span class="hljs-keyword">else</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></tbody></table></figure><h2 id="剑指-offer-26-树的子结构"><a href="#剑指-Offer-26-树的子结构" class="headerlink" title="剑指 Offer 26. 树的子结构"></a><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a></h2><h3 id="题目描述"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p><p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p><p>例如:<br>给定的树 A:</p><p>​     3</p><p>​    / \</p><p>   4   5<br>  / \<br> 1   2<br>给定的树 B：</p><p>   4<br>  /<br> 1<br>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p><ul><li><p>实例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">示例 <span class="hljs-number">1</span>：<br><br>输入：A = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], B = [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]<br>输出：false<br>示例 <span class="hljs-number">2</span>：<br><br>输入：A = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], B = [<span class="hljs-number">4</span>,<span class="hljs-number">1</span>]<br>输出：true<br></code></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>限制</p><ul><li><code>0 &lt;= 节点个数 &lt;= 10000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>先序遍历A，找到值与B根节点相同的节点</li><li>以找到的节点为根节点与B节点作对比判断树的结构是否相等</li><li>结构不等的话重新找下一端点</li></ol><h3 id="实现代码"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isSubStructure</span>(<span class="hljs-params">self, A: TreeNode, B: TreeNode</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> A <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> B:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> self.compare(A,B) <span class="hljs-keyword">or</span> self.isSubStructure(A.left,B) <span class="hljs-keyword">or</span> self.isSubStructure(A.right,B)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compare</span>(<span class="hljs-params">self, A:TreeNode, B:TreeNode</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> B:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> A:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> A.val == B.val <span class="hljs-keyword">and</span> self.compare(A.left, B.left) <span class="hljs-keyword">and</span> self.compare(A.right, B.right)<br></code></pre></td></tr></tbody></table></figure><p>​</p>]]></content>
    
    
    <summary type="html">LeetCode</summary>
    
    
    
    
    <category term="🐲LeetCode" scheme="http://dayswithvenki.top/tags/%F0%9F%90%B2LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记6</title>
    <link href="http://dayswithvenki.top/posts/51ed13e5.html"/>
    <id>http://dayswithvenki.top/posts/51ed13e5.html</id>
    <published>2023-01-05T16:00:00.000Z</published>
    <updated>2023-04-08T04:14:16.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><p>==首先，先复习一下二叉树的遍历：==</p><h2 id="样例二叉树图"><a href="#样例二叉树图" class="headerlink" title="样例二叉树图"></a>样例二叉树图</h2><p><img src="https://s2.loli.net/2023/02/07/xYqoHRUknSzG649.png" alt="image-20230207145759969"></p><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><ul><li><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><p>递归</p><ul><li><p>实现代码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    ans = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preOrder</span>(<span class="hljs-params">node: <span class="hljs-type">Optional</span>[TreeNode]</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>            <span class="hljs-keyword">return</span> []<br>        ans.append(node)<br>        preOrder(node.left)<br>        preOrder(node.right)<br>    preOrder(root)<br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>迭代</p><ul><li><p>思路：使用栈辅助实现非递归。</p><p>由于前序遍历是先对当前节点进行操作，再遍历当前节点的左子树，最后遍历当前节点的右子树。</p><p>因此在==入栈前进行操作==，随后遍历其左子树——即==栈中的点左子树已经被遍历==，当左子树遍历到底的时候，将栈顶<code>pop</code>出来，此时的栈顶元素的左子树已经遍历完毕，开始遍历其右子树，即==出栈遍历右子树==。</p></li><li><p>实现代码：</p><ul><li><p>Python</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    ans, stack = [], []<br>    cur = root<br>    <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">or</span> stack:<br>        <span class="hljs-keyword">while</span> cur:<br>            ans.append(cur.val)<br>            stack.append(cur)<br>            cur = cur.left<br>        cur = stack.pop()<br>        cur = cur.right<br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></tbody></table></figure></li><li><p>Typescript</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">root: TreeNode | <span class="hljs-literal">null</span></span>): <span class="hljs-built_in">number</span>[] {<br>    <span class="hljs-keyword">const</span> ans = &lt;number[]&gt;[];<br>    const stack = &lt;TreeNode[]&gt;[];<br>    let cur = root;<br>    while(cur || stack.length) {<br>        while(cur) {<br>            ans.push(cur.val);<br>            stack.push(cur);<br>            cur = cur.left;<br>        }<br>        cur = stack.pop();<br>        cur = cur.right;<br>    }<br>    return ans;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><ul><li><h3 id="代码实现"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><p>递归</p><ul><li><p>实现代码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    ans = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inOrder</span>(<span class="hljs-params">node: <span class="hljs-type">Optional</span>[TreeNode]</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>            <span class="hljs-keyword">return</span> []<br>        inOrder(node.left)<br>        ans.append(node)<br>        inOrder(node.right)<br>    inOrder(root)<br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>迭代</p><ul><li><p>思路：使用栈辅助实现非递归，与前序遍历非递归十分类似。</p><p>由于中序遍历是先对当前节点的左子树进行操作，再对当前节点进行操作，最后遍历当前节点的右子树。</p><p>因此先进行入栈操作，遍历其左子树——即==栈中的点左子树已经被遍历==，当左子树遍历到底的时候，将栈顶<code>pop</code>出来，==出栈后进行操作==，随后，此时的栈顶元素的左子树已经遍历完毕，开始遍历其右子树，即==操作后遍历右子树==。</p></li><li><p>实现代码：</p><ul><li><p>Python</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    ans, stack = [], []<br>    cur = root<br>    <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">or</span> stack:<br>        <span class="hljs-keyword">while</span> cur:<br>            stack.append(cur)<br>            cur = cur.left<br>        cur = stack.pop()<br>        ans.append(cur.val)<br>        cur = cur.right<br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></tbody></table></figure></li><li><p>Typescript</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">root: TreeNode | <span class="hljs-literal">null</span></span>): <span class="hljs-built_in">number</span>[] {<br>    <span class="hljs-keyword">const</span> ans = &lt;number[]&gt;[];<br>    const stack = &lt;TreeNode[]&gt;[];<br>    let cur = root;<br>    while(cur || stack.length) {<br>        while(cur) {<br>            stack.push(cur);<br>            cur = cur.left;<br>        }<br>        cur = stack.pop();<br>        ans.push(cur.val);<br>        cur = cur.right;<br>    }<br>    return ans;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><ul><li><h3 id="代码实现"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><p>递归</p><ul><li><p>实现代码</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">inorderTraversal</span>(<span class="hljs-params">root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    ans = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inOrder</span>(<span class="hljs-params">node: <span class="hljs-type">Optional</span>[TreeNode]</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> node:<br>            <span class="hljs-keyword">return</span> []<br>        inOrder(node.left)<br>        inOrder(node.right)<br>        ans.append(node)<br>    inOrder(root)<br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></tbody></table></figure></li></ul></li><li><p>迭代</p><ul><li><p>思路：使用栈辅助实现非递归，与前中序遍历左子树的思路一致，但是在于出栈的时候需要判断是否含有右子树以及右子树是否已经被遍历。</p><p>由于中序遍历是先对当前节点的左子树进行操作，再遍历当前节点的右子树，最后对当前节点进行操作。</p><p>因此先进行入栈操作，遍历其左子树——即==栈中的点左子树已经被遍历==，当左子树遍历到底的时候，将栈顶<code>pop</code>出来时：</p><p>​    首先判断该节点是否==还有右子树或者右子树是否已经被完全遍历==，</p><p>​        若是，则对该节点进行操作；</p><p>​        否则，将该节点==重新入栈==。</p><ul><li><p>Python</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">postorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    ans, stack = [], []<br>    cur = root<br>    prev = <span class="hljs-literal">None</span> <span class="hljs-comment"># 用于保存上一个被遍历右子树的节点</span><br>    <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">or</span> stack:<br>        <span class="hljs-keyword">while</span> cur:<br>            stack.append(cur)<br>            cur = cur.left<br>        cur = stack.pop()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cur.right <span class="hljs-keyword">or</span> cur.right == prev:<br>            ans.append(cur.val)<br>            prev = cur<br>            cur = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            stack.append(cur)<br>            cur = cur.right<br><span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></tbody></table></figure></li><li><p>Typescript</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">postorderTraversal</span>(<span class="hljs-params">root: TreeNode | <span class="hljs-literal">null</span></span>): <span class="hljs-built_in">number</span>[] {<br>    <span class="hljs-keyword">const</span> stack = &lt;TreeNode[]&gt;[];<br>    const ans = &lt;number[]&gt;[];<br>    <br>    let prev = undefined;<br><br>    while(root || stack.length) {<br>        while(root){<br>            stack.push(root);<br>            root = root.left;<br>        }<br>        root = stack.pop();<br>        if(!root.right || root.right === prev) {<br>            ans.push(root.val);<br>            prev = root;<br>            root = undefined;<br>        }<br>        else {<br>            stack.push(root);<br>            root = root.right;<br>        }<br>    }<br>    return ans;<br>};<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul></li></ul><h1 id="leetcode-剑指offer"><a href="#LeetCode-剑指Offer" class="headerlink" title="LeetCode 剑指Offer"></a><a href="&quot;https://leetcode.cn/study-plan/lcof/?progress=bqubfyc&quot;">LeetCode 剑指Offer</a></h1><h2 id="剑指-offer-32-i-从上到下打印二叉树层次遍历"><a href="#剑指-Offer-32-I-从上到下打印二叉树（层次遍历）" class="headerlink" title="剑指 Offer 32 - I. 从上到下打印二叉树（层次遍历）"></a><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">剑指 Offer 32 - I. 从上到下打印二叉树</a>（层次遍历）</h2><ul><li><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。</p></li></ul><ul><li><h3 id="代码实现"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li><p>迭代</p><ul><li><p>思路：用队列作为辅助空间，队列初始化为[root]，每次出队的时候，对出队的节点进行操作，然后将出队的节点的子节点一同入队（若有），循环直至队列为空。</p><ul><li><p>Python</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>        <span class="hljs-keyword">return</span> []<br>    ans, queue = [], [root]<br>    <span class="hljs-keyword">while</span> queue:<br>        cur = queue.pop(<span class="hljs-number">0</span>)<br>        ans.append(cur.val)<br>        <span class="hljs-keyword">if</span> cur.left:<br>            queue.push(cur.left)<br>        <span class="hljs-keyword">if</span> cur.right:<br>            queue.push(cur.right)<br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></tbody></table></figure></li><li><p>Typescript</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">root: TreeNode | <span class="hljs-literal">null</span></span>): <span class="hljs-built_in">number</span>[] {<br>    <span class="hljs-keyword">if</span>(!root){<br>        <span class="hljs-keyword">return</span> []<br>    }<br>    <span class="hljs-keyword">const</span> ans = &lt;number[]&gt;[];<br>    const queue = &lt;TreeNode[]&gt;[root];<br>    <br>    while(queue.length) {<br>        let cur = queue.shift();<br>        ans.push(cur.val);<br>        if(cur.left)<br>            queue.push(cur.left);<br>        if(cur.right)<br>            queue.push(cur.right);<br>    }<br></code></pre></td></tr></tbody></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="剑指-offer-32-ii-从上到下打印二叉树-ii"><a href="#剑指-Offer-32-II-从上到下打印二叉树-II" class="headerlink" title="剑指 Offer 32 - II. 从上到下打印二叉树 II"></a><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></h2><h3 id="题目描述"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p><ul><li><p>实例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">例如:<br>给定二叉树:&nbsp;[<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,null,null,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>],<br><br>    <span class="hljs-number">3</span><br>   / \<br>  <span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>    /  \<br>   <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br>返回其层次遍历结果：<br><br>[<br>  [<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">9</span>,<span class="hljs-number">20</span>],<br>  [<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]<br>]<br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>节点总数 &lt;= 1000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>​    事实上还是二叉树的层次遍历，与直接存储节点的值稍微不一样的地方在于，需要按不同层次进行分类。</p><p>具体思路为以下几点：</p><ol><li>队列中存储的值不仅是节点的值，同时将节点的层次一并存储；</li><li>而返回的<code>ans</code>不单纯是一个<code>List</code>而是一个==哈希表(字典)==，以下标作为<code>key</code>，节点的值作为<code>value</code>；</li><li>由于每次进行出队操作，都需要添加出队节点的左子树与右子树（若存在），所以新节点入队时候将额外带上出队的层次+1；</li><li>最后出队的值会判断是否存在当前层次的value，若没有则<code>ans</code>当前层次初始化一个，若有则<code>ans[当前层次].append()</code>。</li></ol><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><ol><li><p>Python</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        ans, queue = [], [[root, <span class="hljs-number">0</span>]]<br>        <br>        <span class="hljs-keyword">while</span> queue:<br>            item = queue.pop(<span class="hljs-number">0</span>)<br>            cur = item[<span class="hljs-number">0</span>]<br>            pos = item[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> cur.left:<br>                queue.append([cur.left, pos + <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> cur.right:<br>                queue.append([cur.right, pos + <span class="hljs-number">1</span>])<br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ans) &lt;= pos:<br>                ans.append([cur.val])<br>            <span class="hljs-keyword">else</span>:<br>                ans[pos].append(cur.val)<br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></tbody></table></figure></li><li><p>JS/TS</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">root: TreeNode | <span class="hljs-literal">null</span></span>): <span class="hljs-built_in">number</span>[][] {<br>    <span class="hljs-keyword">if</span>(!root)<br>    <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">const</span> ans = &lt;number[][]&gt;[];<br>    const queue = [[root, 0]];<br><br>    while(queue.length) {<br>        let item = queue.shift();<br>        let cur = &lt;TreeNode&gt;item[0];<br>        let pos = &lt;number&gt;item[1];<br><br>        if(cur.left){<br>            queue.push([cur.left, pos+1]);<br>        }<br>        if(cur.right){<br>            queue.push([cur.right, pos+1]);<br>        }<br><br>        if(ans.length&lt;=pos){<br>            ans.push([cur.val]);<br>        }<br>        else{<br>            ans[pos].push(cur.val);<br>        }<br>    }<br><br>    return ans; <br>};<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="剑指-offer-32-iii-从上到下打印二叉树-iii"><a href="#剑指-Offer-32-III-从上到下打印二叉树-III" class="headerlink" title="剑指 Offer 32 - III. 从上到下打印二叉树 III"></a><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></h2><h3 id="题目描述"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p><ul><li><p>实例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">例如:<br>给定二叉树:&nbsp;[<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">20</span>,null,null,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>],<br><br>    <span class="hljs-number">3</span><br>   / \<br>  <span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>    /  \<br>   <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br>返回其层次遍历结果：<br><br>[<br>  [<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">20</span>,<span class="hljs-number">9</span>],<br>  [<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]<br>]<br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>节点总数 &lt;= 1000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>​    步骤与第二题几乎完全一致，最后对<code>ans</code>进行一个简单的处理，倒转所有下标为奇数的列表即可。</p><h3 id="实现代码"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><ol><li><p>Python</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> []<br>        ans, queue = [], [[root, <span class="hljs-number">0</span>]]<br>        <br>        <span class="hljs-keyword">while</span> queue:<br>            item = queue.pop(<span class="hljs-number">0</span>)<br>            cur = item[<span class="hljs-number">0</span>]<br>            pos = item[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> cur.left:<br>                queue.append([cur.left, pos + <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">if</span> cur.right:<br>                queue.append([cur.right, pos + <span class="hljs-number">1</span>])<br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ans) &lt;= pos:<br>                ans.append([cur.val])<br>            <span class="hljs-keyword">else</span>:<br>                ans[pos].append(cur.val)<br><br>        <span class="hljs-keyword">for</span> index, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ans):<br>            <span class="hljs-keyword">if</span> index%<span class="hljs-number">2</span>:<br>                a.reverse()<br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></tbody></table></figure></li><li><p>Typescript</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">root: TreeNode | <span class="hljs-literal">null</span></span>): <span class="hljs-built_in">number</span>[][] {<br>    <span class="hljs-keyword">if</span>(!root)<br>    <span class="hljs-keyword">return</span> []<br>    <span class="hljs-keyword">const</span> ans = &lt;number[][]&gt;[];<br>    const queue = [[root, 0]];<br><br>    while(queue.length) {<br>        let item = queue.shift();<br>        let cur = &lt;TreeNode&gt;item[0];<br>        let pos = &lt;number&gt;item[1];<br><br>        if(cur.left){<br>            queue.push([cur.left, pos+1]);<br>        }<br>        if(cur.right){<br>            queue.push([cur.right, pos+1]);<br>        }<br><br>        if(ans.length&lt;=pos){<br>            ans.push([cur.val]);<br>        }<br>        else{<br>            ans[pos].push(cur.val);<br>        }<br>    }<br><br>    for(let [index,value] of ans.entries()){<br>        if(index%2){<br>            value.reverse();<br>        }<br>    }<br><br>    return ans; <br>};<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
    
    
    <summary type="html">LeetCode</summary>
    
    
    
    
    <category term="🐲LeetCode" scheme="http://dayswithvenki.top/tags/%F0%9F%90%B2LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记5</title>
    <link href="http://dayswithvenki.top/posts/c8e4425f.html"/>
    <id>http://dayswithvenki.top/posts/c8e4425f.html</id>
    <published>2023-01-04T16:00:00.000Z</published>
    <updated>2023-04-08T04:14:08.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-剑指offer"><a href="#LeetCode-剑指Offer" class="headerlink" title="LeetCode 剑指Offer"></a><a href="&quot;https://leetcode.cn/study-plan/lcof/?progress=bqubfyc&quot;">LeetCode 剑指Offer</a></h1><h2 id="剑指-offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    在一个<code>n * m</code>的二维数组中，每一行都按照从左到右 非递减 的顺序排序，每一列都按照从上到下 非递减 的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">现有矩阵 matrix 如下：<br>[<br>  [<span class="hljs-number">1</span>,   <span class="hljs-number">4</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>],<br>  [<span class="hljs-number">2</span>,   <span class="hljs-number">5</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>],<br>  [<span class="hljs-number">3</span>,   <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>],<br>  [<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">24</span>],<br>  [<span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">30</span>]<br>]<br><br>给定 target&nbsp;=&nbsp;<span class="hljs-number">5</span>，返回&nbsp;true。<br>给定&nbsp;target&nbsp;=&nbsp;<span class="hljs-number">20</span>，返回&nbsp;false。<br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>0 &lt;= m &lt;= 1000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>解题思路:</p><ol><li><p>直接遍历 —— 时间复杂度<code>O(nm)</code>， 空间复杂度<code>O(1)</code>；</p></li><li><p>每行二分查找 —— 时间复杂度<code>O(nlogm)</code>， 空间复杂度<code>O(1)</code>；</p></li><li><p>Z字查找/二叉排序树 —— 时间复杂度<code>O(n+m)</code>， 空间复杂度<code>O(1)</code>。</p><p>二叉排序树构建过程，将第一行的最后一列作为二叉树的根节点。</p><p><img src="https://pic.leetcode-cn.com/6584ea93812d27112043d203ea90e4b0950117d45e0452d0c630fcb247fbc4af-Picture1.png" alt="Picture1.png"></p><p>​    此时，树的左孩子永远比父节点小，右孩子会比父节点大。</p><p>​    遍历过程中，若当前节点的值小于目标值<code>target</code>，则遍历该节点的右孩子；当大于<code>target</code>则遍历左孩子，若相等则返回<code>True</code>。当i&lt;0或j&gt;=len(matrix)时仍未找到，说明不存在<code>target</code>，返回<code>False</code>。</p><p>​    由于是将数组视为二叉树，所以当<code>i--</code>的时候，相当于遍历左子树，当<code>j++</code>时遍历右子树。</p></li></ol></li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findNumberIn2DArray</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-comment"># 直接遍历 O(nm) O(1)</span><br>        <span class="hljs-comment"># for row in matrix:</span><br>        <span class="hljs-comment">#     for item in row:</span><br>        <span class="hljs-comment">#         if item == target:</span><br>        <span class="hljs-comment">#             return True</span><br>        <span class="hljs-comment"># return False</span><br><br>        <span class="hljs-comment"># 二分查找 O(nlogm) O(1)</span><br>        <span class="hljs-comment"># for row in matrix:</span><br>        <span class="hljs-comment">#     left, right = 0, len(row) - 1</span><br>        <span class="hljs-comment">#     while left &lt;= right:</span><br>        <span class="hljs-comment">#         mid = (left + right) // 2</span><br>        <span class="hljs-comment">#         if row[mid] == target:</span><br>        <span class="hljs-comment">#             return True</span><br>        <span class="hljs-comment">#         elif row[mid] &lt; target:</span><br>        <span class="hljs-comment">#             left = mid + 1</span><br>        <span class="hljs-comment">#         else:</span><br>        <span class="hljs-comment">#             right = mid - 1</span><br>        <span class="hljs-comment"># return False</span><br><br>        <span class="hljs-comment"># 搜索二叉树/Z字查找 O(m+n) O(1)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(matrix) == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        root_i, root_j =  <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])-<span class="hljs-number">1</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> root_i&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> root_j&lt;= <span class="hljs-built_in">len</span>(matrix)-<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> matrix[root_j][root_i] == target:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">elif</span> matrix[root_j][root_i] &lt; target:<br>                root_j += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                root_i -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></tbody></table></figure><h2 id="剑指-offer-11-旋转数组的最小数字简单"><a href="#剑指-Offer-11-旋转数组的最小数字（简单" class="headerlink" title="剑指 Offer 11. 旋转数组的最小数字（简单)"></a><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">剑指 Offer 11. 旋转数组的最小数字（简单)</a></h2><h2 id="154-寻找旋转排序数组中的最小值-ii困难"><a href="#154-寻找旋转排序数组中的最小值-II-困难" class="headerlink" title="154. 寻找旋转排序数组中的最小值 II(困难)"></a><a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii/">154. 寻找旋转排序数组中的最小值 II(困难)</a></h2><h3 id="题目描述"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>​    给你一个可能存在 重复 元素值的数组 numbers ，它原来是一个升序排列的数组，并按上述情形进行了一次旋转。请返回旋转数组的最小元素。例如，数组 <code>[3,4,5,1,2]</code> 为 <code>[1,2,3,4,5]</code> 的一次旋转，该数组的最小值为 1。  </p><p>​    注意，数组<code>[a[0], a[1], a[2], ..., a[n-1]]</code>旋转一次 的结果为数组<code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>。</p><ul><li><p>示例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">输入：numbers = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>输出：<span class="hljs-number">1</span><br><br>输入：numbers = [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>n == numbers.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>-5000 &lt;= numbers[i] &lt;= 5000</code></li><li><code>numbers</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p>调用API….. min,sorted…[当然不给用] 时间复杂度<code>O(n)</code></p></li><li><p>二分查找 时间复杂度<code>O(logn)</code></p><p>使用左右指针l,r记录首位位置，m为中间位置。</p><p>最小值一定在右排序数组中。</p><ul><li><p>当<code>nums[m]&lt;nums[r]</code>，说明此时m一定是在右排序数组中，因此<code>l = m + 1</code>，在m的右边继续搜索；</p></li><li><p>当<code>nums[m]&gt;nums[r]</code>，说明此时m一定在左排序数组中，因此<code>r = m</code>, 在m的左边搜索；</p></li><li><p>当<code>nums[m]==nums[r]</code>，无法判断m在哪一边，但是此时可以缩小数组的范围，令<code>r = r - 1</code>，此操作可能导致旋转点被去除，但是去除旋转点同时可以理解为在一个没有进行旋转的数组进行搜索，所以<code>r=r-1</code>操作可行。</p></li></ul></li></ol><p>   ==为什么不能与左侧端点l进行比较呢？==</p><p>   ​    原因在于： r的初始位置一定是在右排序数组中，而l的初始位置无法确定在哪个排序数组中</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minArray</span>(<span class="hljs-params">self, numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 排序返回第一个</span><br>        <span class="hljs-comment"># numbers = sorted(numbers)</span><br>        <span class="hljs-comment"># return numbers[0]</span><br><br>        <span class="hljs-comment"># ...min</span><br>        <span class="hljs-comment"># return min(numbers)</span><br><br>        <span class="hljs-comment"># 二分</span><br>        l,r = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(numbers)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> l&lt;r:<br>            m = (l + r) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> numbers[m] &gt; numbers[r]:<br>                l = m + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> numbers[m] == numbers[r]:<br>                r = r - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 小于</span><br>                r = m<br>        <span class="hljs-keyword">return</span> numbers[l]<br></code></pre></td></tr></tbody></table></figure><h2 id="剑指-offer-50-第一个只出现一次的字符"><a href="#剑指-Offer-50-第一个只出现一次的字符" class="headerlink" title="剑指 Offer 50. 第一个只出现一次的字符"></a><a href="https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/">剑指 Offer 50. 第一个只出现一次的字符</a></h2><h3 id="题目描述"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p><ul><li><p>示例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">输入：s = <span class="hljs-string">"abaccdeff"</span><br>输出：<span class="hljs-string">'b'</span><br><br>输入：s = <span class="hljs-string">""</span> <br>输出：<span class="hljs-string">' '</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>0 &lt;= s 的长度 &lt;= 50000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li>hash map</li></ol><h3 id="代码实现"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">firstUniqChar</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-comment"># if not len(s):</span><br>        <span class="hljs-comment">#     return " "</span><br>        <span class="hljs-comment"># hashmap = {}</span><br>        <span class="hljs-comment"># for c in s:</span><br>        <span class="hljs-comment">#     if c not in hashmap:</span><br>        <span class="hljs-comment">#         hashmap[c] = 1</span><br>        <span class="hljs-comment">#     else:</span><br>        <span class="hljs-comment">#         hashmap[c] = -1</span><br>        <span class="hljs-comment"># for key, val in hashmap.items():</span><br>        <span class="hljs-comment">#     if val == 1:</span><br>        <span class="hljs-comment">#         return key</span><br>        <span class="hljs-comment"># return " "</span><br><br>        <span class="hljs-comment"># 优化</span><br>        <span class="hljs-comment"># 不存出现的频次而是存True or False</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">len</span>(s):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">" "</span><br>        hashmap = {}<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> c <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> hashmap:<br>                hashmap[c] = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                hashmap[c] = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> key, val <span class="hljs-keyword">in</span> hashmap.items():<br>            <span class="hljs-keyword">if</span> val:<br>                <span class="hljs-keyword">return</span> key<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">" "</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">LeetCode</summary>
    
    
    
    
    <category term="🐲LeetCode" scheme="http://dayswithvenki.top/tags/%F0%9F%90%B2LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记4</title>
    <link href="http://dayswithvenki.top/posts/bfe372c9.html"/>
    <id>http://dayswithvenki.top/posts/bfe372c9.html</id>
    <published>2023-01-03T16:00:00.000Z</published>
    <updated>2023-04-08T04:13:59.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-剑指offer"><a href="#LeetCode-剑指Offer" class="headerlink" title="LeetCode 剑指Offer"></a><a href="&quot;https://leetcode.cn/study-plan/lcof/?progress=bqubfyc&quot;">LeetCode 剑指Offer</a></h1><h2 id="剑指-offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    找出数组中重复的数字。</p><p>​    在一个长度为 n 的数组 <code>nums</code> 里的所有数字都在 <code>0～n-1</code> 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">输入：<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]<br>输出：<span class="hljs-number">2</span> 或 <span class="hljs-number">3</span> <br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>2 &lt;= n &lt;= 100000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>解题思路:</p><ol><li>使用辅助空间，哈希表；</li><li>交换位置，以数组本身作为哈希表。</li></ol></li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 哈希表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findRepeatNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dic = {}<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> num <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dic:<br>                dic[num] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> num<br>            <br><span class="hljs-comment"># 交换位置</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findRepeatNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(nums):<br>            <span class="hljs-keyword">if</span> i == nums[i]:<br>                i += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> nums[nums[i]] == nums[i]:<br>                <span class="hljs-keyword">return</span> nums[i]<br>            nums[nums[i]],nums[i] = nums[i], nums[nums[i]]<br></code></pre></td></tr></tbody></table></figure><h2 id="剑指-offer-53-i-在排序数组中查找数字-i"><a href="#剑指-Offer-53-I-在排序数组中查找数字-I" class="headerlink" title="剑指 Offer 53 - I. 在排序数组中查找数字 I"></a><a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></h2><h3 id="题目描述"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    统计一个数字在排序数组中出现的次数。</p><ul><li><p>实例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">输入: nums = [<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>], target = <span class="hljs-number">8</span><br>输出: <span class="hljs-number">2</span><br>    <br>输入: nums = [<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>], target = <span class="hljs-number">6</span><br>输出: <span class="hljs-number">0</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>0 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>nums</code>是一个非递减数组</li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p>哈希表/遍历计数</p></li><li><p>双指针中间逼近</p></li><li><p>二分法</p><p>其中 二分法为双指针法的优化，从<code>O(n/2)</code>=&gt; <code>O(logn)</code></p></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 解法1</span><br>        <span class="hljs-built_in">hash</span> = {}<br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>             <span class="hljs-keyword">if</span> num <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">hash</span>:<br>                 <span class="hljs-built_in">hash</span>[num] = <span class="hljs-number">1</span><br>             <span class="hljs-keyword">else</span>:<br>                 <span class="hljs-built_in">hash</span>[num] += <span class="hljs-number">1</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>.get(target, <span class="hljs-number">0</span>)<br><br>        <span class="hljs-comment"># 解法2</span><br>         <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>         <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>             <span class="hljs-keyword">if</span> num == target:<br>                 <span class="hljs-built_in">sum</span> += <span class="hljs-number">1</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br>        <span class="hljs-comment"># 解法3 双指针法</span><br>         left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>         <span class="hljs-keyword">while</span> left &lt;= right:<br>             <span class="hljs-keyword">if</span> nums[left] &gt; target <span class="hljs-keyword">or</span> nums[right] &lt; target:<br>                 <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>             <span class="hljs-keyword">if</span> nums[left] &lt; target:<br>                 left += <span class="hljs-number">1</span><br>             <span class="hljs-keyword">if</span> nums[right] &gt; target:<br>                 right -= <span class="hljs-number">1</span><br>             <span class="hljs-keyword">if</span> nums[left] == target <span class="hljs-keyword">and</span> nums[right] == target:<br>                 <span class="hljs-keyword">return</span> right - left + <span class="hljs-number">1</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>        <span class="hljs-comment"># 解法4 二分法</span><br>        <span class="hljs-comment"># 搜索右边界 right</span><br>        i, j = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i &lt;= j:<br>            m = (i + j) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[m] &lt;= target:<br>                i = m + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                j = m - <span class="hljs-number">1</span><br>        right = i<br><br>        <span class="hljs-keyword">if</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[j] != target:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 搜索左边界 left</span><br><br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt;= j:<br>            m = (i + j) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[m] &lt; target:<br>                i = m + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                j = m - <span class="hljs-number">1</span><br>        left = j<br>        <span class="hljs-keyword">return</span> right - left - <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h2 id="剑指-offer-53-ii-0~n-1中缺失的数字"><a href="#剑指-Offer-53-II-0～n-1中缺失的数字" class="headerlink" title="剑指 Offer 53 - II. 0～n-1中缺失的数字"></a><a href="https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/">剑指 Offer 53 - II. 0～n-1中缺失的数字</a></h2><h3 id="题目描述"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><ul><li><p>示例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">输入: [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br>输出: <span class="hljs-number">2</span><br>    <br>输入: [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>输出: <span class="hljs-number">8</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>限制</p><ul><li><code>1 &lt;= 数组长度 &lt;= 10000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><pre><code>1. 数学求和... 2. 双指针 3. 二分法: 找中值，如果中值的下标位置，`index == value`。说明中值前的值没问题，到中值后面的找，否则，到中值前找。</code></pre><h3 id="代码实现"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">missingNumber</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <br><span class="hljs-comment"># 数学求和 等差数列，首项为0，公差为1，项数为len(nums)+1</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(nums)*(<span class="hljs-built_in">len</span>(nums)+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span> - <span class="hljs-built_in">sum</span>(nums)<br>    <br><span class="hljs-comment"># 双指针</span><br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> nums[<span class="hljs-number">0</span>] != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> nums[-<span class="hljs-number">1</span>] != <span class="hljs-built_in">len</span>(nums):<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            <span class="hljs-keyword">if</span> nums[left+<span class="hljs-number">1</span>] - nums[left] != <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> nums[left] + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> nums[right] - nums[right-<span class="hljs-number">1</span>] != <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> nums[right-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>            left,right = left + <span class="hljs-number">1</span>, right -<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 二分法</span><br>        l, r = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> l &lt;= r:<br>            m = (l + r) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[m] == m:<br>                l = m + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                r = m - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> l<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">LeetCode</summary>
    
    
    
    
    <category term="🐲LeetCode" scheme="http://dayswithvenki.top/tags/%F0%9F%90%B2LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记3</title>
    <link href="http://dayswithvenki.top/posts/2187e76a.html"/>
    <id>http://dayswithvenki.top/posts/2187e76a.html</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-04-08T04:13:52.388Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-剑指offer"><a href="#LeetCode-剑指Offer" class="headerlink" title="LeetCode 剑指Offer"></a><a href="&quot;https://leetcode.cn/study-plan/lcof/?progress=bqubfyc&quot;">LeetCode 剑指Offer</a></h1><h2 id="剑指-offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">输入：head = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>]<br>输出：[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>]<br></code></pre></td></tr></tbody></table></figure></li><li><p>限制</p><ul><li>0 &lt;= 链表长度 &lt;= 10000</li></ul></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>解题思路:</p><ol><li>申请辅助空间。</li><li>调用原生API。</li></ol></li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><ol><li><p>Python解法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 申请辅助空间</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">replaceSpace</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        arr = []<br>        <span class="hljs-keyword">for</span> sub <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> sub == <span class="hljs-string">" "</span>:<br>                arr.append(<span class="hljs-string">'%20'</span>)<br>            <span class="hljs-keyword">else</span>:<br>                arr.append(sub)<br>        res = <span class="hljs-string">''</span><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> arr:<br>            res += item<br>        <span class="hljs-keyword">return</span> res<br><br><span class="hljs-comment"># 调用原生API</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">replaceSpace</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> s.replace(<span class="hljs-string">" "</span>, <span class="hljs-string">"%20"</span>)<br></code></pre></td></tr></tbody></table></figure></li><li><p>JS/TS解法</p><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 调用原生API replace</span><br><span class="hljs-comment">// JS/TS Replace 与 Python Replace不同，JS Replace只替换第一个，需要用正则表达式。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">replaceSpace</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span> {<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">"%20"</span>);<br>};<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="剑指-offer-58-ii-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></h2><h3 id="题目描述"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">输入: s = <span class="hljs-string">"abcdefg"</span>, k = <span class="hljs-number">2</span><br>输出: <span class="hljs-string">"cdefgab"</span><br>    <br>输入: s = <span class="hljs-string">"lrloseumgh"</span>, k = <span class="hljs-number">6</span><br>输出: <span class="hljs-string">"umghlrlose"</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>限制</p><ul><li><code>1 &lt;= k &lt; s.length &lt;= 10000</code></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>解题思路:</p><ol><li>切片/调用原生API；</li><li>若不允许切片则创建辅助空间。</li></ol></li></ul><h3 id="实现代码"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><ol><li>Python解法</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 切片</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseLeftWords</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> s[n:] + s[:n]<br>    <br><span class="hljs-comment"># 创建辅助空间</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseLeftWords</span>(<span class="hljs-params">self, s:<span class="hljs-built_in">str</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        pre,post = <span class="hljs-string">""</span>,<span class="hljs-string">""</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> i &lt; n:<br>                post += s[i]<br>            <span class="hljs-keyword">else</span>:<br>                pre += s[i]<br>        <span class="hljs-keyword">return</span> pre + post<br></code></pre></td></tr></tbody></table></figure><ol><li>Js/Ts解法</li></ol><figure class="highlight typescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverseLeftWords</span>(<span class="hljs-params">s: <span class="hljs-built_in">string</span>, n: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">string</span> {<br>    <span class="hljs-comment">// return s.substring(n,s.length) + s.substr(0,n);</span><br>    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">slice</span>(n, s.<span class="hljs-property">length</span>) + s.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, n);<br>};<br></code></pre></td></tr></tbody></table></figure><h1 id="leetcode-热题-hot-100"><a href="#🔥-LeetCode-热题-HOT-100" class="headerlink" title="🔥 LeetCode 热题 HOT 100"></a>🔥 <a href="&quot;https://leetcode.cn/problem-list/2cktkvj/&quot;">LeetCode 热题 HOT 100</a></h1><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h2><h3 id="题目描述"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'{'</code>，<code>'}'</code>，<code>'['</code>，<code>']'</code>的字符串<code>s</code> ，判断字符串是否有效。</p><p>​    有效字符串需满足：</p><p>​    1. 左括号必须用相同类型的右括号闭合。<br>​    2. 左括号必须以正确的顺序闭合。<br>​    3. 每个右括号都有一个对应的相同类型的左括号</p><ul><li><p>实例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">输入：s = <span class="hljs-string">"()"</span><br>输出：true<br><br>输入：s = <span class="hljs-string">"()[]{}"</span><br>输出：true<br><br>输入：s = <span class="hljs-string">"(]"</span><br>输出：false<br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 仅由括号 <code>'()[]{}'</code> 组成</li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>解题思路</p><p>使用辅助栈，字符串长度为奇数则<code>False</code>，否则遍历字符串，当前为左括号的时候入栈，当右括号时，判断栈顶元素是否匹配括号，匹配则<code>pop</code>栈顶元素，否则，<code>return False</code>；最后判断栈是否还存有元素(即是否有左括号尚未被匹配)，有则<code>False</code>。</p></li></ul><h3 id="实现代码"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)%<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        stack = []<br>        left = [<span class="hljs-string">'('</span>, <span class="hljs-string">'{'</span>, <span class="hljs-string">'['</span>]<br>        <span class="hljs-keyword">for</span> sub <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> sub <span class="hljs-keyword">in</span> left:<br>                stack.append(sub)<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">len</span>(stack):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> sub == <span class="hljs-string">')'</span> <span class="hljs-keyword">and</span> stack[-<span class="hljs-number">1</span>] != <span class="hljs-string">'('</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> sub == <span class="hljs-string">']'</span> <span class="hljs-keyword">and</span> stack[-<span class="hljs-number">1</span>] != <span class="hljs-string">'['</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> sub == <span class="hljs-string">'}'</span> <span class="hljs-keyword">and</span> stack[-<span class="hljs-number">1</span>] != <span class="hljs-string">'{'</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            stack.pop()<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">len</span>(stack)<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">LeetCode</summary>
    
    
    
    
    <category term="🐲LeetCode" scheme="http://dayswithvenki.top/tags/%F0%9F%90%B2LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记2</title>
    <link href="http://dayswithvenki.top/posts/5680d7fc.html"/>
    <id>http://dayswithvenki.top/posts/5680d7fc.html</id>
    <published>2023-01-01T16:00:00.000Z</published>
    <updated>2023-04-08T04:13:45.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-剑指offer"><a href="#LeetCode-剑指Offer" class="headerlink" title="LeetCode 剑指Offer"></a><a href="&quot;https://leetcode.cn/study-plan/lcof/?progress=bqubfyc&quot;">LeetCode 剑指Offer</a></h1><h2 id="剑指-offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">输入：s = <span class="hljs-string">"We are happy."</span><br>输出：<span class="hljs-string">"We%20are%20happy."</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>限制</p><ul><li>0 &lt;= s 的长度 &lt;= 10000</li></ul></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>解题思路:</p><ol><li>遍历链表压入栈，最后返回依次出栈的数组。</li><li>递归遍历链表，遍历到底后压入<code>vector</code>。</li></ol></li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><ol><li><p>Python解法</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reversePrint</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        res = []<br>        <span class="hljs-keyword">while</span> head:<br>            res.append(head.val)<br>            head = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> res[::-<span class="hljs-number">1</span>]<br></code></pre></td></tr></tbody></table></figure></li><li><p>C++解法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode {</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) {}</span><br><span class="hljs-comment"> * };</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br>vector&lt;<span class="hljs-type">int</span>&gt; a;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">reversePrint</span><span class="hljs-params">(ListNode* head)</span> </span>{<br>        <span class="hljs-keyword">if</span>(!head) <br>            <span class="hljs-keyword">return</span> a;<br>        <span class="hljs-built_in">reversePrint</span>(head-&gt;next);<br>        arr.<span class="hljs-built_in">push_back</span>(head-&gt;val);<br>        <span class="hljs-keyword">return</span> a;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure></li></ol><h2 id="剑指-offer-24-反转链表"><a href="#剑指-Offer-24-反转链表" class="headerlink" title="剑指 Offer 24. 反转链表"></a><a href="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer 24. 反转链表</a></h2><h3 id="题目描述"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><ul><li><p>实例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">输入: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;NULL<br>输出: <span class="hljs-number">5</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;NULL<br></code></pre></td></tr></tbody></table></figure></li><li><p>限制</p><ul><li>0 &lt;= 节点个数 &lt;= 5000</li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>解题思路:</li></ul><p>​    1. 申请动态扩容容器辅助；</p><p>​    2. 双指针法:每次遍历当前指针<code>cur</code>与上一个指针<code>pre</code>的<code>next</code>互换位置；空间<code>O(1)</code></p><p>​    3. ==递归==：<code>head-&gt;next-&gt;next = head</code></p><p><img src="https://pic.leetcode-cn.com/dacd1bf55dec5c8b38d0904f26e472e2024fc8bee4ea46e3aa676f340ba1eb9d-%E9%80%92%E5%BD%92.gif" alt="递归.gif">        </p><ul><li>递归的终止条件为<code>head==None or head.next==None</code>;</li><li><code>cur</code>为最后的返回结果，cur的第一个值为顺序链表的最后一个<code>Node</code>, 即当前<code>head</code>或<code>head.next</code>;</li><li><code>head.next.next = next</code>即<code>cur.next = head</code>与双指针类似。</li></ul><h3 id="实现代码"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><ol><li>C++解法</li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 双指针法:</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode {</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) {}</span><br><span class="hljs-comment"> * };</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>{<br>        ListNode *cur = head, *pre = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">nullptr</span>) {<br>            ListNode* temp = cur-&gt;next;<br>            cur-&gt;next = pre;<br>            pre = cur;<br>            cur = temp;<br>        }<br>        <span class="hljs-keyword">return</span> pre;<br>    }<br>};<br></code></pre></td></tr></tbody></table></figure><ol><li>Python解法</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 双指针法</span><br><br><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        cur,pre = head,<span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> cur:<br>            temp = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            pre = cur<br>            cur = temp<br>        <span class="hljs-keyword">return</span> pre<br>        <br>    <br><span class="hljs-comment"># 递归法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> head.<span class="hljs-built_in">next</span>==<span class="hljs-literal">None</span>):<br>            <span class="hljs-keyword">return</span> head<br>        cur = self.reverseList(head.<span class="hljs-built_in">next</span>)<br>        head.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> = head<br>        head.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> cur<br></code></pre></td></tr></tbody></table></figure><h2 id="剑指-offer-35-复杂链表的复制"><a href="#剑指-Offer-35-复杂链表的复制" class="headerlink" title="剑指 Offer 35. 复杂链表的复制"></a><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/">剑指 Offer 35. 复杂链表的复制</a></h2><h3 id="题目描述"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>题目描述</li></ul><p>​    请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png" alt="img"></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png" alt="img"></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png" alt="img"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 实例</span><br>输入：head = [[<span class="hljs-number">7</span>,null],[<span class="hljs-number">13</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">11</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">10</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]]<br>输出：[[<span class="hljs-number">7</span>,null],[<span class="hljs-number">13</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">11</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">10</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]]<br><br>输入：head = [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]]<br>输出：[[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]]<br><br>输入：head = [[<span class="hljs-number">3</span>,null],[<span class="hljs-number">3</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">3</span>,null]]<br>输出：[[<span class="hljs-number">3</span>,null],[<span class="hljs-number">3</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">3</span>,null]]<br><br>输入: head = []<br>输出: []<br></code></pre></td></tr></tbody></table></figure><ul><li>提示<ul><li><code>-10000 &lt;= Node.val &lt;= 10000</code></li><li><code>Node.random</code> 为空（null）或指向链表中的节点。</li><li>节点数目不超过 1000 。</li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>解题思路</p><ul><li>对链表进行深拷贝。</li></ul><p>==首先看：普通链表的拷贝==</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span>, <span class="hljs-built_in">next</span>: <span class="hljs-string">'Node'</span> = <span class="hljs-literal">None</span></span>):<br>        self.val = <span class="hljs-built_in">int</span>(x)<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copyList</span>(<span class="hljs-params">self, head: <span class="hljs-string">'Node'</span></span>) -&gt; <span class="hljs-string">'Node'</span>:<br>        cur = head<br>        dum = pre = Node(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">while</span> cur:<br>            node = Node(cur.val)<br>            pre.<span class="hljs-built_in">next</span> = node<br>            cur = cur.<span class="hljs-built_in">next</span><br>            pre = node<br>        <span class="hljs-keyword">return</span> dum<br></code></pre></td></tr></tbody></table></figure><p>==本题的链表结构==</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x:<span class="hljs-built_in">int</span> ,<span class="hljs-built_in">next</span>: <span class="hljs-string">'Node'</span> = <span class="hljs-literal">None</span>, random: <span class="hljs-string">'Node'</span> = <span class="hljs-literal">None</span></span>):<br>        self.val = <span class="hljs-built_in">int</span>(x)<br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-built_in">next</span><br>        self.random = random<br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copyRandomList</span>(<span class="hljs-params">self, head: <span class="hljs-string">'Node'</span></span>) -&gt; <span class="hljs-string">'Node'</span>:<br>                cur = head<br>        dum = pre = Node(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">while</span> cur:<br>            node = Node(cur.val)<br>            pre.<span class="hljs-built_in">next</span> = node<br>            <span class="hljs-comment"># pre.random = ??? # 无法获取当前链表的Random节点</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>            pre = node<br>        <span class="hljs-keyword">return</span> dum<br></code></pre></td></tr></tbody></table></figure></li></ul><p>因此:</p><ol><li><p><code>hashMap</code>构造法（时间复杂度<code>O(n)</code>, 空间复杂度<code>O(n)</code>)</p><p>考虑到新链表与旧链表存在一一对应的关系，所以构建原链表-&gt;新链表的映射关系，再遍历原链表来构建新链表的<code>next</code>与<code>random</code>拷贝进新链表中。</p><p><img src="https://pic.leetcode-cn.com/1604747285-gKnCSl-Picture7.png" alt="img"></p></li><li><p>拼接+拆分法（时间复杂度<code>O(n)</code>, 空间复杂度<code>O(1)</code>)</p><p>(1) 复制原来的各个节点, 构建拼接链表</p><p>(2) 构建新链表各个节点的<code>random</code>指向</p><p>(3) 拆分原/新链表</p><p>(4) 返回新链表的头节点<code>res</code>即可</p><p><img src="https://pic.leetcode-cn.com/1604747742-aMDdkM-Picture14.png" alt="img"></p></li></ol><h3 id="实现代码"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># hashmap法</span><br><span class="hljs-string">"""</span><br><span class="hljs-string"># Definition for a Node.</span><br><span class="hljs-string">class Node:</span><br><span class="hljs-string">    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):</span><br><span class="hljs-string">        self.val = int(x)</span><br><span class="hljs-string">        self.next = next</span><br><span class="hljs-string">        self.random = random</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copyRandomList</span>(<span class="hljs-params">self, head: <span class="hljs-string">'Node'</span></span>) -&gt; <span class="hljs-string">'Node'</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>            <span class="hljs-keyword">return</span><br>        hashmap = {}<br>        cur = head<br>        <span class="hljs-keyword">while</span> cur:<br>            hashmap[cur] = Node(cur.val)<br>            cur = cur.<span class="hljs-built_in">next</span><br>        cur = head<br>        <span class="hljs-keyword">while</span> cur:<br>            hashmap[cur].<span class="hljs-built_in">next</span> = hashmap.get(cur.<span class="hljs-built_in">next</span>)<br>            hashmap[cur].random = hashmap.get(cur.random)<br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> hashmap[head]<br>    <br><br><span class="hljs-comment"># 拼接/拆分法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">copyRandomList</span>(<span class="hljs-params">self, head: <span class="hljs-string">'Node'</span></span>) -&gt; <span class="hljs-string">'Node'</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>            <span class="hljs-keyword">return</span><br>        cur = head<br>        <span class="hljs-comment"># 复制节点</span><br>        <span class="hljs-keyword">while</span> cur:<br>            temp = Node(cur.val)<br>            temp.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = temp<br>            cur = temp.<span class="hljs-built_in">next</span><br><br>        <span class="hljs-comment"># 拷贝源节点的random给新节点</span><br>        cur = head<br>        <span class="hljs-keyword">while</span> cur:<br>            <span class="hljs-comment"># 判断是否非None</span><br>            <span class="hljs-keyword">if</span> cur.random:<br>                <span class="hljs-comment"># 之所以后半要取random.next而不是random在于需要链接的random为拷贝的新节点，即random.next</span><br>                cur.<span class="hljs-built_in">next</span>.random = cur.random.<span class="hljs-built_in">next</span><br>            cur = cur.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>        <br>        <span class="hljs-comment"># 分离所需新链表, 新链表头节点为head的拷贝节点</span><br>        res = cur = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span>:<br>            cur.<span class="hljs-built_in">next</span> = cur.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></tbody></table></figure><h2 id="202323-今日收获"><a href="#2023-2-3-今日收获" class="headerlink" title="2023.2.3 今日收获"></a>2023.2.3 今日收获</h2><p>今天的题目属于 链表 的基础数据结构。</p><p>​    第一、二题都比较简单，根据昨天的经验，可以申请一个辅助容器(栈)来协助所需操作，当然也可以通过递归的方法，先递归到最深的节点，最后再倒序</p><p>​    第三题的话涉及到一个深拷贝的问题，解决的办法是与简单链表进行对比，查看所需步骤的区别，最后是通过哈希表/拼接拆分法来解决问题。</p>]]></content>
    
    
    <summary type="html">LeetCode</summary>
    
    
    
    
    <category term="🐲LeetCode" scheme="http://dayswithvenki.top/tags/%F0%9F%90%B2LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode刷题笔记1</title>
    <link href="http://dayswithvenki.top/posts/3c79af21.html"/>
    <id>http://dayswithvenki.top/posts/3c79af21.html</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-04-05T12:59:08.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-剑指offer"><a href="#LeetCode-剑指Offer" class="headerlink" title="LeetCode 剑指Offer"></a><a href="&quot;https://leetcode.cn/study-plan/lcof/?progress=bqubfyc&quot;">LeetCode 剑指Offer</a></h1><h2 id="剑指-offer-09-用两个栈实现队列"><a href="#剑指-Offer-09-用两个栈实现队列" class="headerlink" title="剑指 Offer 09. 用两个栈实现队列"></a><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指 Offer 09. 用两个栈实现队列</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 <code>appendTail</code> 和 <code>deleteHead</code>，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，<code>deleteHead</code> 操作返回-1 )</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 实例1：</span><br><span class="hljs-comment"># 输入：</span><br>[<span class="hljs-string">"CQueue"</span>,<span class="hljs-string">"appendTail"</span>,<span class="hljs-string">"deleteHead"</span>,<span class="hljs-string">"deleteHead"</span>,<span class="hljs-string">"deleteHead"</span>]<br>[[],[<span class="hljs-number">3</span>],[],[],[]]<br><span class="hljs-comment"># 输出：</span><br>[null,null,<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 实例2：</span><br><span class="hljs-comment"># 输入：</span><br>[<span class="hljs-string">"CQueue"</span>,<span class="hljs-string">"deleteHead"</span>,<span class="hljs-string">"appendTail"</span>,<span class="hljs-string">"appendTail"</span>,<span class="hljs-string">"deleteHead"</span>,<span class="hljs-string">"deleteHead"</span>]<br>[[],[],[<span class="hljs-number">5</span>],[<span class="hljs-number">2</span>],[],[]]<br><span class="hljs-comment"># 输出：</span><br>[null,-<span class="hljs-number">1</span>,null,null,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>]<br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>1 &lt;= values &lt;= 10000</code></li><li>最多会对<code>appendTail、deleteHead</code>进行<code>10000</code> 次调用</li></ul></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>对于输入输出样例的解释：</p><p>​    输入上半对应的是操作函数名，下半指的是对应的参数。</p><p>比如:</p><ol><li><code>["CQueue","appendTail","deleteHead","deleteHead","deleteHead"]</code><br><code>[[],[3],[],[],[]]</code></li></ol><p>​    则是 <code>CQueue()</code>-&gt;<code>appendTai(3)</code>-&gt;<code>deleteHead()</code>-&gt;<code>deleteHead()</code>-&gt;<code>deleteHead()</code></p><ol><li><p><code>["CQueue","deleteHead","appendTail","appendTail","deleteHead","deleteHead"]</code></p><p><code>[[],[],[5],[2],[],[]]</code></p><p>则是<code>CQueue()</code>-&gt;<code>deleteHead()</code>-&gt;<code>appendTail(5)</code>-&gt;<code>appendTail(2)</code>-&gt;<code>deleteHead()</code>-&gt;<code>deleteHead()</code></p></li></ol></li><li><p>解题思路:</p><p>   即通过两个栈实现一个队列的操作，由于单独一个栈无法实现出队，因此设栈A负责入队，栈B辅助出队。</p><ul><li>入队：直接push入栈A即可。</li><li>出队：将栈A栈顶元素依次push入栈B，最后将栈B的顶部元素pop出来，最后将栈B栈顶元素依次push回栈A即可。</li></ul></li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CQueue</span> {<br><span class="hljs-keyword">public</span>:<br>    stack&lt;<span class="hljs-type">int</span>&gt; stackA;<br>    stack&lt;<span class="hljs-type">int</span>&gt; stackB;<br>    <span class="hljs-built_in">CQueue</span>() {}<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">appendTail</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>{<br>        stackA.<span class="hljs-built_in">push</span>(value);<br>    }<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">deleteHead</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span>(stackA.<span class="hljs-built_in">empty</span>()) <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(!stackA.<span class="hljs-built_in">empty</span>()){<br>            <span class="hljs-type">int</span> temp = stackA.<span class="hljs-built_in">top</span>();<br>            stackA.<span class="hljs-built_in">pop</span>();<br>            stackB.<span class="hljs-built_in">push</span>(temp);<br>        }<br>        <span class="hljs-type">int</span> res = stackB.<span class="hljs-built_in">top</span>();<br>        stackB.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">while</span>(!stackB.<span class="hljs-built_in">empty</span>()){<br>            <span class="hljs-type">int</span> temp = stackB.<span class="hljs-built_in">top</span>();<br>            stackB.<span class="hljs-built_in">pop</span>();<br>            stackA.<span class="hljs-built_in">push</span>(temp);<br>        }<br>        <span class="hljs-keyword">return</span> res;<br>    }<br>};<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your CQueue object will be instantiated and called as such:</span><br><span class="hljs-comment"> * CQueue* obj = new CQueue();</span><br><span class="hljs-comment"> * obj-&gt;appendTail(value);</span><br><span class="hljs-comment"> * int param_2 = obj-&gt;deleteHead();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><h2 id="剑指-offer-30-包含min函数的栈"><a href="#剑指-Offer-30-包含min函数的栈" class="headerlink" title="剑指 Offer 30. 包含min函数的栈"></a><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指 Offer 30. 包含min函数的栈</a></h2><h3 id="题目描述"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">MinStack minStack = new MinStack();<br>minStack.push(-<span class="hljs-number">2</span>);<br>minStack.push(<span class="hljs-number">0</span>);<br>minStack.push(-<span class="hljs-number">3</span>);<br>minStack.<span class="hljs-built_in">min</span>();   --&gt; 返回 -<span class="hljs-number">3.</span><br>minStack.pop();<br>minStack.top();   --&gt; 返回 <span class="hljs-number">0.</span><br>minStack.<span class="hljs-built_in">min</span>();   --&gt; 返回 -<span class="hljs-number">2.</span><br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li>各函数的调用总次数不超过 20000 次</li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>​    实际上和直接手写一个栈的数据结构类似，一般的栈<code>pop</code>与<code>push</code>的时间复杂度是<code>O(1)</code>，而<code>min</code>由于要遍历栈(数组)，因此时间复杂度为<code>O(n)</code>。</p><p>​    由于本题要求<code>min</code>的时间复杂度也要为<code>O(1)</code>，因此本题可用双栈的方法解决，使其时间复杂度最终也为<code>O(1)</code>。</p><ul><li><p>解题思路：</p><p>分为栈A与栈B两个栈：</p><p>​    其中栈A进行正常的<code>pop</code>与<code>push</code>操作，而栈B则<code>push</code>栈A每次进行入栈操作时的最小的数，并且当某个元素从栈A<code>pop</code>后，栈B也要同步进行<code>pop</code>的操作。</p><p>∴ 栈B<code>push</code>的逻辑为: 栈B空的时候，<code>push</code>栈A<code>push</code>的元素x，栈B非空时, <code>push</code>的value需要&lt;=栈B的栈顶元素； </p><p>​     <code>pop</code>的逻辑为: 若栈A<code>pop</code>的元素为栈B的栈顶元素时，栈B进行<code>pop</code>操作。</p><p>因次栈<code>minstack</code>与栈A栈B的关系为：</p><pre><code>1. `minstack.push/pop =&gt; A.push/pop =&gt; 根据条件再决定是否B.push/pop` 2. `minstack.top() == A.top()` 3. `minstack.min() == B.top()`</code></pre></li></ul><h3 id="实现代码"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        initialize your data structure here.</span><br><span class="hljs-string">        """</span><br>        self.stackA, self.stackB = [],[]<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.stackA.append(x)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.stackB <span class="hljs-keyword">or</span> self.stackB[-<span class="hljs-number">1</span>] &gt;= x:<br>            self.stackB.append(x)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> self.stackA.pop() == self.stackB[-<span class="hljs-number">1</span>]:<br>            self.stackB.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">top</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> self.stackA[-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">min</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> self.stackB[-<span class="hljs-number">1</span>]<br><br><br><span class="hljs-comment"># Your MinStack object will be instantiated and called as such:</span><br><span class="hljs-comment"># obj = MinStack()</span><br><span class="hljs-comment"># obj.push(x)</span><br><span class="hljs-comment"># obj.pop()</span><br><span class="hljs-comment"># param_3 = obj.top()</span><br><span class="hljs-comment"># param_4 = obj.min()</span><br></code></pre></td></tr></tbody></table></figure><h2 id="202322-今日收获"><a href="#2023-2-2-今日收获" class="headerlink" title="2023.2.2 今日收获"></a>2023.2.2 今日收获</h2><p>今天的题目属于 栈与队列 的基础数据结构。</p><p>​    第一道题是用栈实现队列的操作，第二道题是用空间换取时间。双栈的结合使用既可以模拟队列，又可以优化单栈操作的时间复杂度。第二道题没有用<code>C++</code>转为使用<code>Python</code>是因为<code>C++</code>定义链表的知识忘了很多… </p><p>​    回头第二题需要用<code>C++</code>链表重新写一遍栈的数据结构定义。</p><p>==补充==</p><p>​    …额，突然记起来C++内部其实有<code>Stack</code>的数据结构，这题并不需要用链表再定义<code>Stack</code>这么麻烦，补充C++写法如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> {<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>    stack&lt;<span class="hljs-type">int</span>&gt; stackA,stackB;<br>    <span class="hljs-built_in">MinStack</span>() {<br>    }<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{<br>        stackA.<span class="hljs-built_in">push</span>(x);<br>        <span class="hljs-keyword">if</span>(stackB.<span class="hljs-built_in">empty</span>() || stackB.<span class="hljs-built_in">top</span>() &gt;= x)<br>            stackB.<span class="hljs-built_in">push</span>(x);<br>    }<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">if</span>(stackA.<span class="hljs-built_in">top</span>()==stackB.<span class="hljs-built_in">top</span>()){<br>            stackA.<span class="hljs-built_in">pop</span>();<br>            stackB.<span class="hljs-built_in">pop</span>();<br>        }<br>        <span class="hljs-keyword">else</span> {<br>            stackA.<span class="hljs-built_in">pop</span>();<br>        }<br>    }<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> stackA.<span class="hljs-built_in">top</span>();<br>    }<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">min</span><span class="hljs-params">()</span> </span>{<br>        <span class="hljs-keyword">return</span> stackB.<span class="hljs-built_in">top</span>();<br>    }<br>};<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MinStack object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MinStack* obj = new MinStack();</span><br><span class="hljs-comment"> * obj-&gt;push(x);</span><br><span class="hljs-comment"> * obj-&gt;pop();</span><br><span class="hljs-comment"> * int param_3 = obj-&gt;top();</span><br><span class="hljs-comment"> * int param_4 = obj-&gt;min();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></tbody></table></figure><h1 id="leetcode-精选面试题"><a href="#LeetCode-精选面试题" class="headerlink" title="LeetCode 精选面试题"></a><a href="&quot;https://leetcode.cn/problem-list/2ckc81c/&quot;">LeetCode 精选面试题</a></h1><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></h2><h3 id="题目描述"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>​    给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>​    你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>​    你可以按任意顺序返回答案。</p><ul><li><p>实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 实例1</span><br><span class="hljs-comment"># 输入:</span><br>nums = [<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>], target = <span class="hljs-number">9</span><br><span class="hljs-comment"># 输出:</span><br>[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>    <br><span class="hljs-comment"># 实例2</span><br><span class="hljs-comment"># 输入:</span><br>nums = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>], target = <span class="hljs-number">6</span><br><span class="hljs-comment"># 输出:</span><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>    <br><span class="hljs-comment"># 实例3</span><br><span class="hljs-comment"># 输入:</span><br>nums = [<span class="hljs-number">3</span>,<span class="hljs-number">3</span>], target = <span class="hljs-number">6</span><br><span class="hljs-comment"># 输出:</span><br>[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br></code></pre></td></tr></tbody></table></figure></li><li><p>提示</p><ul><li><code>2 &lt;= nums.length &lt;= 10^4</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li><li><strong>只会存在一个有效答案</strong></li></ul></li></ul><h3 id="解题思路"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>​    利用Python <code>Dict</code>数据类型模拟<code>Hashmap</code>, 其中<code>Hashmap</code>的<code>key</code>为值<code>item</code>，<code>value</code>为下标<code>index</code>，存入<code>Hashmap</code>。</p><p>​        若遍历时<code>Hashmap</code>存在值为<code>target - 当前遍历的item</code>的<code>key</code>，则返回<code>[index, Hashmap[target-item]]</code>。</p><h3 id="实现代码"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwo</span>(<span class="hljs-params">self, nums, target</span>):<br>        Hashmap = {}<br>        <span class="hljs-keyword">for</span> index, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> target - item <span class="hljs-keyword">in</span> Hashmap:<br>                <span class="hljs-keyword">return</span> [index, Hashmap[target-item]]<br>            Hashmap[item] = index<br></code></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">LeetCode</summary>
    
    
    
    
    <category term="🐲LeetCode" scheme="http://dayswithvenki.top/tags/%F0%9F%90%B2LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>OS LAB4 实验报告</title>
    <link href="http://dayswithvenki.top/posts/os-lab4.html"/>
    <id>http://dayswithvenki.top/posts/os-lab4.html</id>
    <published>2022-10-31T16:00:00.000Z</published>
    <updated>2023-04-08T04:31:37.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lab4文件系统"><a href="#Lab4文件系统" class="headerlink" title="Lab4文件系统"></a>Lab4文件系统</h2><h3 id="0-实验前切换至lab2分支"><a href="#0-实验前：切换至Lab2分支" class="headerlink" title="0.  实验前：切换至Lab2分支"></a>0.  实验前：切换至Lab2分支</h3><p>在xv6-labs-2021文件夹下运行终端，并且运行以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git fetch<br>$ git checkout fs<br>$ make clean<br></code></pre></td></tr></tbody></table></figure><h3 id="1-对-xv6-文件系统添加大文件的支持"><a href="#1-对-xv6-文件系统添加“大文件”的支持" class="headerlink" title="1. 对 xv6 文件系统添加“大文件”的支持"></a>1. 对 xv6 文件系统添加“大文件”的支持</h3><h4 id="11-large-files"><a href="#1-1-Large-files" class="headerlink" title="1.1 Large files"></a>1.1 Large files</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs english">Modify bmap() so that it implements a doubly-indirect block, in addition to direct blocks and a singly-indirect block. You'll have to have only 11 direct blocks, rather than 12, to make room for your new doubly-indirect block; you're not allowed to change the size of an on-disk inode. The first 11 elements of ip-&gt;addrs[] should be direct blocks; the 12th should be a singly-indirect block (just like the current one); the 13th should be your new doubly-indirect block. You are done with this exercise when bigfile writes 65803 blocks and usertests runs successfully:<br></code></pre></td></tr></tbody></table></figure><h5 id="111-解题过程"><a href="#1-1-1-解题过程" class="headerlink" title="1.1.1 解题过程"></a>1.1.1 解题过程</h5><ul><li><p>修改 <code>kernel/fs.h</code> 中的直接块号的宏定义 <code>NDIRECT</code> 为 11;</p></li><li><p>修改 inode 相关结构体的块号数组,包括 <code>kernel/fs.h</code> 中的磁盘inode 结构体 <code>struct dinode</code>的 <code>addrs</code> ; </p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123212952833.png" alt="image-20221123212952833"></p></li><li><p><code>kernel/file.h</code> 中的内存inode 结构体 <code>struct inode</code> 的 <code>addrs</code> 将数组大小也改变为 <code>NDIRECT+2</code>, 因为 inode 的块号总数没有改变, 但 <code>NDIRECT</code> 减少了 1;</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123213216833.png" alt="image-20221123213216833"></p></li><li><p><code>kernel/fs.h</code>添加宏定义二级间接块号总数<code>NDOUBLYINDIRECT</code>，可表示的块号为一级间接块号<code>NINDIRECT</code>的平方;</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123214404675.png" alt="image-20221123214404675"></p></li><li><p><code>kernel/fs.c</code>中<code>bmap()</code>用于返回inode的相对块号对应的磁盘中的块号，由于 inode 结构中前 <code>NDIRECT</code> 个块号与修改前是一致的, 因此只需要添加对第 <code>NDIRECT</code> 即 13 个块的二级间接索引的处理代码;</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123214819646.png" alt="image-20221123214819646"></p></li><li><p>修改<code>kernel/fs.c</code>下的<code>itrunc()</code>，函数用于释放inode的数据块;</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123215938935.png" alt="image-20221123215938935"></p></li><li><p>修改<code>kernel/fs.h</code>中的<code>MAXFILE</code>。</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123215633324.png" alt="image-20221123215633324"></p></li></ul><h5 id="112-代码"><a href="#1-1-2-代码" class="headerlink" title="1.1.2 代码"></a>1.1.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// kernel/fs.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NDIRECT 11</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NDOUBLYINDIRECT (NINDIRECT * NINDIRECT)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXFILE (NDIRECT + NINDIRECT + NDOUBLYINDIRECT)</span><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dinode</span> {</span><br>    <span class="hljs-comment">// ...</span><br>    uint addrs[NDIRECT+<span class="hljs-number">2</span>];<br>}<br><br><span class="hljs-comment">// kernel/file.h</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> {</span><br>    <span class="hljs-comment">// ...</span><br>    uint addrs[NDIRECT+<span class="hljs-number">2</span>]<br>}<br><br><span class="hljs-comment">// kernel/fs.c</span><br><span class="hljs-type">static</span> uint<br><span class="hljs-title function_">bmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *ip, uint bn)</span><br>{<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">return</span> addr;<br>}<br>  bn -= NINDIRECT;<br>  <span class="hljs-keyword">if</span>(bn &lt; NDOUBLYINDIRECT) {<br>    <span class="hljs-keyword">if</span>((addr = ip-&gt;addrs[NDIRECT + <span class="hljs-number">1</span>]) == <span class="hljs-number">0</span>) {<br>      ip-&gt;addrs[NDIRECT + <span class="hljs-number">1</span>] = addr = balloc(ip-&gt;dev);<br>    }<br>    bp = bread(ip-&gt;dev, addr);<br>    a = (uint*)bp-&gt;data;<br>    <span class="hljs-keyword">if</span>((addr = a[bn / NINDIRECT]) == <span class="hljs-number">0</span>) {<br>      a[bn / NINDIRECT] = addr = balloc(ip-&gt;dev);<br>      log_write(bp);<br>    }<br>    brelse(bp);<br>    bp = bread(ip-&gt;dev, addr);<br>    a = (uint*)bp-&gt;data;<br>    bn %= NINDIRECT;<br>    <span class="hljs-keyword">if</span>((addr = a[bn]) == <span class="hljs-number">0</span>) {<br>      a[bn] = addr = balloc(ip-&gt;dev);<br>      log_write(bp);<br>    }<br>    brelse(bp);<br>    <span class="hljs-keyword">return</span> addr;<br>  }<br><br>  panic(<span class="hljs-string">"bmap: out of range"</span>)<br>}<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">itrunc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *ip)</span><br>{<br>    <span class="hljs-type">int</span> i, j, k;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">buf</span> *<span class="hljs-title">bp</span>, *<span class="hljs-title">bp2</span>;</span><br>  uint *a, *a2;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-keyword">if</span>(ip-&gt;addrs[NDIRECT + <span class="hljs-number">1</span>]) {<br>        bp = bread(ip-&gt;dev, ip-&gt;addrs[NDIRECT + <span class="hljs-number">1</span>]);<br>        a = (uint*)bp-&gt;data;<br>        <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt; NINDIRECT; ++j) {<br>            <span class="hljs-keyword">if</span>(a[j]) {<br>                bp2 = bread(ip-&gt;dev, a[j]);<br>                a2 = (uint*)bp2-&gt;data;<br>                <span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>; k &lt; NINDIRECT; ++k) {<br>                    <span class="hljs-keyword">if</span>(a2[k]) {<br>                        bfree(ip-&gt;dev, a2[k]);<br>                    }<br>                }<br>                brelse(bp2);<br>                bfree(ip-&gt;dev, a[j]);<br>                a[j] = <span class="hljs-number">0</span>;<br>            }<br>        }<br>        brelse(bp);<br>        bfree(ip-&gt;dev, ip-&gt;addrs[NDIRECT + <span class="hljs-number">1</span>]);<br>        ip-&gt;addrs[NDIRECT + <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    }<br>    <br>    ip-&gt;size = <span class="hljs-number">0</span>;<br>    iupdate(ip);<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="113-运行结果"><a href="#1-1-3-运行结果" class="headerlink" title="1.1.3 运行结果"></a>1.1.3 运行结果</h5><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123221228205.png" alt="image-20221123221228205"></p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123222453492.png" alt="image-20221123222453492"></p><h4 id="12-symbolic-links"><a href="#1-2-Symbolic-links" class="headerlink" title="1.2 Symbolic links"></a>1.2 Symbolic links</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs english">You will implement the symlink(char *target, char *path) system call, which creates a new symbolic link at path that refers to file named by target. For further information, see the man page symlink. To test, add symlinktest to the Makefile and run it. Your solution is complete when the tests produce the following output (including usertests succeeding).<br></code></pre></td></tr></tbody></table></figure><h5 id="121-解题过程"><a href="#1-2-1-解题过程" class="headerlink" title="1.2.1 解题过程"></a>1.2.1 解题过程</h5><ul><li><p>分别于<code>kernel/syscall.h</code>, <code>kernel/syscall.c</code>, <code>user/usys.pl</code> 和 <code>user/user.h</code>添加有关<code>symlink</code>系统调用的定义声明。</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123223225067.png" alt="image-20221123223225067"></p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123223403762.png" alt="image-20221123223403762"></p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123223502076.png" alt="image-20221123223502076"></p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123223600446.png" alt="image-20221123223600446"></p></li><li><p>添加<code>T_SYMLINK</code>到<code>kernel/stat.h</code>中</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123223747774.png" alt="image-20221123223747774"></p></li><li><p>添加<code>O_NOFOLLOW</code>到<code>kernel/fcntl.h</code>中</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123224203974.png" alt="image-20221123224203974"></p></li><li><p>在<code>kernel/sysfile.c</code>中实现功能为生成符号链接的<code>sys_symlink()</code></p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123224754966.png" alt="image-20221123224754966"></p><ul><li><p>在<code>kernel/fs.h</code>定义<code>NSYMLINK</code>用于表示最大的符号连接深度</p></li><li><p>在<code>kernel/sysfile.c</code>中新增函数<code>follow_symlink()</code></p></li><li><p>修改<code>kernel/sysfile.c</code> 的 <code>sys_open()</code></p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123225821623.png" alt="image-20221123225821623"></p></li></ul><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123225717349.png" alt="image-20221123225717349"></p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123225758357.png" alt="image-20221123225758357"></p></li></ul><h5 id="122-代码"><a href="#1-2-2-代码" class="headerlink" title="1.2.2 代码"></a>1.2.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// Makefile</span><br>$U/_symlinktest\<br><br><span class="hljs-comment">// kernel/syscall.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYS_symlink 22</span><br><br><span class="hljs-comment">// kernel/syscall.c</span><br><span class="hljs-keyword">extern</span> uint64 <span class="hljs-title function_">sys_symlink</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br>[SYS_symlink] sys_symlink,<br><br><span class="hljs-comment">// ...</span><br>uint64 <span class="hljs-title function_">sys_symlink</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> {<br>  <span class="hljs-type">char</span> target[MAXPATH], path[MAXPATH];<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">ip</span>;</span><br>  <span class="hljs-type">int</span> n;<br><br>  <span class="hljs-keyword">if</span> ((n = argstr(<span class="hljs-number">0</span>, target, MAXPATH)) &lt; <span class="hljs-number">0</span><br>    || argstr(<span class="hljs-number">1</span>, path, MAXPATH) &lt; <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  }<br><br>  begin_op();<br>  <span class="hljs-comment">// create the symlink's inode</span><br>  <span class="hljs-keyword">if</span>((ip = create(path, T_SYMLINK, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) == <span class="hljs-number">0</span>) {<br>    end_op();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  }<br>  <span class="hljs-comment">// write the target path to the inode</span><br>  <span class="hljs-keyword">if</span>(writei(ip, <span class="hljs-number">0</span>, (uint64)target, <span class="hljs-number">0</span>, n) != n) {<br>    iunlockput(ip);<br>    end_op();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  }<br><br>  iunlockput(ip);<br>  end_op();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> inode* <span class="hljs-title function_">follow_symlink</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode* ip)</span> {<br>  uint inums[NSYMLINK];<br>  <span class="hljs-type">int</span> i, j;<br>  <span class="hljs-type">char</span> target[MAXPATH];<br><br>  <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; NSYMLINK; ++i) {<br>    inums[i] = ip-&gt;inum;<br>    <span class="hljs-keyword">if</span>(readi(ip, <span class="hljs-number">0</span>, (uint64)target, <span class="hljs-number">0</span>, MAXPATH) &lt;= <span class="hljs-number">0</span>) {<br>      iunlockput(ip);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"open_symlink: open symlink failed\n"</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    }<br>    iunlockput(ip);<br>    <br>    <span class="hljs-keyword">if</span>((ip = namei(target)) == <span class="hljs-number">0</span>) {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"open_symlink: path \"%s\" is not exist\n"</span>, target);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    }<br>    <span class="hljs-keyword">for</span>(j = <span class="hljs-number">0</span>; j &lt;= i; ++j) {<br>      <span class="hljs-keyword">if</span>(ip-&gt;inum == inums[j]) {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"open_symlink: links form a cycle\n"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      }<br>    }<br>    ilock(ip);<br>    <span class="hljs-keyword">if</span>(ip-&gt;type != T_SYMLINK) {<br>      <span class="hljs-keyword">return</span> ip;<br>    }<br>  }<br><br>  iunlockput(ip);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"open_symlink: the depth of links reaches the limit\n"</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br>uint64<br><span class="hljs-title function_">sys_open</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">if</span>(ip-&gt;type == T_DEVICE &amp;&amp; (ip-&gt;major &lt; <span class="hljs-number">0</span> || ip-&gt;major &gt;= NDEV)){<br>    iunlockput(ip);<br>    end_op();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  }<br><br>  <span class="hljs-comment">// handle the symlink - lab9-2</span><br>  <span class="hljs-keyword">if</span>(ip-&gt;type == T_SYMLINK &amp;&amp; (omode &amp; O_NOFOLLOW) == <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">if</span>((ip = follow_symlink(ip)) == <span class="hljs-number">0</span>) {<br>      end_op();<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    }<br>  }<br><br>  <span class="hljs-keyword">if</span>((f = filealloc()) == <span class="hljs-number">0</span> || (fd = fdalloc(f)) &lt; <span class="hljs-number">0</span>){<br>    <span class="hljs-keyword">if</span>(f)<br>      fileclose(f);<br>    iunlockput(ip);<br>    end_op();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  }<br><br>  <span class="hljs-comment">// ...</span><br>}<br><br><span class="hljs-comment">// user/usys.pl</span><br>entry(<span class="hljs-string">"symlink"</span>);<br><br><span class="hljs-comment">// user/user.h</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">symlink</span><span class="hljs-params">(<span class="hljs-type">char</span> *target, <span class="hljs-type">char</span> *path)</span>;<br><br><span class="hljs-comment">// kernel/stat.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> T_SYMLINK 4</span><br><br><span class="hljs-comment">// kernel/fcntl.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> O_NOFOLLOW 0x004</span><br><br><span class="hljs-comment">// kernel/fs.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NSYMLINK 10</span><br></code></pre></td></tr></tbody></table></figure><h5 id="123-运行结果"><a href="#1-2-3-运行结果" class="headerlink" title="1.2.3 运行结果"></a>1.2.3 运行结果</h5><p><img src="https://img-blog.csdnimg.cn/2109221cda094221ac0a8134e951fb9d.png" alt="在这里插入图片描述"></p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221123222453492.png" alt="image-20221123222453492"></p><h3 id="2实验心得"><a href="#2-实验心得" class="headerlink" title="2.实验心得"></a>2.实验心得</h3><p>​        非常好奇Large files的<code>$bigfile</code> 和 <code>$usertests</code> 的 <code>writebig</code>到底是多”big”呢，等了快20分钟他的bigbig file，真的很big。</p><p>​        第二个sys_open函数的修改有点复杂，是否递归或者还是直接打开symlink。文件链接是一个iNode储存的的其实是另一个inode的路径，通过前一个inode找下一个inode，然后再查看另一个inode的值，如果仍是一个inode的路径的话，就继续递归找下去。</p>]]></content>
    
    
    <summary type="html">Lab4文件系统。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>OS LAB3 实验报告</title>
    <link href="http://dayswithvenki.top/posts/os-lab3.html"/>
    <id>http://dayswithvenki.top/posts/os-lab3.html</id>
    <published>2022-10-20T16:00:00.000Z</published>
    <updated>2023-04-08T04:31:25.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lab3-页表和进程的内存管理"><a href="#Lab3-页表和进程的内存管理" class="headerlink" title="Lab3 页表和进程的内存管理"></a>Lab3 页表和进程的内存管理</h2><h3 id="0-实验前切换至lab3分支"><a href="#0-实验前：切换至Lab3分支" class="headerlink" title="0.  实验前：切换至Lab3分支"></a>0.  实验前：切换至Lab3分支</h3><p>在xv6-labs-2021文件夹下运行终端，并且运行以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git fetch<br>$ git checkout syscall<br>$ make clean<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/10/31/1trfBwyhMgN9zOE.png" alt="image-20221031101541984"></p><p>发现git check out命令发生错误，提示本地保存需要提交或存储后才能切换分支。</p><p>运行命令 git stash</p><p><img src="https://s2.loli.net/2022/10/31/UsqHDkVKpJhw3Sg.png" alt="image-20221031102314269"></p><p>切换成功。</p><h3 id="1-页表和进程的内存管理"><a href="#1-页表和进程的内存管理" class="headerlink" title="1. 页表和进程的内存管理"></a>1. 页表和进程的内存管理</h3><h4 id="11-speed-up-system-calls"><a href="#1-1-Speed-up-system-calls" class="headerlink" title="1.1 Speed up system calls"></a>1.1 Speed up system calls</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs english">Some operating systems (e.g., Linux) speed up certain system calls by sharing data in a read-only region between userspace and the kernel. This eliminates the need for kernel crossings when performing these system calls. To help you learn how to insert mappings into a page table, your first task is to implement this optimization for the getpid() system call in xv6.<br></code></pre></td></tr></tbody></table></figure><h5 id="111-解题过程"><a href="#1-1-1-解题过程" class="headerlink" title="1.1.1 解题过程"></a>1.1.1 解题过程</h5><ul><li>在kernel/proc.h中的struct proc在增加一个域，存储共享内存块的物理地址。</li></ul><p><img src="https://s2.loli.net/2022/10/31/jUHVTMRCw65P2eq.png" alt="image-20221031103641834"></p><ul><li>在kernel/proc.c的allocproc函数中增加申请共享内存页。</li></ul><p><img src="https://s2.loli.net/2022/10/31/XlVwvReuCxizHD3.png" alt="image-20221031103846850"></p><ul><li>在kernel/proc.c的proc_pagetable函数中增加在内核中共享内存页的初始化，以及对共享内存块的页表初始化。</li></ul><p><img src="https://s2.loli.net/2022/10/31/B2VqGfKljRTONip.png" alt="image-20221031103912918"></p><ul><li>在kernel/proc.c的freeproc函数中增加释放共享内存块。</li></ul><p><img src="https://s2.loli.net/2022/10/31/pJgz8HKRSX29B6P.png" alt="image-20221031104000138"></p><ul><li>在kernel/proc.c的proc_freepagetable函数中增加一行释放页表中共享内存页项。</li></ul><p><img src="https://s2.loli.net/2022/10/31/Hbg9CUrnxTyA8KI.png" alt="image-20221031104051589"></p><h5 id="112-代码"><a href="#1-1-2-代码" class="headerlink" title="1.1.2 代码"></a>1.1.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// kernel/proc.h</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">parent</span>;</span><br>...<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">cwd</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">usyscall</span> *<span class="hljs-title">usyscall</span>;</span><br><br><span class="hljs-comment">// kernel/proc.c</span><br>allocproc(<span class="hljs-type">void</span>)<br>{<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span>;</span><br>  ...<br>    <span class="hljs-keyword">if</span>((p-&gt;usyscall = (<span class="hljs-keyword">struct</span> usyscall *)kalloc()) == <span class="hljs-number">0</span>){<br>    freeproc(p);<br>    release(&amp;p-&gt;lock);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  }<br>  ...<br>}<br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">pagetable_t</span> kernel_pagetable;<br> <br>...<br><span class="hljs-type">pagetable_t</span><br><span class="hljs-title function_">proc_pagetable</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> proc *p)</span><br><br>    <br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">freeproc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> proc *p)</span><br>{<br>  ...<br>  <span class="hljs-keyword">if</span>(p-&gt;usyscall)<br>    kfree((<span class="hljs-type">void</span>*)p-&gt;usyscall);<br>  p-&gt;usyscall = <span class="hljs-number">0</span>;<br>  ...<br>}<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">proc_freepagetable</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable, uint64 sz)</span><br>{<br>    ...<br>    uvmunmap(pagetable, USYSCALL, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="12-print-a-page-table"><a href="#1-2-Print-a-page-table" class="headerlink" title="1.2 Print a page table"></a>1.2 Print a page table</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs english">To help you visualize RISC-V page tables, and perhaps to aid future debugging, your second task is to write a function that prints the contents of a page table.<br></code></pre></td></tr></tbody></table></figure><h5 id="121-解题过程"><a href="#1-2-1-解题过程" class="headerlink" title="1.2.1 解题过程"></a>1.2.1 解题过程</h5><ul><li>模仿freewalk()编写vmprint()函数，并添加在kernel/vm.c中。</li></ul><p><img src="https://s2.loli.net/2022/10/31/4tGXgLmVHI6j2ZA.png" alt="image-20221031104941589"></p><ul><li>在kernel/defs.h中定义vmprint的原型，以便可以从exec.c调用它。</li></ul><p><img src="https://s2.loli.net/2022/10/31/G86vUsxNkMO5VSg.png" alt="image-20221031105014675"></p><ul><li>在kernel/exec.c中的返回argc之前插入if (p-&gt;pid==1) vmprint(p-&gt;pagetable)，以输出第一个进程的页表。</li></ul><p><img src="https://s2.loli.net/2022/10/31/CgJosWAazxM8iVk.png" alt="image-20221031105046623"></p><h5 id="122-代码"><a href="#1-2-2-代码" class="headerlink" title="1.2.2 代码"></a>1.2.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// kernel/vm.c</span><br><br><span class="hljs-type">void</span> <br><span class="hljs-title function_">printwalk</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable, uint level)</span> {<br>  <span class="hljs-type">char</span>* prefix;<br>  <span class="hljs-keyword">if</span> (level == <span class="hljs-number">2</span>) prefix = <span class="hljs-string">".."</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (level == <span class="hljs-number">1</span>) prefix = <span class="hljs-string">".. .."</span>;<br>  <span class="hljs-keyword">else</span> prefix = <span class="hljs-string">".. .. .."</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">512</span>; i++){ <br>    <span class="hljs-type">pte_t</span> pte = pagetable[i];<br>    <span class="hljs-keyword">if</span>(pte &amp; PTE_V){ <br>      uint64 pa = PTE2PA(pte); <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s%d: pte %p pa %p\n"</span>, prefix, i, pte, pa);<br>      <span class="hljs-keyword">if</span>((pte &amp; (PTE_R|PTE_W|PTE_X)) == <span class="hljs-number">0</span>){ <br>         printwalk((<span class="hljs-type">pagetable_t</span>)pa, level - <span class="hljs-number">1</span>);<br>      }<br>    }<br>  }<br>}<br> <br><span class="hljs-type">void</span><br><span class="hljs-title function_">vmprint</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span> pagetable)</span> {<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"page table %p\n"</span>, pagetable);<br>  printwalk(pagetable, <span class="hljs-number">2</span>);<br>}<br><br><span class="hljs-comment">//kernel/defs.h</span><br><br><span class="hljs-comment">// vm.c</span><br>...<br><span class="hljs-type">void</span><span class="hljs-title function_">vmprint</span><span class="hljs-params">(<span class="hljs-type">pagetable_t</span>)</span>;<br><br><span class="hljs-comment">//kernel/exec.c</span><br><br>...<br>    <br><span class="hljs-keyword">if</span> (p-&gt;pid == <span class="hljs-number">1</span>)<br>  vmprint(p-&gt;pagetable);<br>  <br><span class="hljs-keyword">return</span> argc; <span class="hljs-comment">// this ends up in a0, the first argument to main(argc, argv)</span><br></code></pre></td></tr></tbody></table></figure><h5 id="123-运行结果测试"><a href="#1-2-3-运行结果测试" class="headerlink" title="1.2.3 运行结果测试"></a>1.2.3 运行结果测试</h5><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20221031105438304.png" alt="image-20221031105438304"></p><h4 id="13-detecting-which-pages-have-been-accessed"><a href="#1-3-Detecting-which-pages-have-been-accessed" class="headerlink" title="1.3 Detecting which pages have been accessed"></a>1.3 Detecting which pages have been accessed</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs english">Some garbage collectors (a form of automatic memory management) can benefit from information about which pages have been accessed (read or write). In this part of the lab, you will add a new feature to xv6 that detects and reports this information to userspace by inspecting the access bits in the RISC-V page table. The RISC-V hardware page walker marks these bits in the PTE whenever it resolves a TLB miss.<br></code></pre></td></tr></tbody></table></figure><h5 id="131-解题过程"><a href="#1-3-1-解题过程" class="headerlink" title="1.3.1 解题过程"></a>1.3.1 解题过程</h5><ul><li>在kernel/riscv.h中定义常量PTE_A。</li></ul><p><img src="https://s2.loli.net/2022/10/31/XsdGOKexZmYraNc.png" alt="image-20221031105812407"></p><ul><li>在kernel/sysproc.c中编写sys_pgaccess函数。</li></ul><p><img src="https://s2.loli.net/2022/10/31/Zul7kNBM1G8zIAO.png" alt="image-20221031105853026"></p><h5 id="132-代码"><a href="#1-3-2-代码" class="headerlink" title="1.3.2 代码"></a>1.3.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// kernel/riscv.h</span><br><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTE_A (1L &lt;&lt; 6)</span><br>    <br><span class="hljs-comment">// kernel/sysproc.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LAB_PGTBL</span><br><span class="hljs-type">int</span><br><span class="hljs-title function_">sys_pgaccess</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>   uint64 base;<br>  uint64 mask;  <br>  <span class="hljs-type">int</span> len;  <br> <br>  <span class="hljs-type">pagetable_t</span> pagetable = <span class="hljs-number">0</span>;  <br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> procmask = <span class="hljs-number">0</span> ;<br>  <span class="hljs-type">pte_t</span> *pte;<br> <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br> <br>  <span class="hljs-keyword">if</span>(argaddr(<span class="hljs-number">0</span>, &amp;base) &lt; <span class="hljs-number">0</span> || argint(<span class="hljs-number">1</span>, &amp;len) &lt; <span class="hljs-number">0</span> || argaddr(<span class="hljs-number">2</span>, &amp;mask) &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span> (len &gt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">8</span>) <br>    len = <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">8</span>;<br> <br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++) {<br>    pagetable = p-&gt;pagetable;<br>      <br>    <span class="hljs-keyword">if</span>(base &gt;= MAXVA)<br>      panic(<span class="hljs-string">"pgaccess"</span>);<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> level = <span class="hljs-number">2</span>; level &gt; <span class="hljs-number">0</span>; level--) {<br>      pte = &amp;pagetable[PX(level, base)];<br>      <span class="hljs-keyword">if</span>(*pte &amp; PTE_V) {<br>        pagetable = (<span class="hljs-type">pagetable_t</span>)PTE2PA(*pte);<br>      } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      }      <br>    }<br>    pte = &amp;pagetable[PX(<span class="hljs-number">0</span>, base)];<br>    <span class="hljs-keyword">if</span>(pte == <span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>((*pte &amp; PTE_V) == <span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>((*pte &amp; PTE_U) == <span class="hljs-number">0</span>)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <br>    <span class="hljs-keyword">if</span>(*pte &amp; PTE_A) {  <br>      procmask = procmask | (<span class="hljs-number">1L</span> &lt;&lt; i);<br>      *pte = *pte &amp; (~PTE_A);<br>    }<br>    base += PGSIZE;<br>  }<br> <br>  pagetable = p-&gt;pagetable;<br>  <span class="hljs-keyword">return</span> copyout(pagetable, mask, (<span class="hljs-type">char</span> *) &amp;procmask, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>));<br>}<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span>    </span><br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="2实验心得"><a href="#2-实验心得" class="headerlink" title="2.实验心得"></a>2.实验心得</h3><p>​        一些操作系统(如Linux)通过在用户空间和内核之间的只读区域共享数据来加速某些系统调用。其中为了实现这一过程需要先添加一个存储共享内存块的物理地址-&gt;增加申请共享内存页-&gt;增加在内核中共享内存页的初始化，以及对共享内存块的页表初始化-&gt;增加释放共享内存块-&gt;释放页表中共享内存页项。</p><p>​        而当需要模拟系统遍历页表的时候，可以先通过观察系统本身是如何遍历的，然后按着freewalk()函数编写输出遍历打印页表的函数vmprint()。</p>]]></content>
    
    
    <summary type="html">页表和进程的内存管理。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>OS LAB2 实验报告</title>
    <link href="http://dayswithvenki.top/posts/os-lab2.html"/>
    <id>http://dayswithvenki.top/posts/os-lab2.html</id>
    <published>2022-09-30T16:00:00.000Z</published>
    <updated>2023-04-08T04:31:07.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lab2系统调用"><a href="#Lab2系统调用" class="headerlink" title="Lab2系统调用"></a>Lab2系统调用</h2><h3 id="0-实验前切换至lab2分支"><a href="#0-实验前：切换至Lab2分支" class="headerlink" title="0.  实验前：切换至Lab2分支"></a>0.  实验前：切换至Lab2分支</h3><p>在xv6-labs-2021文件夹下运行终端，并且运行以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git fetch<br>$ git checkout syscall<br>$ make clean<br></code></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/10/08/3TPYif8RWtkdh2z.png" alt="948c6bfee5f228d8f6f19079569afda"></p><p>切换成功。</p><h3 id="1-新的系统调用"><a href="#1-新的系统调用" class="headerlink" title="1. 新的系统调用"></a>1. 新的系统调用</h3><h4 id="11-system-call-tracing"><a href="#1-1-System-call-tracing" class="headerlink" title="1.1 System call tracing"></a>1.1 System call tracing</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs english">In this assignment you will add a system call tracing feature that may help you when debugging later labs. You'll create a new trace system call that will control tracing. It should take one argument, an integer "mask", whose bits specify which system calls to trace. For example, to trace the fork system call, a program calls trace(1 &lt;&lt; SYS_fork), where SYS_fork is a syscall number from kernel/syscall.h. You have to modify the xv6 kernel to print out a line when each system call is about to return, if the system call's number is set in the mask. The line should contain the process id, the name of the system call and the return value; you don't need to print the system call arguments. The trace system call should enable tracing for the process that calls it and any children that it subsequently forks, but should not affect other processes.<br></code></pre></td></tr></tbody></table></figure><h5 id="111-解题过程"><a href="#1-1-1-解题过程" class="headerlink" title="1.1.1 解题过程"></a>1.1.1 解题过程</h5><ul><li>在Makefile UPROGS下新增$U/_trace\</li></ul><p><img src="https://s2.loli.net/2022/10/08/GUTJtqKIsLARF6a.png" alt="5ccb71e4769793835d75c6131a805b1"></p><ul><li>执行make qemu，结果如下：</li></ul><p><img src="https://s2.loli.net/2022/10/08/kzBxwfmdbq9NIrZ.png" alt="image-20221008153655758"></p><ul><li>为user/user.h ； user/usys.pl ； kernel/syscall.h 添加trace的原型或声明</li></ul><p><img src="https://s2.loli.net/2022/10/08/kZXpCSWYe5sQfu1.png" alt="b2bf222b8c752a4d16957cd7ae69709"></p><p><img src="https://s2.loli.net/2022/10/08/rjdnpAQTSLs4WX5.png" alt="774834c92a766c5e10534e243515424"></p><p><img src="https://s2.loli.net/2022/10/08/dyXbzKg12Q6kOCM.png" alt="98e98fb88ef1977f72bd13229f19fa3"></p><p>  make qemu 成功，但是执行trace指令失败：</p><p><img src="https://s2.loli.net/2022/10/08/GlCiRvaekF4mw7J.png" alt="ee38ff31b574fdf8b9fc128aa80c29a"></p><ul><li>kernel/sysproc.c 、 kernel/proc.h 、 kernel/syscall.c 加入对应的实现代码</li></ul><p><img src="https://s2.loli.net/2022/10/08/D4UE6Ke8Ci5rV39.png" alt="1f7dd88e5242673d30877a11c082393"></p><p><img src="C:\Users\Wadehl\AppData\Local\Temp\WeChat Files\2e7591aa3468e86ba9a1a8b4a3efffe.png" alt="2e7591aa3468e86ba9a1a8b4a3efffe"></p><p><img src="https://s2.loli.net/2022/10/08/FSXLyjCZANmDdh6.png" alt="image-20221008154502843"></p><ul><li>修改kernel/proc.c fork()，以便子孙进程也能够被追踪</li></ul><p><img src="https://s2.loli.net/2022/10/08/dBiKb1WgIsverfz.png" alt="image-20221008155623707"></p><ul><li>修改 kernel/syscall.c 的 syscall()，以输出相应的跟踪信息</li></ul><p><img src="https://s2.loli.net/2022/10/08/1IXdvBcbuD8WksE.png" alt="image-20221008155802702"></p><p>此时结果：</p><p><img src="https://s2.loli.net/2022/10/08/O4PbCpWe7BD8XRH.png" alt="76f0780d4435f2868753c3f70666fc6"></p><p>发现进程名有误，再次修改syscall()，添加一个字符数组，用以对相关系统调用名的打印输出:</p><p><img src="https://s2.loli.net/2022/10/08/FMSIX5wQyg9hN1D.png" alt="image-20221008155903900"></p><h5 id="112-代码"><a href="#1-1-2-代码" class="headerlink" title="1.1.2 代码"></a>1.1.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// Makefile</span><br><br>UPROGS=\<br>    ...<br>    $U/_trace<br><br><span class="hljs-comment">// user/user.h</span><br>    <br><span class="hljs-type">int</span> trace(<span class="hljs-type">int</span>);<br><br><span class="hljs-comment">// kernel/syscall.h</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYS_trace 22</span><br><br><span class="hljs-comment">// user/usys.pl</span><br><br>entry(<span class="hljs-string">"trace"</span>);<br><br><span class="hljs-comment">// kernel/syscall.c</span><br><br><span class="hljs-keyword">extern</span> uint64 <span class="hljs-title function_">sys_trace</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-title function_">uint64</span> <span class="hljs-params">(*syscalls[])</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> = {<br>[SYS_fork]    sys_fork,<br>...<br>[SYS_trace]   sys_trace,<br>};<br><br><span class="hljs-comment">// kernel/sysproc.c</span><br><br>uint64<br><span class="hljs-title function_">sys_trace</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  <span class="hljs-type">int</span> pid;<br>  <span class="hljs-keyword">if</span>(argint(<span class="hljs-number">0</span>, &amp;pid) &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  myproc()-&gt;tracemask = pid;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// kernel/proc.h</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> {</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">spinlock</span> <span class="hljs-title">lock</span>;</span><br>...<br>  <span class="hljs-type">int</span> tracemask;<br>};<br><br><span class="hljs-comment">// kernel/proc.c</span><br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  <span class="hljs-type">int</span> i, pid;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">np</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  <span class="hljs-keyword">if</span>((np = allocproc()) == <span class="hljs-number">0</span>){<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  }<br>  np-&gt;tracemask = p-&gt;tracemask;<br>  ...<br>}<br><br><span class="hljs-comment">// kernel/syscall.c</span><br><br>...<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> syscall_name[<span class="hljs-number">23</span>][<span class="hljs-number">16</span>] = {<span class="hljs-string">"fork"</span>, <span class="hljs-string">"exit"</span>, <span class="hljs-string">"wait"</span>, <span class="hljs-string">"pipe"</span>, <span class="hljs-string">"read"</span>, <span class="hljs-string">"kill"</span>, <span class="hljs-string">"exec"</span>, <span class="hljs-string">"fstat"</span>, <span class="hljs-string">"chdir"</span>, <span class="hljs-string">"dup"</span>, <span class="hljs-string">"getpid"</span>, <br>                             <span class="hljs-string">"sbrk"</span>, <span class="hljs-string">"sleep"</span>, <span class="hljs-string">"uptime"</span>, <span class="hljs-string">"open"</span>, <span class="hljs-string">"write"</span>, <span class="hljs-string">"mknod"</span>, <span class="hljs-string">"unlink"</span>, <span class="hljs-string">"link"</span>, <span class="hljs-string">"mkdir"</span>, <span class="hljs-string">"close"</span>, <span class="hljs-string">"trace"</span>, <br>                             <span class="hljs-string">"sysinfo"</span>};<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">syscall</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  <span class="hljs-type">int</span> num;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br><br>  num = p-&gt;trapframe-&gt;a7;<br>  <span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) {<br>    p-&gt;trapframe-&gt;a0 = syscalls[num]();<br>    <span class="hljs-keyword">if</span>(p-&gt;tracemask &gt; <span class="hljs-number">0</span> &amp;&amp; (p-&gt;tracemask&amp;(<span class="hljs-number">1</span>&lt;&lt;num))) {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d: syscall %s -&gt; %d\n"</span>, p-&gt;pid, syscall_name[num<span class="hljs-number">-1</span>], p-&gt;trapframe-&gt;a0);<br>    }<br>  } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %s: unknown sys call %d\n"</span>,<br>            p-&gt;pid, p-&gt;name, num);<br>    p-&gt;trapframe-&gt;a0 = <span class="hljs-number">-1</span>;<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="113-运行结果测试"><a href="#1-1-3-运行结果测试" class="headerlink" title="1.1.3 运行结果测试"></a>1.1.3 运行结果测试</h5><p><img src="https://s2.loli.net/2022/10/08/qHXS9Tg1nbK8DVl.png" alt="fb959b82718d00e39e4630093ac2358"></p><h4 id="12-sysinfo"><a href="#1-2-Sysinfo" class="headerlink" title="1.2 Sysinfo"></a>1.2 Sysinfo</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs english">In this assignment you will add a system call, sysinfo, that collects information about the running system. The system call takes one argument: a pointer to a struct sysinfo (see kernel/sysinfo.h). The kernel should fill out the fields of this struct: the freemem field should be set to the number of bytes of free memory, and the nproc field should be set to the number of processes whose state is not UNUSED. We provide a test program sysinfotest; you pass this assignment if it prints "sysinfotest: OK".<br></code></pre></td></tr></tbody></table></figure><h5 id="121-解题过程"><a href="#1-2-1-解题过程" class="headerlink" title="1.2.1 解题过程"></a>1.2.1 解题过程</h5><ul><li><p>在Makefile UPROGS下新增$U/_sysinfotest\</p><p><img src="https://s2.loli.net/2022/10/08/G4zBJdPuUYpIFst.jpg" alt="866974a3cf0bcb58fc73123d125ab1a"></p></li><li><p>为user/user.h ； user/usys.pl ； kernel/syscall.h 添加trace的原型或声明</p></li></ul><p><img src="https://s2.loli.net/2022/10/08/pfRUPuCh9QEcdVW.png" alt="69a98164633fe236b86151fbeca7ce6"></p><p><img src="https://s2.loli.net/2022/10/08/DcNTOKiw5ehYBAI.png" alt="image-20221008180246990"></p><p><img src="https://s2.loli.net/2022/10/08/7eESZnmklKyc3v8.png" alt="image-20221008180310813"></p><ul><li>声明并定义state为UNUSED的进程数、当前进程空闲的文件描述符数量的函数</li></ul><p><img src="https://s2.loli.net/2022/10/08/LmqsQ3TbtJHvfBg.png" alt="83958fb589a4fc74925010c4c019b02"></p><p><img src="https://s2.loli.net/2022/10/08/1T96EnzdctH8jLK.png" alt="c223e2657cce6e93c132492067a296f"></p><p><img src="https://s2.loli.net/2022/10/08/5zMoJ38Rw9uZQUO.png" alt="e6129d50ea917d6dada7b3a8b724b6b"></p><ul><li>定义sysinfo</li></ul><p><img src="https://s2.loli.net/2022/10/08/pM5VEBlKfOJaQoF.png" alt="image-20221008181651174"></p><h5 id="122-代码"><a href="#1-2-2-代码" class="headerlink" title="1.2.2 代码"></a>1.2.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Makefile</span><br><br>UPROGS=\<br>    ...<br>    $U/_sysinfotest<br><br><span class="hljs-comment">// user/user.h</span><br>    <br><span class="hljs-keyword">struct</span> sysinfo;<br>...    <br><span class="hljs-type">int</span> <span class="hljs-title function_">sysinfo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> sysinfo *)</span>;<br><br><span class="hljs-comment">// kernel/syscall.h</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYS_sysinfo 23</span><br><br><span class="hljs-comment">// user/usys.pl</span><br><br>entry(<span class="hljs-string">"sysinfo"</span>);<br><br><br><span class="hljs-comment">// kernel/syscall.c</span><br><br><span class="hljs-keyword">extern</span> uint64 <span class="hljs-title function_">sys_sysinfo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-title function_">uint64</span> <span class="hljs-params">(*syscalls[])</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> = {<br>[SYS_fork]    sys_fork,<br>...<br>[SYS_sysinfo] sys_sysinfo,<br>};<br><br><span class="hljs-comment">// kernel/sysproc.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"sysinfo.h"</span></span><br><br>uint64<br><span class="hljs-title function_">sys_sysinfo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  uint64 addr; <br>  <span class="hljs-keyword">if</span> (argaddr(<span class="hljs-number">0</span>, &amp;addr) &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span> =</span> myproc();<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sysinfo</span> <span class="hljs-title">si</span>;</span><br><br>  si.freemem = getfreemem();<br>  si.nproc = getnproc();<br><br>  <span class="hljs-keyword">if</span> (copyout(p-&gt;pagetable, addr, (<span class="hljs-type">char</span> *)&amp;si, <span class="hljs-keyword">sizeof</span>(si)) &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-comment">// kernel/proc.c</span><br><br>uint64<br><span class="hljs-title function_">getnproc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>{<br>  uint64 n = <span class="hljs-number">0</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc</span> *<span class="hljs-title">p</span>;</span><br>  <span class="hljs-keyword">for</span> (p = proc; p &lt; &amp;proc[NPROC]; ++p) {<br>    <span class="hljs-keyword">if</span> (p-&gt;state != UNUSED) ++n;<br>  }<br>  <span class="hljs-keyword">return</span> n;<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="123-运行结果测试"><a href="#1-2-3-运行结果测试" class="headerlink" title="1.2.3 运行结果测试"></a>1.2.3 运行结果测试</h5><p><img src="https://s2.loli.net/2022/10/08/6uEDCzwFdv51LQm.png" alt="image-20221008181742684"></p><h3 id="2实验心得"><a href="#2-实验心得" class="headerlink" title="2.实验心得"></a>2.实验心得</h3><p>​        首先，需要了解清楚xv6的源码的某个函数的具体功能，以及源码与源码之间的关系，才能够好好地新增新的系统调用；并且，当完成一个实验的输出后，需要及时与官方文档中的结果进行比对，查看输出结果的区别在于哪个变量的值，如本次实验1中我第一次的结果缺少了系统调用名字的数组以及引用，导致所有系统调用名都是父程序的调用名，而缺少了子孙程序的调用名；最后，一定要记得引入需要用到的头文件，否则将需要很多的时间对函数进行检查，却找不到报错的原因。</p>]]></content>
    
    
    <summary type="html">Lab2系统调用。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>小郭和小吴周年快乐！</title>
    <link href="http://dayswithvenki.top/posts/1stanniversary.html"/>
    <id>http://dayswithvenki.top/posts/1stanniversary.html</id>
    <published>2022-09-29T16:00:00.000Z</published>
    <updated>2022-10-22T04:13:59.290Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="544d9618e4236c3d06c09f9d0e18812f34170b86a7e69238ab6f10ace3fb726c">63a42796bbf34b019cf859df3c20cdcb55ca5f0aff747c059f86d25005abd6208eed8163d53008d7c11a98f48e91f5a80584cd7b3b5f44f0d6b0547cd545a5299b6a1d2944f6d1b49ebff29a3db1cba8d72bcf60d8b2ef5cb7bbab312ebda5ca70d4af31be493ee6151e6d14773ffbef5829cd5ee130825c6f341c0d3f0acd483169b92e536171713bdb95fb5eac82fffead022d9046ebe03fc1c721455a5f3bf1646a812a6c4f44a91909ae1b7066afcd7bd740cf450baf481ba5c464da7fc4e49fe4f03aefaf0b09369aaf4456815d9ebd0a8cf8107bea61df3661718c39f58ac43c2aa9907c9d407714033faf7c0cc6f18e3d667dc4ad3a9d6f72943d8555f7d29c5d7ef6de5537aeba60513ea4d85f61af99bc6ac0c23ec41fb9e78c7ffe6185a138be79a4c1e851a644d5b8d3eda60740056d8443dc0d1639028aa2ea42d7d5c12ceffc6c1d286ec1db2e738d3879652325eca1bac248f1e8004fb8148f8d77046f1ce970b462fee6a4dbb7dfb0a1095af7988420d647722fd1e8fc11abaf1bd06082fea5bad117eb0512644744efb4dd5d76083c58bd4bff57844ad35ea44f859d5f8cf64e292529397a56be0fd4701a0c2961beab2fa51f835b30b7cce97fc259494327cc512c9671a6d113fcfc5a10653e9c40d47fe80c74eafb991d21899bc460f691170034231f92a005e2d9a92d9960e71f64f565d4457f0fe9f5e6154ab111f67057b12a098d75e3cb9d2777e0261cc0a72ed4a11d2c3eb0873eaddd3e4e50218036dd0a607fd1421eab0cbf7963d3f23d34807b884a7fb8c078107ed4ad4642d789010332e9b60bcc96f8a7197d5dd4b05121132cddaaa5db66bb798712d3ff477bff5df023713612502e66cd0db528f3a168c3938517b766aedcbd358e103e13ae024eb5d5049115064f084f2330670c59dbfc429ec5ebff17fbd79e09aadb63d7684ce35f50d55b7fa86256051ab2d4782400e06c514bd64d8621a14b50b7822cd73e046723f1697907a31208822a7e1bca9b030d8093bab24d878b5901eae052da58246034bbbaafceb697920efa4804e585acf46a522e4b9bfb571b52b293fa7d5daed2c9bcf2d6fd8211e9b17151001de747f7d21cf6d56085eb6e66ed055214fdb7ead46204687fa3c6c0019be5393f2a651a29ff7ff9a52a71627ac0949e35ccce3f73a1115002604ad97156701c140ea4a13b2b595b51a0274c61432d0542243cf7fb842603e3869bed181cd24ed849b11068e7d00f3403c5a07d975df01e457e8c56bea2105b4b46ff4981867de0b19d264146755464fe933003b13a44fe99f8c5f604b3e84d0c75151e49ff87cd9c5047d865b82fc2b3de9d37edeccc9cbb795cc88a2a88cc1f1d01e6ba55996f9492f43f1ad761f7734c950901269b3b1a39f8ab4462258a1f220d3b40e7dbb859056d0b78910ff8a1aacac41b9617df9beba6fb974296de910155c81ae8101ba1498d09559e51</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">1周年啦！这是个小预告哦~</summary>
    
    
    
    <category term="Days" scheme="http://dayswithvenki.top/categories/Days/"/>
    
    
  </entry>
  
  <entry>
    <title>Django数据库操作</title>
    <link href="http://dayswithvenki.top/posts/db-of-django.html"/>
    <id>http://dayswithvenki.top/posts/db-of-django.html</id>
    <published>2022-09-21T07:49:56.471Z</published>
    <updated>2022-09-21T14:56:16.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django项目"><a href="#Django项目" class="headerlink" title="Django项目"></a>Django项目</h2><p><img src="https://s2.loli.net/2022/09/21/tsxTLh4efw8oqEG.png" alt="DjangoProject _1_.png"></p><h3 id="0说在前面"><a href="#0-说在前面" class="headerlink" title="0.说在前面"></a>0.说在前面</h3><h4 id="01-django-orm"><a href="#0-1-Django-ORM" class="headerlink" title="0.1 Django ORM"></a>0.1 Django ORM</h4><p>Django 模型使用自带的 ORM。</p><p>对象关系映射（Object Relational Mapping，简称 ORM ）用于实现面向对象编程语言里不同类型系统的数据之间的转换。</p><p>ORM 在业务逻辑层和数据库层之间充当了桥梁的作用。</p><p>ORM 是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到数据库中。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/05/django-orm1.png" alt="img"></p><p>使用 ORM 的好处：</p><ul><li>提高开发效率。</li><li>不同数据库可以平滑切换。</li></ul><p>使用 ORM 的缺点：</p><ul><li>ORM 代码转换为 SQL 语句时，需要花费一定的时间，执行效率会有所降低。</li><li>长期写 ORM 代码，会降低编写 SQL 语句的能力。</li></ul><p>ORM 解析过程:</p><ul><li>1、ORM 会将 Python 代码转成为 SQL 语句。</li><li>2、SQL 语句通过 pymysql 传送到数据库服务端。</li><li>3、在数据库中执行 SQL 语句并将结果返回。</li></ul><p>ORM 对应关系表：<img src="https://www.runoob.com/wp-content/uploads/2020/05/orm-object.png" alt="img"></p><h3 id="1连接数据库"><a href="#1-连接数据库" class="headerlink" title="1.连接数据库"></a>1.连接数据库</h3><h4 id="11-直接下载mysql57版本以上"><a href="#1-1-直接下载MySQL（5-7版本以上）" class="headerlink" title="1.1 直接下载MySQL（5.7版本以上）"></a>1.1 直接下载MySQL（5.7版本以上）</h4><p> 将端口Port设置为3306，管理员Management User为root，密码Password为123456。</p><p>运行以下命令启动MySQL服务。</p><figure class="highlight dos"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> mysql<br></code></pre></td></tr></tbody></table></figure><h4 id="12-通过docker安装mysql"><a href="#1-2-通过Docker安装MySQL" class="headerlink" title="1.2 通过Docker安装MySQL"></a>1.2 通过Docker安装MySQL</h4><p>Windows Terminal运行以下命令：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -p 3306:3306 --name mysql -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=123456 -d mysql:latest<br></code></pre></td></tr></tbody></table></figure><p>在Docker container 启动 MySQL服务。</p><h4 id="13-django项目连接mysql数据库"><a href="#1-3-Django项目连接MySQL数据库" class="headerlink" title="1.3 Django项目连接MySQL数据库"></a>1.3 Django项目连接MySQL数据库</h4><h5 id="131-安装mysqlclient"><a href="#1-3-1-安装MySQLClient" class="headerlink" title="1.3.1 安装MySQLClient"></a>1.3.1 安装MySQLClient</h5><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install mysqlclient<br></code></pre></td></tr></tbody></table></figure><h5 id="132-配置settings文件"><a href="#1-3-2-配置settings文件" class="headerlink" title="1.3.2 配置settings文件"></a>1.3.2 配置settings文件</h5><p>打开settings.py项目配置文件</p><p>找到DATABASES配置项，并按以下修改：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br>DATABASES = {<br>    <span class="hljs-string">'default'</span>: {<br>        <span class="hljs-comment"># 连接本地mysql数据库</span><br>        <span class="hljs-string">'ENGINE'</span>: <span class="hljs-string">'django.db.backends.mysql'</span>,<br>        <span class="hljs-string">'NAME'</span>: <span class="hljs-string">'mysql'</span>,  <span class="hljs-comment"># 你的数据库名</span><br>        <span class="hljs-string">'USER'</span>: <span class="hljs-string">'root'</span>,  <span class="hljs-comment"># 你的用户名</span><br>        <span class="hljs-string">'PASSWORD'</span>: <span class="hljs-string">'123456'</span>,  <span class="hljs-comment"># 你的密码</span><br>        <span class="hljs-string">'HOST'</span>: <span class="hljs-string">'localhost'</span>,  <span class="hljs-comment"># 本地连接</span><br>        <span class="hljs-string">'PORT'</span>: <span class="hljs-string">'3306'</span>,  <span class="hljs-comment"># 本地端口号</span><br><br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="2-建表并进行简单的增删改操作"><a href="#2-建表并进行简单的增删改操作" class="headerlink" title="2. 建表并进行简单的增删改操作"></a>2. 建表并进行简单的增删改操作</h3><h4 id="21-建立表格"><a href="#2-1-建立表格" class="headerlink" title="2.1 建立表格"></a>2.1 建立表格</h4><p>打开APP下的models.py文件</p><p>假设要创建一个评价模块，其中：</p><p>需要编码，模块名称，分值</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">models.py<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Evaluation</span>(models.Model):<br>    <span class="hljs-built_in">id</span> = models.AutoField(primary_key=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">"编码"</span>)<br>    name = models.CharField(verbose_name=<span class="hljs-string">"模块名称"</span>, max_length=<span class="hljs-number">32</span>)<br>    score = models.PositiveIntegerField(verbose_name=<span class="hljs-string">"分值"</span>, max_length=<span class="hljs-number">2</span>)    <span class="hljs-comment"># 正整数</span><br></code></pre></td></tr></tbody></table></figure><p>在终端运行以下命令:</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></tbody></table></figure><p>可以看到数据库内以及建好一个名为app01_evalution的表，表的结构如下图所示：</p><p><img src="https://s2.loli.net/2022/09/21/9n51BJcj4yNelVw.png" alt="image-20220921212211849"></p><h4 id="22-数据增删改"><a href="#2-2-数据增删改" class="headerlink" title="2.2 数据增删改"></a>2.2 数据增删改</h4><p>先于urls.py 文件的urlpatterns添加以下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br>urlpatterns = [<br>    ...,<br>    path(<span class="hljs-string">'test/add/'</span>, views.test_add),<br>    path(<span class="hljs-string">'test/edit/'</span>, views.test_edit),<br>    path(<span class="hljs-string">'test/delete/'</span>, views.test_delete),<br>    path(<span class="hljs-string">'test/list/'</span>, views.test_list),<br>]<br></code></pre></td></tr></tbody></table></figure><h5 id="221-新增数据"><a href="#2-2-1-新增数据" class="headerlink" title="2.2.1 新增数据"></a>2.2.1 新增数据</h5><blockquote><p>新增如下数据</p></blockquote><div class="table-container"><table><thead><tr><th>ID</th><th>模板名称</th><th>分值</th></tr></thead><tbody><tr><td>1</td><td>模块1：选择题目</td><td>20</td></tr><tr><td>2</td><td>模块2：掌握情况</td><td>10</td></tr><tr><td>3</td><td>Need_TO_DELETE</td><td>0</td></tr></tbody></table></div><p>于views.py 添加:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,redirect,HttpResponse<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">"""添加评价"""</span><br>    names = [<span class="hljs-string">'模块1：选择题目'</span>, <span class="hljs-string">'模块2：掌握情况'</span>, <span class="hljs-string">'Need_TO_DELETE'</span>]<br>    scores = [<span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        models.Evaluation.objects.create(name=names[i], score=scores[i])<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'添加成功'</span>)<br></code></pre></td></tr></tbody></table></figure><p>浏览器访问 <a href="http://localhost:8888/test/add/">http://localhost:8888/test/add/</a></p><p>可观察到已经有新增的数据：</p><p><img src="https://s2.loli.net/2022/09/21/7dgewsXOqb6VKnm.png" alt="image-20220921215756701"></p><h5 id="222-修改数据"><a href="#2-2-2-修改数据" class="headerlink" title="2.2.2 修改数据"></a>2.2.2 修改数据</h5><blockquote><p>将id为3的数据的score 改为 5</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_edit</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">"""修改评价"""</span><br>    models.Evaluation.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).update(score=<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'修改成功'</span>)<br></code></pre></td></tr></tbody></table></figure><p>浏览器访问<a href="http://localhost:8888/test/edit/">http://localhost:8888/test/edit/</a></p><p><img src="https://s2.loli.net/2022/09/21/6nzYHj5yrcPhKkW.png" alt="image-20220921220530673"></p><h5 id="223-删除数据"><a href="#2-2-3-删除数据" class="headerlink" title="2.2.3 删除数据"></a>2.2.3 删除数据</h5><blockquote><p>删除id为3的数据</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_delete</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">"""删除评价"""</span><br>    models.Evaluation.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">3</span>).delete()<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'删除成功'</span>)<br></code></pre></td></tr></tbody></table></figure><p>浏览器访问<a href="http://localhost:8888/test/delete/">http://localhost:8888/test/delete/</a></p><p><img src="https://s2.loli.net/2022/09/21/GIonq5AU3usgPye.png" alt="image-20220921220729930"></p><h5 id="224-展示所有数据"><a href="#2-2-4-展示所有数据" class="headerlink" title="2.2.4 展示所有数据"></a>2.2.4 展示所有数据</h5><blockquote><p>在Python中输出表中的数据并展示在页面上</p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_list</span>(<span class="hljs-params">request</span>):<br>    datas = models.Evaluation.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> datas:<br>        <span class="hljs-built_in">print</span>(data.<span class="hljs-built_in">id</span>, data.name, data.score)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">'test.html'</span>, {<span class="hljs-string">'datas'</span>: datas})<br></code></pre></td></tr></tbody></table></figure><p>在test.html的nav标签下新增以下代码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-header"</span>&gt;</span><br>            评价模块<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"card-body"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table table-bordered table-striped"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"col"</span>&gt;</span>编码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"col"</span>&gt;</span>模块名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"col"</span>&gt;</span>分值<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"col"</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                {% for obj in datas %}<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">"row"</span>&gt;</span>{{ obj.id }}<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{{ obj.name }}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>{{ obj.score }}<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-sm"</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                {% endfor %}<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><blockquote><p>python控制台输出结果为：</p></blockquote><p><img src="https://s2.loli.net/2022/09/21/WIkcD26uadFf1rS.png" alt="image.png"></p><blockquote><p>浏览器返回如下：</p></blockquote><p><img src="https://s2.loli.net/2022/09/21/fvNrgSsj7kEqA8i.png" alt="image-20220921222920070" style="zoom:50%;"></p>]]></content>
    
    
    <summary type="html">Django项目连接数据库并进行数据库操作</summary>
    
    
    
    
    <category term="👨‍💻Django" scheme="http://dayswithvenki.top/tags/%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBDjango/"/>
    
  </entry>
  
  <entry>
    <title>Django的配置与安装</title>
    <link href="http://dayswithvenki.top/posts/install-django.html"/>
    <id>http://dayswithvenki.top/posts/install-django.html</id>
    <published>2022-09-21T01:14:45.967Z</published>
    <updated>2022-09-21T14:59:28.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django项目"><a href="#Django项目" class="headerlink" title="Django项目"></a>Django项目</h2><p><img src="https://s2.loli.net/2022/09/21/j8MXREnumFKaPIq.png" alt="DjangoProject _3_.png"></p><h3 id="1安装django"><a href="#1-安装Django" class="headerlink" title="1.安装Django"></a>1.安装Django</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install django<br><br><span class="hljs-comment"># Python终端验证安装</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> django<br><span class="hljs-meta">&gt;&gt;&gt; </span>django.get_version()<br><span class="hljs-string">'4.1.1'</span><br></code></pre></td></tr></tbody></table></figure><h4 id="11终端创建django项目"><a href="#1-1终端创建Django项目" class="headerlink" title="1.1终端创建Django项目"></a>1.1终端创建Django项目</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">django-admin startproject DjangoProject<br></code></pre></td></tr></tbody></table></figure><p> 目录结构：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">$ cd DjangoProject/<br>$ tree<br>.<br>|-- DjangoProject<br>|   |-- __init__.py<br>|   |-- asgi.py<br>|   |-- settings.py<br>|   |-- urls.py<br>|   `-- wsgi.py<br>`-- manage.py<br></code></pre></td></tr></tbody></table></figure><p>目录说明：</p><ul><li>DjangoProject: 项目容器</li><li>manage.py: 命令行工具</li><li>DjangoProject/<strong> init </strong>.py: 告诉Python该目录为Python包</li><li>DjangoProject/asgi.py: ASGI兼容的Web服务器入口，以便项目运行</li><li>DjangoProject/settings.py: 当前项目的配置文件</li><li>DjangoProject/urls.py: 当前项目的URL声明，由Django驱动的网站”目录“</li><li>DjangoProject/wsgi.py: WSGI兼容的Web服务器入口，以便项目运行</li></ul><h4 id="12pycharm创建django项目"><a href="#1-2PyCharm创建Django项目" class="headerlink" title="1.2PyCharm创建Django项目"></a>1.2PyCharm创建Django项目</h4><p><img src="https://s2.loli.net/2022/09/21/nAMc9k2imo3XEHW.png" alt></p><p>配置启动项：</p><p><img src="https://s2.loli.net/2022/09/21/RCmenVq9K6YZWAF.png" alt="image-20220921093707281"></p><p><img src="https://s2.loli.net/2022/09/21/8QbiZdaYIkJNKsf.png" alt="image-20220921093738030"></p><p>运行即可自动启动项目。</p><h3 id="2-创建可以在浏览器查看的页面"><a href="#2-创建可以在浏览器查看的页面" class="headerlink" title="2. 创建可以在浏览器查看的页面"></a>2. 创建可以在浏览器查看的页面</h3><h4 id="21-创建并注册app"><a href="#2-1-创建并注册APP" class="headerlink" title="2.1 创建并注册APP"></a>2.1 创建并注册APP</h4><h5 id="211创建app"><a href="#2-1-1创建APP" class="headerlink" title="2.1.1创建APP"></a>2.1.1创建APP</h5><p>Pycharm左上角目录&gt;工具&gt;运行 manage.py 任务：</p><p>​    在启动的窗口中</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">manage.py@djangoProject2 &gt; startapp app01<br></code></pre></td></tr></tbody></table></figure><p>新建app目录如下：</p><p><img src="https://s2.loli.net/2022/09/21/FIs4AvLrjlnyGg1.png" alt="image-20220921095606996"></p><h5 id="212-注册app"><a href="#2-1-2-注册APP" class="headerlink" title="2.1.2 注册APP"></a>2.1.2 注册APP</h5><p>找到DjangoProject/settings.py &gt; INSTALLED_APPS</p><p>加入以下内容</p><p><img src="https://s2.loli.net/2022/09/21/1vBiCWAQakuIgnc.png" alt="image-20220921095951467"></p><h4 id="22-启动项目"><a href="#2-2-启动项目" class="headerlink" title="2.2 启动项目"></a>2.2 启动项目</h4><p>终端启动（Pycharm直接运行项目即可）：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py runserver <span class="hljs-number">8888</span><br></code></pre></td></tr></tbody></table></figure><p>出现链接<a href="http://127.0.0.1:8888/点击跳转后：">http://127.0.0.1:8888/点击跳转后：</a></p><p><img src="https://s2.loli.net/2022/09/21/UVwi7A34dFPZLGC.png" alt="image-20220921100325923"></p><p>Django项目启动成功。</p><h3 id="3创建可访问页面"><a href="#3-创建可访问页面" class="headerlink" title="3.创建可访问页面"></a>3.创建可访问页面</h3><h4 id="31在app文件夹下创建templates和static文件夹"><a href="#3-1在APP文件夹下创建templates和static文件夹" class="headerlink" title="3.1在APP文件夹下创建templates和static文件夹"></a>3.1在APP文件夹下创建templates和static文件夹</h4><p>templates：用于存放html文件。</p><p>static：用于存放静态文件。</p><h5 id="311-于templates下新建html文件如testhtml"><a href="#3-1-1-于templates下新建html文件（如：test-html）" class="headerlink" title="3.1.1 于templates下新建html文件（如：test.html）"></a>3.1.1 于templates下新建html文件（如：test.html）</h5><p><img src="https://s2.loli.net/2022/09/21/v72YR1JuUVQTXW3.png" alt="image-20220921101233013"></p><h5 id="312-于static下新建css目录与js目录"><a href="#3-1-2-于static下新建css目录与js目录" class="headerlink" title="3.1.2 于static下新建css目录与js目录"></a>3.1.2 于static下新建css目录与js目录</h5><p>(1)在CSS目录下新建bootstrap的bootstrap.min.css文件</p><p>将<a href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.1/css/bootstrap.min.css">https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.1/css/bootstrap.min.css</a> 复制进入新建的bootstrap.min.css中</p><p>(2)在JS目录下新建boostrap.bundle.min.js</p><p>将<a href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.1/js/bootstrap.bundle.min.js">https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.1/js/bootstrap.bundle.min.js</a> 复制进新建的bootstrap.bundle.min.js中</p><p><img src="https://s2.loli.net/2022/09/21/Y6eCjFDmsfzVkgI.png" alt="image-20220921101843485"></p><h5 id="313-于html文件中引入js和css文件并增添内容"><a href="#3-1-3-于html文件中引入js和css文件并增添内容" class="headerlink" title="3.1.3 于html文件中引入js和css文件并增添内容"></a>3.1.3 于html文件中引入js和css文件并增添内容</h5><p>(1) 将html改为以下：</p><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">+ {% load static %}</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang="en"&gt;<br>&lt;head&gt;<br>    &lt;meta charset="UTF-8"&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br><span class="hljs-addition">+   &lt;link href="{% static 'css/bootstrap.min.css' %}" rel="stylesheet" /&gt;</span><br>&lt;/head&gt;<br>&lt;body&gt;<br><span class="hljs-addition">+ &lt;div class="container"&gt;</span><br><span class="hljs-addition">+    &lt;nav class="navbar navbar-light bg-light"&gt;</span><br><span class="hljs-addition">+        &lt;div class="container-fluid"&gt;</span><br><span class="hljs-addition">+            &lt;a class="navbar-brand" href="#"&gt;</span><br><span class="hljs-addition">+                &lt;img src="https://v5.bootcss.com/docs/5.1/assets/brand/bootstrap-logo.svg" alt="" width="30" height="24"</span><br><span class="hljs-addition">+                     class="d-inline-block align-text-top"&gt;</span><br><span class="hljs-addition">+                Bootstrap</span><br><span class="hljs-addition">+            &lt;/a&gt;</span><br><span class="hljs-addition">+        &lt;/div&gt;</span><br><span class="hljs-addition">+    &lt;/nav&gt;</span><br><span class="hljs-addition">+ &lt;/div&gt;</span><br>&lt;/body&gt;<br><span class="hljs-addition">+&lt;script src="{% static 'js/boostrap.bundle.min.js' %}"&gt;&lt;/script&gt;</span><br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="32-使新增的html可访问"><a href="#3-2-使新增的html可访问" class="headerlink" title="3.2 使新增的html可访问"></a>3.2 使新增的html可访问</h4><h5 id="321-新建视图函数"><a href="#3-2-1-新建视图函数" class="headerlink" title="3.2.1 新建视图函数"></a>3.2.1 新建视图函数</h5><p>打开APP中的views.py文件</p><p>增加以下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">newtest</span>(<span class="hljs-params">request</span>):<br><span class="hljs-keyword">return</span> render(request, <span class="hljs-string">'test.html'</span>)<br></code></pre></td></tr></tbody></table></figure><h5 id="322-配置url绑定视图函数"><a href="#3-2-2-配置URL绑定视图函数" class="headerlink" title="3.2.2 配置URL绑定视图函数"></a>3.2.2 配置URL绑定视图函数</h5><p>打开项目中的urls.py文件</p><p>(1)从app中import views</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<span class="hljs-comment"># app01是新建的app名</span><br></code></pre></td></tr></tbody></table></figure><p>(2)在urlpatterns列表下新增path</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">'test/'</span>, views.newtest),<span class="hljs-comment"># test/为你需要访问的url</span><br></code></pre></td></tr></tbody></table></figure><h6 id="3221-path函数"><a href="#3-2-2-1-path函数：" class="headerlink" title="3.2.2.1 path函数："></a>3.2.2.1 path函数：</h6><p>Django path() 可以接收四个参数，分别是两个必选参数：route、view 和两个可选参数：kwargs、name。</p><p>语法格式：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(route, view, kwargs=<span class="hljs-literal">None</span>, name=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></tbody></table></figure><ul><li>route: 字符串，表示 URL 规则，与之匹配的 URL 会执行对应的第二个参数 view。</li><li>view: 用于执行与正则表达式匹配的 URL 请求。</li><li>kwargs: 视图使用的字典类型的参数。</li><li>name: 用来反向获取 URL。</li></ul><h5 id="323-访问新建的页面"><a href="#3-2-3-访问新建的页面" class="headerlink" title="3.2.3 访问新建的页面"></a>3.2.3 访问新建的页面</h5><h6 id="3231-浏览器访问-1270018888"><a href="#3-2-3-1-浏览器访问-127-0-0-1-8888" class="headerlink" title="3.2.3.1 浏览器访问 127.0.0.1:8888"></a>3.2.3.1 浏览器访问 127.0.0.1:8888</h6><p>页面变为：</p><p><img src="https://s2.loli.net/2022/09/21/oPmiOlvXdUCaQ5L.png" alt="image-20220921103728982"></p><p>可以看到已经可以访问以下URL：</p><p>1.admin/</p><p>2.test/</p><h6 id="3232-访问1270018888test"><a href="#3-2-3-2-访问127-0-0-1-8888-test" class="headerlink" title="3.2.3.2 访问127.0.0.1:8888/test/"></a>3.2.3.2 访问127.0.0.1:8888/test/</h6><p><img src="https://s2.loli.net/2022/09/21/7JTVxp6n3z1i5NE.png" alt="image-20220921104118986"></p><p>到这里，以及完成项目的建立和运行，以及URL和视图函数的配置与绑定。</p>]]></content>
    
    
    <summary type="html">Django项目配置安装的记录</summary>
    
    
    
    
    <category term="👨‍💻Django" scheme="http://dayswithvenki.top/tags/%F0%9F%91%A8%E2%80%8D%F0%9F%92%BBDjango/"/>
    
  </entry>
  
  <entry>
    <title>OS LAB1 实验报告</title>
    <link href="http://dayswithvenki.top/posts/os-lab1.html"/>
    <id>http://dayswithvenki.top/posts/os-lab1.html</id>
    <published>2022-09-18T14:30:56.651Z</published>
    <updated>2022-09-18T14:47:54.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xv6环境搭建过程"><a href="#xv6环境搭建过程" class="headerlink" title="xv6环境搭建过程"></a>xv6环境搭建过程</h2><h3 id="1-安装vmware虚拟机"><a href="#1-安装VMware虚拟机" class="headerlink" title="1.  安装VMware虚拟机"></a>1.  安装VMware虚拟机</h3><h3 id="2-下载ubuntu-iso包"><a href="#2-下载Ubuntu-ISO包" class="headerlink" title="2.  下载Ubuntu ISO包"></a>2.  下载Ubuntu ISO包</h3><h3 id="3-于vmware创建ubuntu-系统虚拟机"><a href="#3-于VMware创建Ubuntu-系统虚拟机" class="headerlink" title="3.  于VMware创建Ubuntu 系统虚拟机"></a>3.  于VMware创建Ubuntu 系统虚拟机</h3><h3 id="4-xv6的环境搭建"><a href="#4-xv6的环境搭建" class="headerlink" title="4.   xv6的环境搭建"></a>4.   xv6的环境搭建</h3><h4 id="41-在虚拟机中运行以下命令"><a href="#4-1-在虚拟机中运行以下命令" class="headerlink" title="4.1 在虚拟机中运行以下命令"></a>4.1 在虚拟机中运行以下命令</h4><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt-get <span class="hljs-keyword">install </span>git <span class="hljs-keyword">build-essential </span>gdb-<span class="hljs-keyword">multiarch </span>qemu-system-misc gcc-riscv64-linux-gnu <span class="hljs-keyword">binutils-riscv64-linux-gnu </span><br></code></pre></td></tr></tbody></table></figure><p>​    运行中出现以下错误</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220916094258.png" alt></p><p>​    按提示运行命令:</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></tbody></table></figure><p>​    再次运行命令1后安装成功。</p><p>​    检验qwmu是否安装成功:</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220915232401731.png" alt></p><h4 id="42-安装xv6"><a href="#4-2-安装Xv6" class="headerlink" title="4.2 安装Xv6"></a>4.2 安装Xv6</h4><p>​        安装git:</p><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> git<br></code></pre></td></tr></tbody></table></figure><p>​        然后运行以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git://g.csail.mit.edu/xv6-labs-2021<br><span class="hljs-built_in">cd</span> xv6-labs-2021<br>git checkout util<br>git commit -am <span class="hljs-string">'my solution for util lab exercise 1'</span><br></code></pre></td></tr></tbody></table></figure><p>​        此时需要配置用户名、邮箱：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">'Kevin'</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">'1171407839@qq.com'</span><br></code></pre></td></tr></tbody></table></figure><p>​        在xv6目录下运行以下命令:</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make qemu</span><br></code></pre></td></tr></tbody></table></figure><p>​        得到以下结果：</p><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220915233200732.png" alt></p><p>XV6环境搭建完毕。</p><h3 id="5三个练手小程序"><a href="#5-三个练手小程序" class="headerlink" title="5.三个练手小程序"></a>5.三个练手小程序</h3><h4 id="51-sleep"><a href="#5-1-sleep" class="headerlink" title="5.1 sleep"></a>5.1 sleep</h4><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Implement <span class="hljs-keyword">the</span> UNIX program sleep <span class="hljs-keyword">for</span> xv6; your sleep should pause <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> user-specified <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-built_in">ticks</span>. A <span class="hljs-built_in">tick</span> is <span class="hljs-keyword">a</span> notion <span class="hljs-keyword">of</span> <span class="hljs-built_in">time</span> defined <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> xv6 kernel, namely <span class="hljs-keyword">the</span> <span class="hljs-built_in">time</span> between <span class="hljs-literal">two</span> interrupts <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> timer chip. Your solution should be <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> user/sleep.c. <br></code></pre></td></tr></tbody></table></figure><h5 id="511-解题思路"><a href="#5-1-1-解题思路" class="headerlink" title="5.1.1 解题思路"></a>5.1.1 解题思路</h5><p>​        从user/user.h 中system call可以看到sleep函数的声明为 int sleep(int); </p><p>​        所以，可以从main中的参数argc(argument count)确定参数的个数，其中，第一个参数为程序的名称，即sleep，而正确运行还需要一个且仅需要一个int型参数。所以当argc不为2时，则输出错误信息并退出；否则，将argv[1]转化为int传入sleep()，随后正常退出。</p><h5 id="512-代码"><a href="#5-1-2-代码" class="headerlink" title="5.1.2 代码"></a>5.1.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* argv[])</span>{<br>    <span class="hljs-comment">// argv[0]为程序的名称sleep,argv[1]为参数</span><br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">2</span>){<br>        <span class="hljs-comment">// 若除了sleep外参数传入个数不为1</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>,<span class="hljs-string">"Error！Wrong Format!"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 错误退出</span><br>    }<br>    sleep(atoi(argv[<span class="hljs-number">1</span>])); <br>    <span class="hljs-comment">// 将argv[1]转化为整型传入sleep</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="513-运行结果测试"><a href="#5-1-3-运行结果测试" class="headerlink" title="5.1.3 运行结果测试"></a>5.1.3 运行结果测试</h5><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220916093520883.png" alt></p><h4 id="52-pingpong"><a href="#5-2-pingpong" class="headerlink" title="5.2 pingpong"></a>5.2 pingpong</h4><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Write a program that uses UNIX system calls to <span class="hljs-string">''</span>ping-pong<span class="hljs-string">''</span> a byte between two processes over a pair of pipes, one <span class="hljs-keyword">for</span> each direction. The parent should send a byte to the child; the child should print <span class="hljs-string">"&lt;pid&gt;: received ping"</span>, where &lt;pid&gt; is its process ID, write the byte on the pipe to the parent, and <span class="hljs-keyword">exit</span>; the parent should read the byte from the child, print <span class="hljs-string">"&lt;pid&gt;: received pong"</span>, and <span class="hljs-keyword">exit</span>. Your solution should be <span class="hljs-keyword">in</span> the file user/pingpong.c. <br></code></pre></td></tr></tbody></table></figure><h5 id="521-解题思路"><a href="#5-2-1-解题思路" class="headerlink" title="5.2.1 解题思路"></a>5.2.1 解题思路</h5><p>​        fork()用于创建子进程，当fork返回0时，表示当前正处于子进程；在父进程中，fork返回新创建子进程的进程ID；若出现错误，fork返回负值。</p><p>​        pipe()被调用时开辟一块缓冲区（管道）用于通信，拥有读端与写端，可通过filedes参数传出给用户程序两个文件描述符，其中filedes[0]指向读端，filedes[1]指向写端。管道在程序中如同打开的文件，所以可以通过write(filedes[1])和read(filedes[0])读写内核缓冲区。</p><p>​        当前进程为子进程时，关闭子进程的写与父进程的读端，当子进程从管道0读到父进程写入管道1的字节时，输出当前pid 与 ping；当前进程为父进程时，关闭父进程的写与子进程的读端，当父进程从管道1读到子进程写入管道0的字节时，输出当前pid 与 pong，最后关闭两个管道的所有读写端口。</p><h5 id="522-代码"><a href="#5-2-2-代码" class="headerlink" title="5.2.2 代码"></a>5.2.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> READ = <span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> WRITE = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> child;<span class="hljs-comment">//若此处写成int child = fork() 测试时会报错</span><br>    <span class="hljs-type">int</span> filede0[<span class="hljs-number">2</span>];     <span class="hljs-comment">// 子进程的读写端</span><br>    <span class="hljs-type">int</span> filede1[<span class="hljs-number">2</span>];     <span class="hljs-comment">// 父进程的读写端</span><br><br>    <span class="hljs-keyword">if</span> (pipe(filede0) || pipe(filede1)) <span class="hljs-comment">// pipe调用返回-1表示失败，返回1表示成功</span><br>    {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error!Pipe Call Fails!"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    }<br><br>    <span class="hljs-keyword">if</span> ((child= fork()) == <span class="hljs-number">0</span>) <span class="hljs-comment">// 创建子进程且当前为子进程时</span><br>    {<br>        close(filede0[WRITE]);<span class="hljs-comment">// 关闭子进程的写</span><br>        close(filede1[READ]);<span class="hljs-comment">// 关闭父进程的读</span><br>        write(filede0[WRITE], <span class="hljs-string">"child"</span>, <span class="hljs-number">1</span>);<br>        read(filede1[READ], <span class="hljs-string">"from father"</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d: received ping\n"</span>, getpid());<br>        <span class="hljs-comment">//先关闭读再关闭写</span><br>        close(filede0[READ]);<br>        close(filede1[WRITE]);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>        close(filede0[READ]);<br>        close(filede1[WRITE]);<br>        write(filede0[WRITE], <span class="hljs-string">"father"</span>, <span class="hljs-number">1</span>);<br>        read(filede1[READ], <span class="hljs-string">"from child"</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d: received pong\n"</span>, getpid());<br>        close(filede1[READ]);<br>        close(filede0[WRITE]);<br>        wait(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="523-运行结果测试"><a href="#5-2-3-运行结果测试" class="headerlink" title="5.2.3 运行结果测试"></a>5.2.3 运行结果测试</h5><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220916104606876.png" alt></p><h4 id="53-primes"><a href="#5-3-primes" class="headerlink" title="5.3 primes"></a>5.3 primes</h4><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Write <span class="hljs-keyword">a</span> concurrent <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> prime sieve <span class="hljs-keyword">using</span> pipes. This idea is due <span class="hljs-built_in">to</span> Doug McIlroy, inventor <span class="hljs-keyword">of</span> Unix pipes. The picture halfway down this page <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span> surrounding <span class="hljs-keyword">text</span> explain how <span class="hljs-built_in">to</span> <span class="hljs-built_in">do</span> <span class="hljs-keyword">it</span>. Your solution should be <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> user/primes.c. <br></code></pre></td></tr></tbody></table></figure><h5 id="531-解题思路"><a href="#5-3-1-解题思路" class="headerlink" title="5.3.1 解题思路"></a>5.3.1 解题思路</h5><p>​    进程1输入2-35；进程2打印第一个质数2后，将所有进程1输入的、是进程2打印的质数的倍数的丢弃，把剩余的交给进程3；进程3打印第二个质数3，将所有进程2输入的、是进程3打印的质数的倍数丢弃，把剩余交给进程4……一直重复，直至剩余的输入为空。</p><h5 id="532-代码"><a href="#5-3-2-代码" class="headerlink" title="5.3.2 代码"></a>5.3.2 代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/types.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"kernel/stat.h"</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">"user/user.h"</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">35</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> READ = <span class="hljs-number">0</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> WRITE = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">primes</span><span class="hljs-params">(<span class="hljs-type">int</span> pre_read)</span><br>{<br>    <span class="hljs-type">int</span> prime;<br>    <span class="hljs-keyword">if</span> (read(pre_read, &amp;prime, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)) &lt;= <span class="hljs-number">0</span>)<span class="hljs-comment">// 若prime不为空或文件尾</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"prime %d\n"</span>, prime);<br>    <span class="hljs-type">int</span> filede[<span class="hljs-number">2</span>];<br>    pipe(filede);<br>    <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)<span class="hljs-comment">// 若为上个进程的子进程，即清空上一个输出的质数的倍数后</span><br>    {<br>        close(filede[WRITE]); <span class="hljs-comment">// 关闭写</span><br>        primes(filede[READ]);<span class="hljs-comment">// 递归</span><br>        close(filede[READ]);<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>        <span class="hljs-type">int</span> temp;<br>        close(filede[READ]);<br>        <span class="hljs-keyword">while</span> (read(pre_read, &amp;temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)))<br>            <span class="hljs-keyword">if</span> (temp % prime != <span class="hljs-number">0</span>)<span class="hljs-comment">// 剔除prime的倍数，将剩余的写回pipe中</span><br>                write(filede[WRITE], &amp;temp, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        close(filede[WRITE]);<br>        wait(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>{<br>    <span class="hljs-type">int</span> filede[<span class="hljs-number">2</span>];<br>    pipe(filede);<br>    <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)<br>    {<br>        close(filede[WRITE]);<br>        primes(filede[READ]);<br>        close(filede[READ]);<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>        close(filede[READ]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=MAX;i++)<br>            write(filede[WRITE],&amp;i,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//将2-35依次写入filede</span><br>        close(filede[WRITE]);<br>        wait(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br><br></code></pre></td></tr></tbody></table></figure><h5 id="533-运行结果测试"><a href="#5-3-3-运行结果测试" class="headerlink" title="5.3.3 运行结果测试"></a>5.3.3 运行结果测试</h5><p><img src="C:\Users\Wadehl\AppData\Roaming\Typora\typora-user-images\image-20220916121027380.png" alt></p><h3 id="6实验心得"><a href="#6-实验心得" class="headerlink" title="6.实验心得"></a>6.实验心得</h3><p>​        首先，配置环境应该选比较充裕的时间，防止校园网网速过慢导致一个学生失去他的梦想，几个G的Ubuntu系统，以及几百M的VMware虚拟机软件等，还没开始配置一个下午就过去了；不仅如此，git clone 在 github+校园网双重debuff下，更是交出了10k/s的下载速度，看他下载又看了一晚上，不过最后也终于可以运行了。</p><p>​        回到练手小程序上，首先比较重要的是看懂hints的内容，对其中出现的如fork()，pipe()等系统调用，想要编写程序必须得先明白他们的作用，以及需要用到哪些参数，我自己是习惯先看中文的解释，等到差不多看明白能够使用了，再好好看看xv6内部是如何进行调用的。</p><p>​        最后，学好英语很重要，无论是Ubuntu系统的Terminal终端，还是各种官方的文档，都是全英的，报错信息都有自带的命令建议。</p>]]></content>
    
    
    <summary type="html">在Ubuntu上搭建XV6环境。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>对未来的小小规划</title>
    <link href="http://dayswithvenki.top/posts/expectation.html"/>
    <id>http://dayswithvenki.top/posts/expectation.html</id>
    <published>2022-09-10T07:51:13.348Z</published>
    <updated>2022-09-18T14:39:36.548Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/09/10/dI12uhYCAXSTger.png" alt="小规划"></p><h2 id="关于网站维护"><a href="#关于网站维护" class="headerlink" title="关于网站维护"></a>关于网站维护</h2><p>​    &nbsp;&nbsp;宝宝呀宝宝，原来自从7月底之后，我就没有再怎么处理过我们网站啦。从8月1号入职开始我才慢慢体会到当工作啥的一起来之后，要维护一个网站的难度真的太大啦！！！特别是当我把很多很多东西都放到了国外的服务商之后，一但被墙，我就要花巨多巨多的时间去维护，功能越多，维护的东西也就越多啦！哎呀呀！！！！</p><p>不过还好啦！也终于把现在有的东西维护好啦！！！然后还学了一些新知识，估计未来慢慢更改，维护成本会越来越低的！！！</p><h2 id="小小规划"><a href="#小小规划" class="headerlink" title="小小规划"></a>小小规划</h2><p>&nbsp;&nbsp;入职之后，特别是接触到许多项目开发后，对从前一些零零散散的知识体系会有一个很不一样的看法，然后现在刚开始，就尽量把前端的各种框架比如：Vue.js,Node.js之类的呀都多多了解清楚，然后把之前一直没有系统训练的HTML语法呀、CSS语法呀、JAVASCRIPT之类的都先做一个系统的学习；然后后端也需要去尽量学习学习，目前正在慢慢学Django的后端框架哇，总之现在对未来的小小希望，也从单纯的前端工程师-&gt;全栈工程师啦！</p><h2 id="认证展示"><a href="#认证展示" class="headerlink" title="认证展示"></a>认证展示</h2><p>&nbsp;&nbsp;最后这里呢，就留给自己展示展示在FreeCodeCamp上面获得的学习证书吧嘎嘎嘎，虽然呢，这些认证意义不大，也非常简单，但是还是放在这儿！留给自己臭美臭美吧！！！！哈哈哈哈哈哈嘎嘎嘎嘎嘎嘎！！！</p><p>1.Responsive Web Design</p><p><img src="https://s2.loli.net/2022/09/10/OBPDCMUIj8xHiv9.jpg" alt="响应式网站" style="zoom: 66%; margin: auto 10px;"></p><p>2.JavaScript 算法和数据结构 </p><p><img src="https://s2.loli.net/2022/09/18/7h5zomaZGnPKM6R.png" style="zoom:73.5%;"></p>]]></content>
    
    
    <summary type="html">About Kevin</summary>
    
    
    
    
    <category term="💻前端" scheme="http://dayswithvenki.top/tags/%F0%9F%92%BB%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一个小小总结</title>
    <link href="http://dayswithvenki.top/posts/summary1.html"/>
    <id>http://dayswithvenki.top/posts/summary1.html</id>
    <published>2022-07-28T09:18:02.000Z</published>
    <updated>2022-07-28T15:07:11.302Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="247323fdbc6fe3e42e170e3f66b7ac2d81d2b69dc6f9d83a15e09e7826fc8b0e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="Days" scheme="http://dayswithvenki.top/categories/Days/"/>
    
    
  </entry>
  
</feed>
