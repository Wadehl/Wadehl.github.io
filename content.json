{"meta":{"title":"Venkiˡᵒᵛᵉ💕","subtitle":"","description":"Hope One Day I Could Be A Font-End Engineer & A Designer","author":"Kevin","url":"http://dayswithvenki.top","root":"/"},"pages":[{"title":"关于Kevin&&Venki","date":"2022-03-02T02:32:00.000Z","updated":"2022-07-05T04:16:50.142Z","comments":true,"path":"about/index.html","permalink":"http://dayswithvenki.top/about/index.html","excerpt":"","text":"css文件好像加载失败了。字体不一样的字可以点击，然后继续。 正在尝试把botui移动到侧边栏啦~ 已将原有的内容更新，并且移动到侧边栏成功咯 [talk with Kevin] 与&nbsp; Kevin&nbsp; （ bot Kevin bot ） 对话中... bot_ui_ini() 联系我B站：我永远爱小吴崽 QQ：1171407839"},{"title":"分类","date":"2020-11-24T07:12:19.000Z","updated":"2022-07-06T03:01:56.456Z","comments":false,"path":"categories/index.html","permalink":"http://dayswithvenki.top/categories/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-27T12:40:24.587Z","comments":true,"path":"archives/index.html","permalink":"http://dayswithvenki.top/archives/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-10-31T02:11:28.000Z","updated":"2021-11-23T10:50:01.880Z","comments":false,"path":"comments/index.html","permalink":"http://dayswithvenki.top/comments/index.html","excerpt":"","text":""},{"title":"课表","date":"2022-03-03T16:00:00.000Z","updated":"2022-05-19T02:14:00.951Z","comments":false,"path":"classes/index.html","permalink":"http://dayswithvenki.top/classes/index.html","excerpt":"","text":"课表"},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2021-07-27T07:31:10.990Z","comments":true,"path":"link/index.html","permalink":"http://dayswithvenki.top/link/index.html","excerpt":"","text":""},{"title":"郭崽日报","date":"2022-07-04T14:06:17.000Z","updated":"2022-07-06T07:33:07.105Z","comments":false,"path":"bb/index.html","permalink":"http://dayswithvenki.top/bb/index.html","excerpt":"","text":""},{"title":"我的歌单","date":"2019-05-17T08:14:00.000Z","updated":"2022-05-19T02:14:00.951Z","comments":true,"path":"music/index.html","permalink":"http://dayswithvenki.top/music/index.html","excerpt":"","text":""},{"title":"","date":"2022-03-31T01:28:46.808Z","updated":"2022-03-31T01:28:46.808Z","comments":true,"path":"codepen/house.css","permalink":"http://dayswithvenki.top/codepen/house.css","excerpt":"","text":"* { box-sizing: border-box; } ba { display: flex; align-items: center; justify-content: flex-end; flex-direction: column; height: 90vh; background: #a2d8f3; } .body { position: relative; } .roof .top { width: calc(100% + 2 * calc(2 * 1vmin)); background: linear-gradient(#dd9980, #dd9980 50%, #af5842 50%); height: calc(2 * 1vmin); position: relative; left: calc(-2 * 1vmin); } .roof .top:before { content: \"\"; position: absolute; bottom: 0; left: 0; width: 0; height: 0; border-style: solid; border-width: 1vmin 0 0 1vmin; border-color: transparent transparent transparent #a2d8f3; } .roof .top:after { content: \"\"; position: absolute; bottom: 0; right: 0; width: 0; height: 0; border-style: solid; border-width: 0 0 1vmin 1vmin; border-color: transparent transparent #a2d8f3 transparent; } .roof .middle { width: calc(100% + calc(2 * 1vmin)); background-image: linear-gradient( 90deg, #d8785b 25%, #af5842 25%, #af5842 50%, #d8785b 50%, #d8785b 75%, #af5842 75%, #af5842 100% ); background-size: calc(6 * 1vmin) calc(6 * 1vmin); height: calc(2 * 1vmin); position: relative; left: calc(-1 * 1vmin); } .roof .bottom { width: 100%; background: #af5842; height: calc(4 * 1vmin); display: flex; align-items: center; justify-content: space-around; padding: 0 1vmin; } .roof .bottom span { border: calc(0.75 * 1vmin) solid #86432f; border-bottom: none; width: calc(80% / 4); height: 100%; position: relative; } .roof .bottom span:before { content: \"\"; position: absolute; bottom: 0; left: 0; right: 0; margin: 0 auto; background: #86432f; height: calc(2 * 1vmin); width: calc(4 * 1vmin); border-top-right-radius: calc(2 * 1vmin); border-top-left-radius: calc(2 * 1vmin); } .chimney1 { width: calc(3 * 1vmin); height: calc(4 * 1vmin); background: #d8785b; position: absolute; left: calc(6 * 1vmin); top: calc(-4 * 1vmin); } .chimney1:before { position: absolute; top: 0; content: \"\"; width: calc(100% + 1vmin); left: calc(-0.5 * 1vmin); height: 1vmin; background: #dd9980; } .chimney2 { width: calc(6 * 1vmin); height: calc(4 * 1vmin); background: #d8785b; position: absolute; left: calc(12 * 1vmin); top: calc(-4 * 1vmin); } .chimney2:before { position: absolute; top: 0; content: \"\"; width: calc(100% + 1vmin); left: calc(-0.5 * 1vmin); height: 1vmin; background: #dd9980; } .antenna { position: absolute; right: calc(8 * 1vmin); top: calc(-7 * 1vmin); width: 1vmin; height: calc(7 * 1vmin); background: #889bad; } .antenna:before { content: \"\"; position: absolute; height: 1vmin; width: calc(10 * 1vmin); left: calc(-4.5 * 1vmin); top: 1vmin; background: #889bad; } .antenna span { position: absolute; width: 1vmin; background: #889bad; } .antenna .ant1 { height: calc(4 * 1vmin); left: calc(-4.5 * 1vmin); top: calc(-0.5 * 1vmin); } .antenna .ant2 { height: calc(3 * 1vmin); left: calc(-2 * 1vmin); } .antenna .ant3 { height: calc(3 * 1vmin); right: calc(-2 * 1vmin); } .antenna .ant4 { height: calc(4 * 1vmin); right: calc(-4.5 * 1vmin); top: calc(-0.5 * 1vmin); } .floor { width: calc(2 * calc(20 * 1vmin)); height: calc(20 * 1vmin); background: #d8785b; border-top: #af5842 solid calc(2 * 1vmin); position: relative; display: flex; align-items: flex-start; justify-content: space-around; } .floor:before { content: \"\"; position: absolute; top: calc(-2 * 1vmin); left: -1vmin; height: 1vmin; width: calc(100% + 2 * 1vmin); background: #dd9980; } .window { position: relative; top: calc(4 * 1vmin); width: calc(1vmin * 6); height: calc(1vmin * 10); } .window:before { content: \"\"; position: absolute; top: 50%; width: 100%; height: 1vmin; background: #573026; } .windowFrame { height: 100%; width: 100%; background: #62a1cb; border: 1vmin solid #573026; } .windowTop { height: 1vmin; width: calc(100% + 2 * 1vmin); position: absolute; left: -1vmin; background: #dd9980; z-index: 1; top: -1vmin; } .windowTop:before { content: \"\"; position: absolute; top: calc(-2 * 1vmin); width: 0; height: 0; border-style: solid; border-width: 0 calc(4 * 1vmin) calc(2 * 1vmin) calc(4 * 1vmin); border-color: transparent transparent #dd9980 transparent; } .windowTop:after { content: \"\"; position: absolute; top: calc(-1 * 1vmin); left: 0; right: 0; width: 0; height: 0; margin: 0 auto; border-style: solid; border-width: 0 1vmin 1vmin 1vmin; border-color: transparent transparent #af5842 transparent; opacity: 0.7; } .windowBottom { height: calc(2 * 1vmin); width: calc(100% + 2 * 1vmin); position: absolute; left: -1vmin; background: linear-gradient(#dd9980 0, #dd9980 50%, #86432f 50%); } .window9 { visibility: hidden; opacity: 0; } .window1 .windowFrame { background: linear-gradient( 90deg, #fec864 1vmin, #fec864 1vmin, #aa803e 1vmin, #aa803e calc(2 * 1vmin), #fec864 calc(2 * 1vmin) ); } .window2 .windowFrame, .window4 .windowFrame, .window7 .windowFrame { background: linear-gradient( -225deg, #62a1cb, #62a1cb 1vmin, #82c7d0 1vmin, #82c7d0 2vmin, #62a1cb 2vmin, #62a1cb 3vmin, #82c7d0 3vmin, #82c7d0 4vmin, #62a1cb 4vmin ); } .window3 .windowFrame { background: linear-gradient(#62a1cb, #62a1cb 50%, #aa803e 50%); } .window5 .windowFrame { background: linear-gradient( 90deg, #fec864, #fec864 calc(2 * 1vmin), #aa803e calc(2 * 1vmin) ); } .window6 .windowFrame { background: #fec864; } .window8 .windowFrame { background: linear-gradient( -225deg, #62a1cb, #62a1cb 1vmin, #82c7d0 1vmin, #82c7d0 calc(2.5 * 1vmin), #62a1cb calc(2.5 * 1vmin) ); } .zeroLevel { width: 100%; height: calc(8 * 1vmin); position: relative; background: linear-gradient( #7f6a4d, #7f6a4d 1vmin, #523127 1vmin, #523127 calc(2 * 1vmin), #7f6a4d calc(2 * 1vmin) ); } .stairs { height: calc(5 * 1vmin); width: 33%; background: #71372e; position: absolute; bottom: 0; right: 0; background-image: linear-gradient( 0deg, #523127 30%, #7f6a4d 30%, #7f6a4d 50%, #523127 50%, #523127 80%, #7f6a4d 80%, #7f6a4d 100% ); background-size: calc(4 * 1vmin) calc(4 * 1vmin); } .stairs .wall { position: absolute; top: calc(-1 * 1vmin); width: calc(3 * 1vmin); height: calc(5 * 1vmin); background: #86432f; border: 1vmin solid #d8785b; } .stairs .wall:before { content: \"\"; position: absolute; bottom: calc(-2 * 1vmin); left: calc(-1.5 * 1vmin); height: calc(2 * 1vmin); width: calc(4 * 1vmin); background: #dd9980; } .stairs .wall:after { content: \"\"; position: absolute; top: calc(-2 * 1vmin); left: calc(-1.5 * 1vmin); height: calc(2 * 1vmin); width: calc(4 * 1vmin); background: #dd9980; } .stairs .wall1 { left: calc(-0.5 * 1vmin); } .stairs .wall2 { right: calc(-0.5 * 1vmin); } .doorWrapper { height: calc(calc(20 * 1vmin) - calc(2 * 1vmin)); width: 33%; background: #71372e; position: absolute; bottom: calc(8 * 1vmin); right: 0; border: calc(2.5 * 1vmin) solid #7f6a4d; border-top-width: calc(3 * 1vmin); border-bottom: 0; display: flex; } .doorWrapper:before { content: \"\"; position: absolute; top: 0; left: 0; right: 0; height: 1vmin; background: #46221c; } .doorWrapper .topLight { position: absolute; width: 70%; margin: 0 auto; top: calc(1.5 * 1vmin); left: 0; right: 0; background: linear-gradient( 90deg, #fec864, #fec864, 21%, transparent 21%, transparent 33.3%, #aa803e 33.3%, #aa803e 67%, transparent 67%, transparent 73%, #fec864 81%, #fec864 100% ); height: 1vmin; } .doorWrapper .cornice { position: absolute; width: calc(4 * 1vmin); height: 1vmin; background: #9f8560; } .doorWrapper .cornice:before { content: \"\"; position: absolute; top: calc(1 * 1vmin); border-top: 1vmin solid #5f503a; border-left: 1vmin solid transparent; border-right: 1vmin solid transparent; height: 0; width: calc(2 * 1vmin); } .doorWrapper .cornice1 { left: calc(-3 * 1vmin); } .doorWrapper .cornice2 { right: calc(-3 * 1vmin); } .doorWrapper .handrail { position: absolute; width: 100%; bottom: 0; } .doorWrapper .handrail .right { height: calc(6 * 1vmin); width: 1vmin; background: #523127; display: block; position: absolute; right: calc(-1.75 * 1vmin); bottom: 0; } .doorWrapper .handrail .right:before { content: \"\"; width: calc(1.5 * 1vmin); height: calc(1.5 * 1vmin); border-radius: 100%; background: #523127; position: absolute; right: calc(-0.25 * 1vmin); } .doorWrapper .handrail .left { height: calc(6 * 1vmin); width: 1vmin; background: #523127; display: block; position: absolute; left: calc(-1.75 * 1vmin); bottom: 0; } .doorWrapper .handrail .left:before { content: \"\"; width: calc(1.5 * 1vmin); height: calc(1.5 * 1vmin); border-radius: 100%; background: #523127; position: absolute; top: 0; left: calc(-0.25 * 1vmin); } .doorWrapper .door { width: 70%; margin: auto auto 0 auto; height: 80%; background: #71372e; border: calc(2 * 1vmin) solid #523127; border-bottom-width: calc(2 * 1vmin); border-top-width: calc(2 * 1vmin); position: relative; } .doorWrapper .door:before { content: \"\"; position: absolute; top: 40%; left: 0; right: 0; margin: 0 auto; background: #523127; width: 1vmin; height: 1vmin; border-radius: 50%; } .balcony { position: absolute; bottom: calc(-1 * 1vmin); left: calc(-9 * 1vmin); width: calc(9 * 1vmin); height: 1vmin; background: #af5842; } .balcony .grid { position: absolute; left: 0; bottom: calc(2 * 1vmin); width: calc(9 * 1vmin); height: calc(7 * 1vmin); background-image: linear-gradient( 90deg, #484551 16.67%, #a2d8f3 16.67%, #a2d8f3 50%, #484551 50%, #484551 66.67%, #a2d8f3 66.67%, #a2d8f3 100% ); background-size: calc(6 * calc(0.5 * 1vmin)); } .balcony .grid span { width: calc(0.5 * 1vmin); height: calc(1 * 1vmin); display: block; background: #484551; position: absolute; bottom: calc(-1 * 1vmin); } .balcony .grid:before { content: \"\"; position: absolute; left: 0; top: 0; width: calc(9 * 1vmin); height: calc(0.5 * 1vmin); background: #484551; } .balcony .grid:after { content: \"\"; position: absolute; left: 0; bottom: 0; width: calc(9 * 1vmin); height: calc(0.5 * 1vmin); background: #484551; } .balcony .flower { width: calc(2 * 1vmin); height: 1vmin; background: #7f6a4d; position: absolute; top: calc(-9 * 1vmin); } .balcony .flower:before { content: \"\"; width: calc(3 * 1vmin); height: calc(3 * 1vmin); transform: rotate(-45deg); position: absolute; top: calc(-4.5 * 1vmin); right: calc(-0.5 * 1vmin); background: #98b854; } .ladder { width: calc(4 * 1vmin); height: calc(1.7 * calc(20 * 1vmin)); position: absolute; left: calc(-4 * 1vmin); bottom: 13vmin; background-image: linear-gradient( 0deg, #484551 16.67%, #a2d8f3 16.67%, #a2d8f3 50%, #484551 50%, #484551 66.67%, #a2d8f3 66.67%, #a2d8f3 100% ); background-size: calc(10 * calc(0.5 * 1vmin)) calc(10 * calc(0.5 * 1vmin)); z-index: -1; } .ladder:before { content: \"\"; position: absolute; top: 0; left: 0; background: #484551; height: 105%; width: calc(0.5 * 1vmin); } .tree { position: absolute; width: calc(6 * 1vmin); height: calc(8 * 1vmin); background: linear-gradient(90deg, #98b854, #98b854 50%, #76812f 50%); } .tree:before { content: \"\"; position: absolute; width: calc(4 * 1vmin); height: calc(2 * 1vmin); background: #76812f; left: calc(1 * 1vmin); top: calc(-2 * 1vmin); } .tree:after { content: \"\"; position: absolute; width: calc(4 * 1vmin); height: calc(2 * 1vmin); background: #5c7523; left: calc(1 * 1vmin); bottom: calc(-2 * 1vmin); } .tree .trunk { width: 1vmin; height: calc(4 * 1vmin); background: #fff; position: absolute; bottom: calc(-6 * 1vmin); left: calc(2.5 * 1vmin); } .tree .pot { width: calc(4 * 1vmin); height: 1vmin; background: #98b854; position: absolute; bottom: calc(-6.5 * 1vmin); left: calc(1 * 1vmin); } .tree .pot:before { content: \"\"; position: absolute; height: calc(2 * 1vmin); width: calc(5 * 1vmin); background: #484551; bottom: calc(-2 * 1vmin); left: calc(-0.5 * 1vmin); } .tree1 { top: calc(-8.5 * 1vmin); right: calc(-7 * 1vmin); } .tree2 { top: calc(-8.5 * 1vmin); right: calc(14 * 1vmin); } .hydrant { position: absolute; left: calc(-7 * 1vmin); bottom: calc(0.5 * 1vmin); width: calc(3 * 1vmin); height: calc(4 * 1vmin); background: #ca3133; border: 1vmin solid #d65859; } .hydrant:before { content: \"\"; position: absolute; bottom: calc(-1.5 * 1vmin); left: calc(-1.5 * 1vmin); width: calc(4 * 1vmin); height: calc(0.5 * 1vmin); background: #d65859; } .hydrant:after { content: \"\"; position: absolute; top: calc(-1.5 * 1vmin); left: calc(-1.5 * 1vmin); width: calc(4 * 1vmin); height: 1vmin; background: #d65859; } .hydrant span { position: absolute; top: calc(-2.5 * 1vmin); left: calc(-0.5 * 1vmin); width: calc(2 * 1vmin); height: calc(2 * 1vmin); border-radius: 50%; background: #ca3133; } .hydrant span:before { content: \"\"; position: absolute; width: calc(0.5 * 1vmin); height: calc(0.5 * 1vmin); background: #d65859; right: calc(0.8 * 1vmin); top: calc(-0.5 * 1vmin); } .fence { display: flex; position: absolute; bottom: 0; left: calc(-2 * 1vmin); } .fenceSpan { width: calc(5.5 * 1vmin); height: calc(4 * 1vmin); border: calc(0.5 * 1vmin) solid #523127; border-bottom: none; position: relative; } .fenceSpan:before { content: \"\"; position: absolute; width: calc(5.5 * 1vmin); left: calc(-0.5 * 1vmin); top: calc(2 * 1vmin); height: calc(0.5 * 1vmin); background: #523127; } .fenceSpan:after { content: \"\"; position: absolute; width: calc(0.5 * 1vmin); left: calc(2 * 1vmin); top: calc(-0.5 * 1vmin); height: calc(3 * 1vmin); background: #523127; } .ground { width: 100%; height: calc(8 * 1vmin); background: linear-gradient(#938fa0, #938fa0 2vmin, #484551 2vmin); }"},{"title":"","date":"2022-04-05T13:44:25.604Z","updated":"2022-04-05T13:44:25.604Z","comments":true,"path":"self/pojoaque.css","permalink":"http://dayswithvenki.top/self/pojoaque.css","excerpt":"","text":"/* Pojoaque Style by Jason Tate http://web-cms-designs.com/ftopict-10-pojoaque-style-for-highlight-js-code-highlighter.html Based on Solarized Style from http://ethanschoonover.com/solarized */ :root { --hl-color: #FCE8C3; --hl-bg: white; --hltools-bg: teal; --hltools-color: #ffb03b; --hlnumber-bg: transparent; --hlnumber-color: #468966;; --hlscrollbar-bg: white; --hlexpand-bg: white; } #article-container figure.highlight .hljs { color: #ffb03b; background: white; } .hljs-comment, .hljs-quote { color: #586e75; font-style: italic; } .hljs-keyword, .hljs-selector-tag, .hljs-literal, .hljs-addition { color: #b64926; } .hljs-number, .hljs-string, .hljs-doctag, .hljs-regexp { color: #468966; } .hljs-title, .hljs-section, .hljs-built_in, .hljs-name { color: #ffb03b; } .hljs-variable, .hljs-template-variable, .hljs-title.class_, .hljs-class .hljs-title, .hljs-type, .hljs-tag { color: #b58900; } .hljs-attribute { color: #b89859; } .hljs-symbol, .hljs-bullet, .hljs-link, .hljs-subst, .hljs-meta { color: #cb4b16; } .hljs-deletion { color: #dc322f; } .hljs-selector-id, .hljs-selector-class { color: #d3a60c; } .hljs-formula { background: #073642; } .hljs-emphasis { font-style: italic; } .hljs-strong { font-weight: bold; }"},{"title":"","date":"2022-04-05T13:11:41.993Z","updated":"2022-04-05T13:11:41.993Z","comments":true,"path":"self/srcery.css","permalink":"http://dayswithvenki.top/self/srcery.css","excerpt":"","text":"/* Theme: Srcery Description: Srcery dark color scheme for highlight.js Author: Chen Bin Maintainer: @redguardtoo Website: https://srcery-colors.github.io/ Date: 2021-04-13 */ :root { --hl-color: #FCE8C3; --hl-bg: #1C1B19; } #article-container figure.highlight .hljs { background: #1C1B19; /* Black */ color: #FCE8C3; /* Bright White */ } /* Bright White */ .hljs-subst, .hljs-quote, .hljs-literal { color: #FCE8C3; } /* Bright Blue */ .hljs-type, .hljs-symbol { color: #68A8E4; } /* Red */ .hljs-keyword, .hljs-deletion { color: #EF2F27; } /* Yellow */ .hljs-name, .hljs-function, .hljs-attribute, .hljs-selector-attr, .hljs-selector-id, .hljs-selector-class, .hljs-selector-pseudo, .hljs-section, .hljs-title { color: #FBB829; } /* Cyan */ .hljs-code, .hljs-variable, .hljs-property, .hljs-template-variable, .hljs-class { color: #0AAEB3; } /* Bright Green */ .hljs-string, .hljs-regexp, .hljs-bullet, .hljs-addition { color: #98BC37; } /* Bright Magenta */ .hljs-built_in, .hljs-params { color: #FF5C8F; } /* Blue */ .hljs-template-tag, .hljs-selector-tag { color: #2C78BF; } /* Bright Black */ .hljs-link, .hljs-number, .hljs-comment, .hljs-meta { color: #918175; } .hljs-emphasis { font-style: italic; } .hljs-strong { font-weight: bold; } /* @see https://github.com/srcery-colors/srcery-emacs for reference */"},{"title":"标签","date":"2020-11-24T07:14:39.000Z","updated":"2022-07-06T03:01:27.942Z","comments":false,"path":"tags/index.html","permalink":"http://dayswithvenki.top/tags/index.html","excerpt":"","text":""},{"title":"Venki's to do","date":"2022-03-03T16:00:00.000Z","updated":"2022-05-19T02:14:00.951Z","comments":true,"path":"Days/todo/index.html","permalink":"http://dayswithvenki.top/Days/todo/index.html","excerpt":"","text":"三角函数与反三角函数 三角函数与反三角函数的求导公式 与三角函数有关的图像"},{"title":"","date":"2022-04-05T16:03:34.389Z","updated":"2022-04-05T16:03:34.389Z","comments":true,"path":"Days/days/days.css","permalink":"http://dayswithvenki.top/Days/days/days.css","excerpt":"","text":".wrapper { /*This part is important for centering*/ display: flex; align-items: center; justify-content: center; } .hbe-button{ display: none !important; } .typing-demo { width: 25ch; animation: typing 6s steps(22), blink .5s step-end infinite alternate; white-space: nowrap; overflow: hidden; border-right: 3px solid; font-family: 'xiangsu'; font-size: 10px; } .typing-demo2{ width:50ch; animation:typing 5s steps(22), blink .5s step-end infinite alternate; white-space: nowrap; overflow: hidden; border-right: 3px solid; font-family: 'xiangsu'; font-size: 10px; } cnt{ font-size: 10px !important; } @keyframes typing { from { width: 0 } } @keyframes blink { 50% { border-color: transparent } }"},{"title":"相册","date":"2022-03-01T15:02:07.711Z","updated":"2021-10-14T02:13:24.113Z","comments":false,"path":"List/gallery/index.html","permalink":"http://dayswithvenki.top/List/gallery/index.html","excerpt":"","text":"壁紙 世俗的欲望 OH MY GIRL 關於OH MY GIRL的圖片"},{"title":"Kevin's todo","date":"2022-03-04T16:00:00.000Z","updated":"2022-04-06T07:59:55.164Z","comments":true,"path":"Days/do/index.html","permalink":"http://dayswithvenki.top/Days/do/index.html","excerpt":"","text":"Tode List:"},{"title":"","date":"2022-04-06T15:37:32.000Z","updated":"2022-04-06T15:39:28.286Z","comments":false,"path":"List/movies/index.html","permalink":"http://dayswithvenki.top/List/movies/index.html","excerpt":"","text":"DUO"},{"title":"DUO","date":"2020-04-23T04:58:56.000Z","updated":"2022-03-02T05:32:56.008Z","comments":false,"path":"List/music/index.html","permalink":"http://dayswithvenki.top/List/music/index.html","excerpt":"","text":""},{"title":"","date":"2022-04-04T13:00:29.545Z","updated":"2022-04-04T04:59:44.000Z","comments":true,"path":"codepen/dist/index.html","permalink":"http://dayswithvenki.top/codepen/dist/index.html","excerpt":"","text":""},{"title":"","date":"2022-04-02T17:52:11.601Z","updated":"2022-04-02T17:52:11.601Z","comments":true,"path":"codepen/file1/index.html","permalink":"http://dayswithvenki.top/codepen/file1/index.html","excerpt":"","text":"Color Game ​"},{"title":"","date":"2022-04-04T13:00:25.827Z","updated":"2022-04-04T04:59:44.000Z","comments":true,"path":"codepen/dist/style.css","permalink":"http://dayswithvenki.top/codepen/dist/style.css","excerpt":"","text":"*, *:after, *:before { box-sizing: border-box; } html { background: #1A1A1A; font-family: Arial, \"Helvetica Neue\", Helvetica, sans-serif; overflow: hidden; color: #1A1A1A; } html:after, html:before { content: '404'; position: absolute; font-size: 100px; left: 0; right: 0; text-align: center; bottom: 340px; font-weight: 600; z-index: 200; } html:before { content: 'Page Not Found'; font-size: 22px; font-weight: 400; bottom: 330px; } head { display: block; width: 35px; height: 140px; background: #646464; border-bottom: 10px solid #333; margin: auto; transform-origin: 50% 100%; -webkit-animation: 5s find linear infinite; animation: 5s find linear infinite; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; position: absolute; left: 0; right: 0; bottom: -5px; } head:after { content: ''; position: absolute; border-style: solid; border-width: 25px 25px 0 25px; border-color: #333 transparent transparent transparent; width: 85px; left: -25px; top: 0; box-shadow: 0px -10px 0 #FEAF33; } head:before { content: ''; position: absolute; width: 8px; height: 15px; background: #FEAF33; left: 0; right: 0; margin: auto; top: 40px; border-radius: 6px; box-shadow: 0px 0 1px 2px #333; } meta { display: block; width: 250px; height: 200px; background: #FFFEE2; border-radius: 50%; position: absolute; left: -107px; bottom: 270px; margin: auto; text-align: center; color: #333; font-size: 90px; line-height: 200px; font-weight: 600; } meta:after { content: ''; position: absolute; border-style: solid; border-width: 190px 75px 0 75px; border-color: rgba(255, 254, 226, 0.3) transparent transparent transparent; width: 230px; left: 10px; top: 100%; transform: translateY(-60px); } @-webkit-keyframes find { 25% { transform: rotate(25deg); } 0% , 50% , 100% { transform: rotate(0deg); } 75% { transform: rotate(-25deg); } } @keyframes find { 25% { transform: rotate(25deg); } 0% , 50% , 100% { transform: rotate(0deg); } 75% { transform: rotate(-25deg); } }"},{"title":"C++","date":"2022-03-03T16:00:00.000Z","updated":"2022-03-05T09:36:14.792Z","comments":false,"path":"todo/c++/index.html","permalink":"http://dayswithvenki.top/todo/c++/index.html","excerpt":"","text":"Online-CPP-Compiler C++在线编译器"},{"title":"Python","date":"2022-03-03T16:00:00.000Z","updated":"2022-03-05T09:36:36.407Z","comments":false,"path":"todo/python/index.html","permalink":"http://dayswithvenki.top/todo/python/index.html","excerpt":"","text":"Online-Python-Compiler Python在线编译器"},{"title":"JAVA","date":"2022-03-03T16:00:00.000Z","updated":"2022-03-05T12:49:41.819Z","comments":false,"path":"todo/java/index.html","permalink":"http://dayswithvenki.top/todo/java/index.html","excerpt":"","text":"Online-Java-Compiler JAVA在线编译器 仅支持输入输出，不支持修改代码。"},{"title":"嘉然","date":"2022-03-29T16:00:00.000Z","updated":"2022-05-19T02:14:00.895Z","comments":false,"path":"todo/嘉然/index.html","permalink":"http://dayswithvenki.top/todo/%E5%98%89%E7%84%B6/index.html","excerpt":"","text":"嘉然&amp;向晚—— for ZZM"},{"title":"","date":"2021-09-28T14:56:13.000Z","updated":"2022-05-19T02:14:00.951Z","comments":false,"path":"List/gallery/wallpaper/index.html","permalink":"http://dayswithvenki.top/List/gallery/wallpaper/index.html","excerpt":"","text":""}],"posts":[{"title":"对未来的小小规划","slug":"certificates","date":"2022-09-10T07:51:13.348Z","updated":"2022-09-10T08:25:58.587Z","comments":true,"path":"posts/expectation.html","link":"","permalink":"http://dayswithvenki.top/posts/expectation.html","excerpt":"","text":"关于网站维护​ &nbsp;&nbsp;宝宝呀宝宝，原来自从7月底之后，我就没有再怎么处理过我们网站啦。从8月1号入职开始我才慢慢体会到当工作啥的一起来之后，要维护一个网站的难度真的太大啦！！！特别是当我把很多很多东西都放到了国外的服务商之后，一但被墙，我就要花巨多巨多的时间去维护，功能越多，维护的东西也就越多啦！哎呀呀！！！！ 不过还好啦！也终于把现在有的东西维护好啦！！！然后还学了一些新知识，估计未来慢慢更改，维护成本会越来越低的！！！ 小小规划&nbsp;&nbsp;入职之后，特别是接触到许多项目开发后，对从前一些零零散散的知识体系会有一个很不一样的看法，然后现在刚开始，就尽量把前端的各种框架比如：Vue.js,Node.js之类的呀都多多了解清楚，然后把之前一直没有系统训练的HTML语法呀、CSS语法呀、JAVASCRIPT之类的都先做一个系统的学习；然后后端也需要去尽量学习学习，目前正在慢慢学Django的后端框架哇，总之现在对未来的小小希望，也从单纯的前端工程师-&gt;全栈工程师啦！ 认证展示&nbsp;&nbsp;最后这里呢，就留给自己展示展示在FreeCodeCamp上面获得的学习证书吧嘎嘎嘎，虽然呢，这些认证意义不大，也非常简单，但是还是放在这儿！留给自己臭美臭美吧！！！！哈哈哈哈哈哈嘎嘎嘎嘎嘎嘎！！！ 1.Responsive Web Design 2.JavaScript 算法和数据结构 （还未完成）","categories":[],"tags":[{"name":"💻前端","slug":"💻前端","permalink":"http://dayswithvenki.top/tags/%F0%9F%92%BB%E5%89%8D%E7%AB%AF/"}]},{"title":"祝小吴崽生日快乐！！！","slug":"to美女小吴崽","date":"2022-07-23T16:00:00.000Z","updated":"2022-07-23T07:10:45.998Z","comments":true,"path":"posts/lovevenki.html","link":"","permalink":"http://dayswithvenki.top/posts/lovevenki.html","excerpt":"","text":"你好呀，小吴宝宝​ 不知道，当你看到这里是什么时候呢，是半夜啦，还是早上呢？还是说我们已经一起度过一天了呢？ ​ 不知不觉中，咱们也在一起快10个月啦，真的过得好快好快呢！！！我们也算是快要完完整整的在彼此身边度过彼此的20岁啦，谢谢宝宝让我见证了你精彩的20岁呀！希望我有在这一岁里做到让你更加的开心和快乐！在你生日到来的这一天，也希望我能够好好地让你过上一个开开心心快快乐乐的生日吧！ ​ 这些画画和布局不知道你还是否满意呢？其实这些从刚刚放假开始我就已经在着手策划啦（比如说上面的这个郭崽日报，就是先设计好海报，再去想到用一个网站的新功能来铺垫一下子的嘿嘿！），但是苦于没有任何的经验，所以只能想到什么就先做什么吧，然后也有很多是发现你有新的兴趣爱好呀，新的喜欢的动漫角色呀，再去慢慢地重新补上，一点点修改。也正因为花了许多的时间在这些上面，偶尔过于认真会导致没有及时回消息呀什么的，可能会让你感觉到很敷衍吧，果咩呀宝宝，因为在做的事情如果先给你看了的话，就会让你失去一些当天才看到的开心吧，但是这样做的话就导致我没办法告诉你为什么我会这样子呀，我也只好先糊弄过去吧，但是后来想想的话，是否又有些本末倒置了呢，假如我做这一切都是为了让你更加开心一点，那我没那么认真回复你的时候，你的不高兴又怎么可能仅靠这些来弥补呢？嗨呀，不过仅仅是这段时间才会这样的，往后我会更加更加注意的啦宝宝。我们吃越南卷，吃蛋糕，吃好多好多好吃的，一起过开开心心的一天，可以不啦宝宝。 ​ 总之，希望在看到这些网站上的改变之后，能够稍微安抚安抚你吧宝宝！！ ​ ​ ​ 生日快乐呀宝宝！希望我做的这一些小小的事情，能够为你赶走最近的小烦躁，把小快乐带进你的生活吧！我爱你小吴！！！我们继续加油大步走吧！","categories":[{"name":"Days","slug":"Days","permalink":"http://dayswithvenki.top/categories/Days/"}],"tags":[]},{"title":"Python 多线程","slug":"Python8","date":"2022-07-16T07:20:00.000Z","updated":"2022-07-17T13:01:21.059Z","comments":true,"path":"posts/python-thread.html","link":"","permalink":"http://dayswithvenki.top/posts/python-thread.html","excerpt":"","text":"12345678910111213from threading import Threaddef func(): for i in range(1000): print('func', i)if __name__ == '__main__': t = Thread(target=func) # 创建线程并给线程安排任务 t.start() # 多线程状态为可以开始工作状态，具体执行时间由CPU决定 for i in range(1000): print('main', i) 运行结果: 1234567891011121314151617181920212223funcmain 0 0funcmain 1func 2func 3func 4 1main func 5func 6func2 7......funcmain 998992funcmain 999993main 994main 995main 996main 997main 998main 999","categories":[],"tags":[{"name":"🐍Python","slug":"🐍Python","permalink":"http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"},{"name":"🕷️爬虫","slug":"🕷️爬虫","permalink":"http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"}]},{"title":"Python 爬虫实战！","slug":"Python7","date":"2022-07-13T12:30:00.000Z","updated":"2022-07-14T08:12:39.574Z","comments":true,"path":"posts/python-exercises.html","link":"","permalink":"http://dayswithvenki.top/posts/python-exercises.html","excerpt":"","text":"注:爬虫需要遵循各网站根目录下的robots.txt协议！！！本篇文章仅用于个人学习记录使用，获取到的资源在当天已全部删除，且仅爬取网站其中的部分信息，并未涉及到其他用户的私人信息等，且并未以此产生非法牟利。 实战1:爬取某视频首页视频实战2:爬取某音乐评论实战1:爬取某视频首页视频爬取内容: 爬取结果: 实现过程及思路: 从网页主页url中打开控制台，获取主页的html源码，利用xpath解析得到这一块的子页面href。 打开子页面的源代码，发现视频并不在其中，则通过network中的Fetch/XHR查找视频来源。 从中得到Request URL，进行requests.get发现获取失败，并得到以下内容。 分析得到结果，是防盗链反爬导致的，回头找network内headers属性，将User-Agent,Cookie加入headers字典，再次使用requests.get发现仍然如此 ，最后发现是Referer防盗链造成的，Referer的值为子页面的href，将其组成键值对加入headers字典，再次进行requests.get，得到srcUrl。 对srcUrl进入发现还有最后一层反爬，通过比对正确的视频url和srcUrl发现：srcUrl是通过真正的url与systemTime组合修改的，找到其修改规律，用replace方法将systemTime改为f’cont-{video_id}’，得到最后正确的视频链接。 通过最后的write(requests.get(true_url).content)得到所需视频。 实现代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849\"\"\"7.13 Kevin防盗链处理 某视频 视频爬虫 爬取首页第一个大div里面所有视频\"\"\"import requestsfrom lxml import htmletree = html.etreeurl = 'https://www.pearvideo.com/'res = requests.get(url)tree = etree.HTML(res.text)href_list = tree.xpath('//*[@id=\"vervideoTlist\"]/div//@href')print(href_list)for href in href_list: url = 'https://www.pearvideo.com/'+ href video_id = url.split('_')[1] params = { 'contId': video_id } videoStatus = requests.get('https://www.pearvideo.com/videoStatus.jsp', params) new_url = videoStatus.url headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36', 'Cookie': '__secdyid=e9d7070e31f729879bd4edec9f3db4567721f9f23769837d021657708580; acw_tc=2f624a1916577085808321223e1c9d5da783477514d7ff177f8220c470bbf8; JSESSIONID=2EF2FE6E5DE5C57BD7DAA3C0C372BE69; PEAR_UUID=dd85645b-e891-4615-a677-a8d2db1df2a2; _uab_collina=165770858183026495245603; Hm_lvt_9707bc8d5f6bba210e7218b8496f076a=1657708583; p_h5_u=B2141296-37D6-4117-87E8-E50BC33AFE84; Hm_lpvt_9707bc8d5f6bba210e7218b8496f076a=1657708644; SERVERID=ed8d5ad7d9b044d0dd5993c7c771ef48|1657708664|1657708580', 'Referer': url } resp = requests.get(new_url, headers=headers) resp_json = resp.json() fake_url = resp_json['videoInfo']['videos']['srcUrl'] # 这里用切片方法组合得到真实的url再组合，没用对脑子,非常复杂 # srcUrl = https://video.pearvideo.com/mp4/third/20220712/1657710591280-11905134-122533-hd.mp4 # part_list1 = fake_url.split('/')[-1].split('-')[1:] # part_list2 = fake_url.split('-')[0].split('/')[0:-1] # part_left = '' # part_right = '' # for item in part_list1: # part_right += item+'-' # for it in part_list2: # part_left += it+'/' # true_url = part_left + 'cont-'+video_id + '-' + part_right.strip('-') # 以下使用replace方法 systemTime = resp_json['systemTime'] true_url = fake_url.replace(systemTime, f\"cont-{video_id}\") #print(true_url) video_name = f'{video_id}.mp4' with open('video/'+video_name, 'wb') as fw: resp2 = requests.get(true_url) fw.write(resp2.content)实战2:爬取某音乐评论爬取内容: 爬取结果:实现过程及思路: 查看网页源代码，发现评论并没有在源代码内，转而找NetWork下对应评论的请求，查看headers。 发现From Data内数据被加密。 解决思路： 找到未加密的参数 参考原来的加密逻辑加密自己的参数 请求到网址，得到加密信息 步骤： 寻找加密过程： 进入Call Stack查看上一步的，直至找到数据未加密的时候： 观察后可得到加密函数如下： ∴加密的过程为 windows.asrsea(加密前数据,xxx,xxx) 进一步找asrsea函数组的定义: 所以具体实参对应：d=data参数, e=buV0x([“流泪”, “强”]), f=buV0x(Rg4k.md), g=buV0x([“爱心”, “女孩”, “惊恐”, “大笑”])【参数efg可以从Console运行得出以下结果】 分析函数运行过程：在代码里有 实现代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394\"\"\"7.14 Kevin网易云音乐 热评 爬虫\"\"\"import requestsfrom Crypto.Cipher import AESfrom base64 import b64encodeimport jsond = '010001'f = '00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'g = '0CoJUm6Qyw8W8jud'i = \"kyM74e2babr6Ktf3\"data = { \"rid\": \"R_SO_4_28160882\", \"threadId\": \"R_SO_4_28160882\", \"pageNo\": \"1\", \"pageSize\": \"20\", \"cursor\": \"-1\", \"offset\": \"0\", \"orderType\": \"1\", \"csrf_token\": \"4a42317491b25188649cd33d5ccfe8c4\"} # data为解密前的数据def get_encSecKey(): return \"5015aaf2b9d0c1487908bf12cd0afdac506c4e7527cb6805ead6f4f6fa363aed69d876a0a9ecf18caaadc09ff9a61dcbf868657e15bbd0a24a44c41b499e19d5e9eede71d3f99232f965515aef8fc282f15b7ee7816fd9b5ac2d3784f385f03213ea8882edafe47bf88b3cd0f120f441f9246348fb2d75b6799f8548b021b04b\"def get_params(data): # 默认所得为字符串 first = enc_params(data, g) second = enc_params(first, i) return seconddef to_16(data): pad = 16 - len(data) % 16 data += chr(pad)*pad return datadef enc_params(data, key): iv = '0102030405060708' data = to_16(data) aes = AES.new(key=key.encode(\"utf-8\"), IV=iv.encode('utf-8'), mode=AES.MODE_CBC) # 创建加密器 bs = aes.encrypt(data.encode('utf-8')) # 加密,加密的内容长度必须是16的倍数, return str(b64encode(bs), \"utf-8\")url = 'https://music.163.com/weapi/comment/resource/comments/get?csrf_token=4a42317491b25188649cd33d5ccfe8c4'# 处理加密过程\"\"\" function a(a) { # 返回随机16位字符串 var d, e, b = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\", c = \"\"; for (d = 0; a &gt; d; d += 1) # 循环16次 e = Math.random() * b.length, # 随机数 e = Math.floor(e), # 取整 c += b.charAt(e); # 取字符串 return c } function b(a, b) { var c = CryptoJS.enc.Utf8.parse(b) # b是秘钥 , d = CryptoJS.enc.Utf8.parse(\"0102030405060708\") , e = CryptoJS.enc.Utf8.parse(a) # e是数据 , f = CryptoJS.AES.encrypt(e, c, { # c是加密的秘钥 iv: d, # 偏移量 mode: CryptoJS.mode.CBC # 加密模式 }); return f.toString() } function c(a, b, c) { var d, e; return setMaxDigits(131), d = new RSAKeyPair(b,\"\",c), e = encryptedString(d, a) } function d(d, e, f, g) { var h = {} , i = a(16); # i是16位随机字符串 return h.encText = b(d, g), # g是秘钥 h.encText = b(h.encText, i), # 返回params，i是秘钥 h.encSecKey = c(i, e, f), #得到encSecKey 8===D 此时i已经是一个定制，所以可def一个函数get_encSecKey h } 具体调用: var bKB1x = window.asrsea( d=JSON.stringify(i9b), e=buV0x([\"流泪\", \"强\"]), f=buV0x(Rg4k.md), g=buV0x([\"爱心\", \"女孩\", \"惊恐\", \"大笑\"])); d:数据，e\"\"\"resp = requests.post(url, data={ \"params\": get_params(json.dumps(data)), \"encSecKey\": get_encSecKey()})print(resp.json())","categories":[],"tags":[{"name":"🐍Python","slug":"🐍Python","permalink":"http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"},{"name":"🕷️爬虫","slug":"🕷️爬虫","permalink":"http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"}]},{"title":"Python Xpath模块","slug":"Python6","date":"2022-07-12T08:18:00.000Z","updated":"2022-07-12T14:24:21.378Z","comments":true,"path":"posts/python-xpath1.html","link":"","permalink":"http://dayswithvenki.top/posts/python-xpath1.html","excerpt":"","text":"Xpath模块 from lxml import html etree = html.etree 使用到的HTML文件:123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;titile&gt;title&lt;/titile&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"https://www.baidu.com\"&gt;百度&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://www.google.com\"&gt;谷歌&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"https://www.sougou.com\"&gt;搜狗&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=\"feiji\"&gt;飞机&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"dapao\"&gt;大炮&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"huoche\"&gt;火车&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;div class=\"job\"&gt;李嘉诚&lt;/div&gt; &lt;div class=\"common\"&gt;胡辣汤&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 一个小样例：1234567891011121314151617from lxml import htmltree = html.etree.parse(\"b.html\")# result = tree.xpath('/html')# result = tree.xpath('/html/body/ul/li/a/text()') # xpath索引从1开始# result = tree.xpath('/html/body/ol/li[2]/a/text()') # 指取该标签的内容result = tree.xpath('/html/body/ol/li/a[@href=\"dapao\"]/text()') # @href表示属性href等于双引号内内容print(result)li_list = tree.xpath('/html/body/ol/li')for li in li_list: tex = li.xpath('./a/@href') # 指取属性href的值 print(tex)print(tree.xpath('/html/body/div[1]/text()')) 可以通过浏览器控制台的功能快速得到xpath 一个实例123456789101112131415161718192021222324252627282930\"\"\"7.12 Kevin猪八戒网 Xpath 爬虫\"\"\"from lxml import htmlimport requestsetree = html.etreeurl = 'https://beijing.zbj.com/search/shop/?type=new&amp;kw=saas'resp = requests.get(url)html = etree.HTML(resp.text)divs = html.xpath('//*[@id=\"__layout\"]/div/div[3]/div/div[3]/div[4]/div[1]/div')for div in divs: name = div.xpath('./div[1]/div/div/a/div/div/div/div[1]/div[1]/div[2]/div[1]/text()') if len(name) != 0: com_name = name[0] else: com_name = \"no info\" city = div.xpath('./div[1]/div/div/a/div/div/div/div[1]/div[1]/div[2]/div[2]/text()') price = div.xpath('./div/div/div/a[@target=\"_blank\"]/div/div/div/div[1]/div[2]/div/div/text()') com_good = div.xpath('.//div[1]/div/div/a/div/div/div/div[2]/div[2]/text()') if len(city) != 0: city_name = (city[2][5:-1]) else: city_name = \"no info\" print(com_name, city_name, com_good[0], price[0]) # 公司名、所处城市、擅长、平均成交价格","categories":[],"tags":[{"name":"🐍Python","slug":"🐍Python","permalink":"http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"},{"name":"🕷️爬虫","slug":"🕷️爬虫","permalink":"http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"}]},{"title":"Python BS模块","slug":"Python5","date":"2022-07-12T05:38:32.877Z","updated":"2022-07-12T10:13:14.032Z","comments":true,"path":"posts/python-beautifulsoup.html","link":"","permalink":"http://dayswithvenki.top/posts/python-beautifulsoup.html","excerpt":"","text":"bs模块 from bs4 import BeautifulSoup 解析器 lxml HTML 解析器下的选择器标签选择器•选择元素、获取名称、获取属性、获取内容、嵌套选择、子节点和子孙节点、父节点和祖先节点、兄弟节点 •soup.prettify()、soup.title.name、soup.head、soup.p.string、soup.p[‘name’] 标准选择器 •soup.find_all(‘ul’)、find_parents()、find_next_siblings()、find_previous_siblings() •soup.find(‘ul’)、find_parent()、find_next_sibling()、find_previous_sibling() CSS选择器 soup.select()、soup.select_one()直接传入选择器参数 [.代表class,#代表id] 1234567soup.select('.panel .panel-heading')soup.select('ul li')soup.select('#list-2 .element')ul = soup.select('ul')[0]uid = ul['id']trs = soup.select('table tbody tr')title = trs[0].select_one('td a').text 一个样例1234567891011url = ''resp = requests.get(url)#解析数据# 1.把页面源代码交给BeautifulSoup处理，生成bs对象page = BeautifulSoup(resp.text, \"lxml\") #指定html解析器# 2.从bs对象中查找数据# find(标签,属性=值)# find_all（标签,属性=值)# table = page.find(\"table\", class_=\"hq_table\") #class是Python关键字table = page.find(\"table\", attrs={\"class\": \"hq_table\"}) #避免class 一个实例1234567891011121314151617181920212223242526\"\"\"7.12 Kevin优美图库 唯美壁纸 BeautifulSoup解析实例\"\"\"import requestsfrom bs4 import BeautifulSoupurl = 'https://www.umei.cc/bizhitupian/weimeibizhi/'resp = requests.get(url)resp.encoding = 'utf-8'page = BeautifulSoup(resp.text, \"lxml\")a_list = page.find(\"ul\", class_=\"pic-list after\").find_all(\"a\")for a in a_list: curl = 'https://www.umei.cc'+a.get('href') resp2 = requests.get(curl) resp2.encoding = 'utf-8' page2 = BeautifulSoup(resp2.text, \"lxml\") src = page2.find(\"section\", class_=\"img-content\").find(\"img\").get('src') img_name = src.split('/')[-1] # 以网站图片名字命名图片 src = requests.get(src) with open(\"img/\"+img_name, 'wb') as fw: fw.write(src.content) # 以字节方式写入文件 print(img_name, \"over!\")","categories":[],"tags":[{"name":"🐍Python","slug":"🐍Python","permalink":"http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"},{"name":"🕷️爬虫","slug":"🕷️爬虫","permalink":"http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"}]},{"title":"Python Re模块","slug":"Python4","date":"2022-07-11T07:15:00.000Z","updated":"2022-07-11T12:41:29.262Z","comments":true,"path":"posts/python-remodule.html","link":"","permalink":"http://dayswithvenki.top/posts/python-remodule.html","excerpt":"","text":"re模块 import re findall：匹配字符串中所有符合正则的内容，返回迭代器。 lst = re.findall(r”\\d+”, “我的电话号码一个是：12345,另一个是：13579”)print(lst) [‘12345’,’13579’] finditer:匹配字符串中所有的内容，返回迭代器,获取内容需要.group()。it = re.finditer(r”\\d+”, “我的电话号码一个是：12345,另一个是：13579”)for i in it: print(i.group()) 1234513579 search:返回match对象，获取数据需要.group()，找到一个结果就返回。s = re.search(r”\\d+”, “我的电话号码一个是：12345,另一个是：13579”)print(s.group()) 12345 match:从头开始匹配与search类似s = re.search(r”\\d+”, “12345,另一个是：13579”)print(s.group()) 12345 预加载正则表达式obj = re.compile(r”\\d+”)rets = obj.finditer(“我的电话号码一个是：12345,另一个是：13579”)for ret in rets: print(ret.group()) 1234513579 一个样例[选择符合表达式内容的部分内容方法]: 123456789101112131415import res = \"\"\"&lt;div class='Jay'&gt;&lt;span id='1'&gt;周杰伦&lt;/span&gt;&lt;/div&gt;&lt;div class='Eason'&gt;&lt;span id='2'&gt;陈奕迅&lt;/span&gt;&lt;/div&gt;&lt;div class='JJ'&gt;&lt;span id='3'&gt;林俊杰&lt;/span&gt;&lt;/div&gt;\"\"\"# (?p&lt;分组名字&gt;正则) 可以单独从正则匹配的内容中进一步提取内容# re.S 令.能够匹配所有字符obj = re.compile(r\"&lt;div class='.*?'&gt;&lt;span id='(?P&lt;top_id&gt;\\d+)'&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;&lt;/div&gt;\", re.S)res = obj.finditer(s)for it in res: print(it.group('top_id'), it.group('name')) 豆瓣top250盗版天堂电影12345678910111213141516171819202122232425262728293031323334353637\"\"\"7.11 Kevin豆瓣电影排行榜top250爬虫(源代码只能进行前25个电影爬虫,通过while+params解决)\"\"\"import requestsimport reimport csvst = 0url = 'https://movie.douban.com/top250'header = ['电影名', '上映年份', '评分', '评分人数']with open(\"ranting.csv\", \"w\", encoding=\"utf-8\", newline='') as fw: writer = csv.writer(fw) writer.writerow(header)while st &lt; 250: params = {'start': st} headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36' } resp = requests.get(url, headers=headers, params=params) resp.encoding = 'utf-8' html = resp.text obj = re.compile(r'&lt;li&gt;.*?&lt;span class=\"title\"&gt;(?P&lt;name&gt;.*?)' r'&lt;/span&gt;.*?&lt;p class=\"\"&gt;.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp' r'.*?&lt;span class=\"rating_num\" property=\"v:average\"&gt;(?P&lt;rating&gt;.*?)&lt;/span&gt;' r'.*?&lt;span&gt;(?P&lt;amount&gt;.*?)人评价&lt;/span&gt;', re.S) res = obj.finditer(html) with open(\"ranting.csv\", \"a\", encoding=\"utf-8\", newline='') as fw: writer = csv.writer(fw) for it in res: dic = it.groupdict() dic[\"year\"] = dic[\"year\"].strip() writer.writerow(dic.values()) st += 25 结果： 1234567891011121314151617181920212223242526272829303132333435363738\"\"\"7.11 Kevin爬取电影天堂2022必看电影名称，下载链接\"\"\"import requestsimport reurl = \"https://dytt89.com/\"headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'}resp = requests.get(url, headers)resp.encoding = 'gb2312'html = resp.texturl_list = []obj1 = re.compile(r\"2022必看热片.*?&lt;ul&gt;(?P&lt;ul&gt;.*?)&lt;/ul&gt;\", re.S)obj2 = re.compile(r\"&lt;a href='(?P&lt;href&gt;.*?)'\", re.S)obj3 = re.compile(r'◎片 名(?P&lt;name&gt;.*?)&lt;br /&gt;.*?' r'&lt;td style=\"WORD-WRAP: break-word\" bgcolor=\"#fdfddf\"&gt;&lt;a href=\"(?P&lt;magnet&gt;.*?)\"&gt;', re.S)res1 = obj1.finditer(html)for it in res1: ul = it.group('ul') res2 = obj2.finditer(ul) for it2 in res2: new_url = url+it2.group('href').strip('/') url_list.append(new_url) #resp2 = requests.get(new_url, headers=headers) # resp2.encoding = 'gb2312' # res3 = obj3.finditer(resp2.text) # for it3 in res3: # print(it3.group('name'), it3.group('magnet')) # breakfor href in url_list: child_resp = requests.get(href, headers=headers) child_resp.encoding = 'gb2312' res3 = obj3.search(child_resp.text) print(res3.group('name'), res3.group('magnet'))","categories":[],"tags":[{"name":"🐍Python","slug":"🐍Python","permalink":"http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"},{"name":"🕷️爬虫","slug":"🕷️爬虫","permalink":"http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"}]},{"title":"Python 数据分析","slug":"Python3","date":"2022-07-10T16:00:00.000Z","updated":"2022-07-11T12:41:07.773Z","comments":true,"path":"posts/python-data-analysis.html","link":"","permalink":"http://dayswithvenki.top/posts/python-data-analysis.html","excerpt":"","text":"数据解析Requests等可以抓取整个网页，但是我们并不需要整个网页的内容，则可以通过数据提取得到需要的内容。 三种解析方式： 1.正则表达式解析 2.bs4解析 3.xpath解析 正则表达式优点: 速度快、效率高、准确性高 缺点：上手困难 正则语法：使用元字符进行排列组合用来匹配字符串，在线测试正则表达式:tool.oschina.net/regex/ 元字符: 具有固定含义的符号 常用元字符1234567891011121314151617. 匹配除换行符以外的任意字符\\w 匹配字母或数字或下划线\\s 匹配任意空白字符\\d 数字\\n 换行符\\t 制表符^ 字符串的开始$ 字符串的结尾\\W 匹配非字母或数字或下划线\\D 匹配非数字\\S 匹配非空白字符a|b a或b() 匹配括号内的表达式，也表示一个组[...] 匹配字符组中的字符[^...] 匹配除了字符组中字符的所有字符 量词：123456* 重复零次或更多次+ 重复一次或多次? 重复零次或一次{n} 重复n次{n,} 重复n次或更多次{n,m} 重复n到m次 贪婪匹配和惰性匹配:12.* 贪婪匹配.*? 惰性匹配 案例: 1234567str: 一起打游戏吗，待会打游戏吗，还是现在打游戏呢？reg: 一.*?打游戏结果: 一起打游戏reg: 一.*打游戏结果:一起打游戏吗，待会打游戏吗，还是现在打游戏","categories":[],"tags":[{"name":"🐍Python","slug":"🐍Python","permalink":"http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"},{"name":"🕷️爬虫","slug":"🕷️爬虫","permalink":"http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"}]},{"title":"Python Requests","slug":"Python2","date":"2022-07-07T16:00:00.000Z","updated":"2022-07-13T10:25:39.687Z","comments":true,"path":"posts/python-requests.html","link":"","permalink":"http://dayswithvenki.top/posts/python-requests.html","excerpt":"","text":"Request库getpost获取http网页的主要方法，对应http的get。 requests.get(url, params=None, **kwargs) params**kwargsResponse对象的属性一个样例另一个案例(关于需要登录的网页处理：Cookie)用于发送查询字符串，一般为字典或者字节流格式。 1234567&gt;&gt;&gt; url = 'https://www.baidu.com/s'&gt;&gt;&gt; values = { 'wd':'python'}&gt;&gt;&gt; resp = requests.get(url, params=values)&gt;&gt;&gt; resp.url'https://www.baidu.com/s?wd=python'可选参数。 属性 写法 作用 headers headers = {‘User-Agent’:xxx, ‘Cookie’:xxx, ‘Referer’:xxx} 其实这里是伪装成浏览器 header是浏览器向服务器发送的一个头信息，上面的代码就是发送了浏览器自己的型号。 auth auth = (‘username’, ‘password’) Web客户端验证参数，用于网站的用户名和密码验证。 verify verify = False/True 证书认证参数，python去访问一个没有经过CA证书认证的因特网服务类型是https的网站, 那么就会抛出一个SSLError 异常，进而我们就无法正常访问这个网站。此时！我们就可以通过设置verify参数为False，忽略证书认证，访问网站。 proxies proxies = {‘协议’:’协议://IP:端口号’} 代理IP参数，爬虫时被封IP可以使用代理IP继续爬取。 1234567891011121314151617\"\"\"7.9 Kevin爬取一个百度搜索的内容\"\"\"import requestss = input(\"请输入需要查询的内容\")#headers内容可以从控制台的Network查看headers = { 'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'}#kv的具体键值对可以通过具体网页观察urlkv = {'wd' : s}url = 'https://www.baidu.com/s'r = requests.get(url, params=kv, headers=headers)r.encoding = r.apparent_encoding #r.encoding = 'utf-8'print(r.url)print(r.text)1234567891011121314151617181920212223242526272829303132\"\"\"7.13 Kevin处理Cookie模拟用户登录1.登录 -&gt; 得到Cookie2.带着Cookie 去请求书架的url -&gt; 书架上的内容必须把以上操作连起来可以使用session进行请求 -&gt; session可以认为是一连串的请求，在这个过程中Cookie不会消失\"\"\"import requestssession = requests.session()# 1.登录url = 'https://passport.17k.com/ck/user/login'resp = session.post(url, data={'loginName': '13433947627', 'password': 'EasonChan0830'})# print(resp.cookies) # 看cookie# 2.数据处理# 刚刚的会话session中是有cookie的resp2 = session.get('https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919')print(resp2.json())# 以上可以用下面内容代替headers = { 'Cookie': 'XXX' # 从控制台Header里面复制}resp = requests.get('https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919', headers= headers)print(resp.json())向网页提交post申请的方法，对应http的post。 requests.post(url, data={key: value}, **kwargs) data可选参数属性参数一个样例字典，元组列表，字节或要发送到指定URL的文件对象。 12345&gt;&gt;&gt; url = 'https://fanyi.baidu.com'&gt;&gt;&gt; values = { 'wd':'python'}&gt;&gt;&gt; resp = requests.post(url, data=values)与get类似。与get类似。1234567891011121314\"\"\"7.9 Kevin爬取一个百度翻译的内容\"\"\"import requestss = input('请输入你需要翻译的内容\\n')params = {'kw': s}headers = {'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'}url = 'https://fanyi.baidu.com/sug'resp = requests.post(url, data=params)print(resp.json()) 另一个实例(爬取豆瓣电影排行榜):1.进入douban.com打开控制台观察浏览器控制台的network。 2.进入Fetch/XDR观察（简化资源视图），从中找到所需的json库的url等属性，观察request method（get/post) 3.复制url，url”?”后方的可以通过payload得到，post为getdata，get为parameters，通过字典赋值可以简化url。 4.通过requests.get()/requests.post()得到resp,用resp.text测试是否爬取正常,一般反爬需要加入Headers属性，中间的User-Agent仿造浏览器访问界面。 实现代码： 123456789101112131415161718192021\"\"\"7.11 Kevin豆瓣电影排行榜爬虫\"\"\"import requestsurl = 'https://movie.douban.com/j/chart/top_list'params = { #其中start和limit属性可切换，start为排行榜的开始位数-1，limit为一次性爬取的电影数量 'type': '24', 'interval_id': '100:90', 'action': \"\", 'start': '0', 'limit': '60'}headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36'}resp = requests.get(url, params=params, headers=headers)print(resp.json())resp.close() #关闭请求","categories":[],"tags":[{"name":"🐍Python","slug":"🐍Python","permalink":"http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"},{"name":"🕷️爬虫","slug":"🕷️爬虫","permalink":"http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"}]},{"title":"Python 爬虫","slug":"Python1","date":"2022-07-06T16:00:00.000Z","updated":"2022-07-09T04:14:42.420Z","comments":true,"path":"posts/python-crawler.html","link":"","permalink":"http://dayswithvenki.top/posts/python-crawler.html","excerpt":"","text":"一些关键信息请求头的关键信息1.User-Agent：请求载体的身份识别。（用什么发的请求） 2.Referer：防盗链。（请求的页面来源） 3.Cookie：本地字符串数据信息。（用户登录信息，反爬的token） 请求方式1.get 2.post 响应头的关键信息1.Cookie：本地字符串数据信息。（用户登录信息，反爬的token） 2.一些奇怪的字符串（一般是token字样，防止攻击和反爬） 得到页面源代码可用库:123import requests#from urllib.request import urlopen urlopen用法123url = 'https://www.baidu.com'resp = urlopen(url)print(resp.read().decode('utf-8'))#用utf-8解码得到页面源代码 request库用法123456789101112131415url = 'https://www.baidu.com/s'#请求头关键信息,可通过f12查看headers = { 'User-Agent':'' 'Cookie':'' 'Referer':''}params = { 'wd' : 'python'}#连接在url后方的:如www.baidu.com/s?resp = requests.get(url, params=params, headers=headers)resp.encoding = 'utf-8'#将resp的编码改为utf-8print(resp.text) #得到页面源代码print(resp.url) #得到页面的url连接，当前为https://www.baidu.com/s?wd=python","categories":[],"tags":[{"name":"🐍Python","slug":"🐍Python","permalink":"http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"},{"name":"🕷️爬虫","slug":"🕷️爬虫","permalink":"http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"}]},{"title":"计算机网络1","slug":"计算机网络 第二章","date":"2022-04-25T08:50:23.606Z","updated":"2022-07-02T06:42:34.573Z","comments":true,"path":"posts/net1.html","link":"","permalink":"http://dayswithvenki.top/posts/net1.html","excerpt":"","text":"公式: 奈氏准则: 码元传输的最高速率 = 2W (码元/s) 信噪比(dB) = 10\\log_{10}{S/N} (dB) 香农公式: C = W\\log_2{(1+S/N)} (bit/s) W为信道宽度,S为信道内所传信号的平均功率,N为信道内部高斯噪声功率. 意义: 奈氏准则:激励不断探索先进的编码技术,是每一个码元携带更多比特的信息. 香农公式:告诫不可能突破信息传输速率的绝对极限. CDMA工作原理: &nbsp;&nbsp;1.将每一个比特时间划分为m个短的间隔,称为码片. &nbsp;&nbsp;2.为每个站指派一个唯一的m bit码片序列. ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(1)发送比特1: 发送自己的m位码片序列. ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(2)发送比特0: 发送该码片序列的二进制反码. eg: S的8 bit 码片序列为 00011011. 1 -&gt; 00011011 0 -&gt; 11100100 码片序列: (-1 -1 -1 +1 +1 -1 +1 +1) 每个站分配的码片序列：各不相同，且必须互相正交。 正交：向量 S和T的规格化内积 等于0 。 任何一个码片向量和该码片向量自己的规格化内积都是1 。 一个码片向量和该码片反码的向量的规格化内积值是-1。","categories":[],"tags":[]},{"title":"像素插画2","slug":"Genshin","date":"2022-04-17T11:16:29.252Z","updated":"2022-07-13T07:05:59.472Z","comments":true,"path":"posts/genshin.html","link":"","permalink":"http://dayswithvenki.top/posts/genshin.html","excerpt":"","text":"像素插画2 胡桃: 甘雨: 魈: 宵宫: 神里: 万叶:","categories":[{"name":"插画","slug":"插画","permalink":"http://dayswithvenki.top/categories/%E6%8F%92%E7%94%BB/"}],"tags":[{"name":"🎨像素画","slug":"🎨像素画","permalink":"http://dayswithvenki.top/tags/%F0%9F%8E%A8%E5%83%8F%E7%B4%A0%E7%94%BB/"}]},{"title":"阅读方法","slug":"01.阅读方法","date":"2022-04-11T14:39:18.179Z","updated":"2022-07-13T06:23:58.921Z","comments":false,"path":"posts/english1.html","link":"","permalink":"http://dayswithvenki.top/posts/english1.html","excerpt":"","text":"01.阅读方法 一、先题后文，再看题干，不看选项 why?(先题后文) 1.解题 2.串联题干 -&gt; 预判主旨~（题干中反复提到）~3.通读全文 二、 做阅读理解除了翻译外，需要关注: 1.感情色彩强烈的词: adj,adv,n(系动词之后) [认识单词!!] [真题] 1. 最经常出现的词有Job，但是容易忽略agent。（不能顾此失彼） job&lt;-&gt;agent关系: &nbsp;&nbsp; 第4题: agent offer each job hunter… options. 2. 虽然一般不看选项，但是若选项中有共有的信息,则不为干扰信息为正确信息。 如本题: Women/Stress，有助于帮助判断（提示）中心思想。 1.串联题干 2.通读全文 3.the best title (读一段做一题∵题文同序) 不熟或者不认识的词汇: predominance 统治地位 manifest 显示 revival 进步、振兴","categories":[],"tags":[{"name":"📖考研英语","slug":"📖考研英语","permalink":"http://dayswithvenki.top/tags/%F0%9F%93%96%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"}]},{"title":"美化记录","slug":"美化记录","date":"2022-03-28T06:44:25.000Z","updated":"2022-07-09T03:46:37.720Z","comments":true,"path":"posts/butterfly.html","link":"","permalink":"http://dayswithvenki.top/posts/butterfly.html","excerpt":"","text":"美化记录TOC无法跳转问题预览效果 无 参考文档 侧边栏BOTUI预览效果 参考文档 文章置顶轮换栏预览效果 参考文档 侧边栏碎碎念+页面碎碎念Artitalk Pro预览效果 参考文档 标签外挂预览效果 无 参考文档 右键菜单预览效果 参考文档 作者介绍预览效果 参考文档 首页磁贴预览效果 参考文档 Custom Beautify内容记录 ·阿里IconFont引入 ·侧边栏透明 ·公告小人 ·页脚不同时间不同显示的柴柴 ·页脚皮卡丘 ·网站各种像素画 ·文字/图标颜色自定义，字体像素风 ·加载动画: Loading/日夜转换 ·夜间模式背景流星","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://dayswithvenki.top/categories/HEXO/"}],"tags":[{"name":"🦋Butterfly","slug":"🦋Butterfly","permalink":"http://dayswithvenki.top/tags/%F0%9F%A6%8BButterfly/"}]},{"title":"算法课笔记2","slug":"algorithm3","date":"2022-03-25T15:52:40.000Z","updated":"2022-07-06T02:02:53.558Z","comments":false,"path":"posts/algorithm3.html","link":"","permalink":"http://dayswithvenki.top/posts/algorithm3.html","excerpt":"","text":"数学预备知识 典型求和公式 1.\\sum_{i=1}^{n} i=n(n+1)/2=\\Theta(n^2) 2.\\sum_{i=1}^{n} (a+bi)=na+bn(n+1)/2=\\Theta(n^2) 3.\\sum_{i=1}^{n} i^2 = \\frac{n(n+1)(2n+1)}{6} =\\Theta(n^3) 4.\\sum_{i=1}^{n} i^k = \\Theta (n^k +1) 5.\\sum_{i=1}^{n} a^i = \\frac{1-a^{n+1}}{1-a}=\\Theta (a^n) ,(a \\neq 1) 特别的： 6.\\sum_{i=1}^{n} a^i = 1/(1-a) , (|a| < 1) 7.\\sum_{i=1}^{\\infty} a^i = \\Theta (1) , (|a| < 1) 8.\\sum_{i=1}^{n} ia^i = \\Theta (na^n) ,(a \\neq 1) 积分图像求边界 条形图是\\sum,曲线是\\int 如果f(x)是单调递减的，则： \\int_{m}^{n+1} f(x) dx \\leq \\sum_{j=m}^{n}f(j) \\leq \\int_{m-1}^n f(x)dx如果f(x)是单调递增的，则： \\int_{m-1}^{n} f(x) dx \\leq \\sum_{j=m}^{n}f(j) \\leq \\int_{m}^{n+1} f(x)dx","categories":[{"name":"算法设计与分析","slug":"算法设计与分析","permalink":"http://dayswithvenki.top/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"}],"tags":[{"name":"🖥️算法设计与分析","slug":"🖥️算法设计与分析","permalink":"http://dayswithvenki.top/tags/%F0%9F%96%A5%EF%B8%8F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"}]},{"title":"算法课笔记1","slug":"algorithm2","date":"2022-03-25T02:43:40.000Z","updated":"2022-07-07T08:26:04.843Z","comments":false,"path":"posts/algorithm2.html","link":"","permalink":"http://dayswithvenki.top/posts/algorithm2.html","excerpt":"","text":"1.时间复杂性 最优算法: 时间复杂性O(n log n),空间复杂性O(1) 1)$O$符号(上界) 令f(n)和g(n)是从自然数集到非负实数集的两个函数，若存在一个自然数n_{0}和一个常数c&gt;0，使得: {\\forall}n\\geq n_{0},f(n)\\leq cg(n)则f(n)为$O$(g(n))。 若&nbsp;&nbsp;\\lim_{n\\to \\infty}\\frac{f(n)}{g(n)} 存在 那么: \\lim_{n\\to\\infty}\\frac{f(n)}{g(n)}\\neq \\infty 则: f(n)=O(g(n)) 2)$\\Omega$符号(下界) 令f(n)和g(n)是从自然数集到非负实数集的两个函数，若存在一个自然数n_{0}和一个常数c&gt;0，使得: {\\forall}n\\geq n_{0},f(n)\\geq cg(n)则f(n)为$\\Omega$(g(n))。 若&nbsp;&nbsp;\\lim_{n\\to \\infty}\\frac{f(n)}{g(n)} 存在 那么: \\lim_{n\\to\\infty}\\frac{f(n)}{g(n)}\\neq0则 f(n)=Ω(g(n)) 3)$\\Theta$符号 令f(n)和g(n)是从自然数集到非负实数集的两个函数，若存在一个自然数$n_{0}$和常数$c_1,c_2$使得: {\\forall}n\\geq n_{0}, c_1g(n)\\leq f(n) \\leq c_2g(n)则f(n)为$\\Theta$(g(n))。 若&nbsp;&nbsp;\\lim_{n\\to \\infty}\\frac{f(n)}{g(n)} 存在 那么: \\lim_{n\\to\\infty}\\frac{f(n)}{g(n)}=c则 f(n)=\\Theta(g(n))\\quad\\quad(其中c\\geq 0)Summary: 可以认为$O$类似于 $\\leq$, $\\Omega$类似于$\\geq$,$\\Theta$类似于= 举例: $f(n)=\\log{n^2}$ $$ \\because \\lim_{n\\to\\infty}\\frac{\\log{n^2}}{n}=\\lim_{n\\to\\infty}\\frac{2\\log{n}}{n}=\\frac{2}{\\ln{2}}\\lim_{n\\to\\infty}\\frac{1}{n}=0 \\\\\\\\ $$ $$ \\therefore f(n)=O(n)\\quad but \\quad not \\quad \\Omega(n) or \\Theta(n) $$ $$ \\because \\log{n^2}=2\\log{n} \\therefore\\log{n^2}=\\Theta(\\log{n}) \\\\\\\\ \\therefore \\log{n^k}=\\Theta(n)\\\\ $$ $ \\sum_{j=1}^{n}\\log{j}$ $$ \\because \\sum_{j=1}^{n}\\log{j} \\leq \\sum_{j=1}^{n}\\log{n} $$ $$ \\therefore \\sum_{j=1}^{n}\\log{j} = O(n\\log{n}) $$ $$ 又 \\because \\sum_{j=1}^{n}\\log{j} \\geq \\sum_{j=1}^{\\frac{n}2}\\log{\\frac{n}2}=\\frac{n}{2}\\log{\\frac{n}2}=\\frac{n}{2}\\log{n} -\\frac{n}{2} $$ $$ \\therefore \\sum_{j=1}^{n} = \\Omega(n\\log{n}) $$ $$ \\therefore \\sum_{j=1}^{n} = \\Theta(n\\log{n}) $$ $\\log{n!}$ $$ \\because \\log{n!}=\\log({n*(n-1)*\\dots*1})=\\log n *\\log(n-1) *\\dots*\\log 1=\\sum_{j=1}^{n}\\log j $$ $$ \\therefore \\log n! = \\Theta (n\\log n) $$ 3)$o$符号 f(n)=o(g(n))当且仅当f(n)=O(g(n)),g(n)\\neq O(g(n))用f(n)$\\prec$g(n)表示f(n)是o(g(n))的： 1 \\prec \\log \\log n \\prec \\log n\\prec \\sqrt n \\prec n^{\\frac3 4}\\prec n\\prec n\\log n \\prec n^2 \\prec n! \\prec2^{n^2}","categories":[{"name":"算法设计与分析","slug":"算法设计与分析","permalink":"http://dayswithvenki.top/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"}],"tags":[{"name":"🖥️算法设计与分析","slug":"🖥️算法设计与分析","permalink":"http://dayswithvenki.top/tags/%F0%9F%96%A5%EF%B8%8F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"}]},{"title":"LaTeX语法(下)","slug":"LateX语法下","date":"2022-03-24T11:17:31.982Z","updated":"2022-07-06T02:08:49.090Z","comments":false,"path":"posts/latex2.html","link":"","permalink":"http://dayswithvenki.top/posts/latex2.html","excerpt":"","text":"LateX语法 由于内容过多,分为两篇来写 上一篇 http://dayswithvenki.top/posts/latex1.html 7)箭头符号: ​ \\leftarrow , \\rightarrow ,\\leftrightarrow,\\longleftarrow,\\longleftrightarrow,\\longrightarrow \\Longleftarrow,\\Longleftrightarrow,\\Longrightarrow \\leftarrow , \\rightarrow ,\\leftrightarrow,\\longleftarrow,\\longleftrightarrow,\\longrightarrow \\Longleftarrow,\\Longleftrightarrow,\\Longrightarrow箭头上加内容: \\xleftarrow和\\xrightarrow可根据内容自动调整 \\xleftarrow{x,y,z} 和 \\xrightarrow{x,y,z} 8)注音和标注 \\bar{x}, \\acute{x}, \\mathring{x}, \\vec{x}, \\grave{x}, \\breve{x}, \\hat{x}, \\tilde{x} \\dot{x}, \\ddot{x} , \\dddot{x} \\bar{x}, \\acute{x}, \\mathring{x}, \\vec{x}, \\grave{x}, \\breve{x}, \\hat{x}, \\tilde{x},\\dot{x}, \\ddot{x} , \\dddot{x} 9)分隔符 \\overline{xxx}, \\overleftrightarrow{xxx}, \\underline{xxx}, \\underleftrightarrow{xxx}, \\overleftarrow{xxx}, \\overbrace{xxx}, \\underleftarrow{xxx}, \\underbrace{xxx}, \\overrightarrow{xxx}, \\widehat{xxx}, \\underrightarrow{xxx}, \\widetilde{xxx} \\overline{xxx},\\overleftrightarrow{xxx},\\underline{xxx},\\underleftrightarrow{xxx} \\overleftarrow{xxx}, \\overbrace{xxx}, \\underleftarrow{xxx}, \\underbrace{xxx} \\overrightarrow{xxx}, \\widehat{xxx}, \\underrightarrow{xxx}, \\widetilde{xxx} 10)省略号 省略号用 \\dots \\cdots \\vdots \\ddots表示 ，\\dots和\\cdots的纵向位置不同，前者一般用于有下标的序列 1$$ x_1, x_2, \\dots, x_n\\quad 1,2,\\cdots,n\\quad \\vdots\\quad \\ddots $$ x_1, x_2, \\dots, x_n\\quad 1,2,\\cdots,n\\quad \\vdots\\quad \\ddots 11)空白间距 语法 格式 实例 显示 quad空格 a \\quad b 一个m的宽度 两个quad空格 a \\qquad b 两个m的宽度 大空格 a \\: b 1/3m宽度 中等空格 a \\; b 2/7m宽度 小空格 a \\, b 1/6m宽度 没有空格 ab 没有空格 缩进空格 a \\! b 缩进1/6m宽度 12)矩阵 1234567$$\\begin{array}{ccc}x_1 &amp; x_2 &amp;\\dots\\\\x_3 &amp; x_4 &amp;\\dots\\\\\\vdots&amp;\\vdots&amp;\\ddots\\end{array}$$ \\begin{array}{ccc} x_1 & x_2 &\\dots\\\\ x_3 & x_4 &\\dots\\\\ \\vdots&\\vdots&\\ddots \\end{array}123456789101112131415161718192021222324252627$$\\begin{pmatrix} a &amp; b\\\\ c &amp; d \\\\\\end{pmatrix}\\quad\\begin{bmatrix} a &amp; b \\\\ c &amp; d \\\\\\end{bmatrix}\\quad\\begin{Bmatrix} a &amp; b \\\\ c &amp; d \\\\\\end{Bmatrix}\\quad\\begin{vmatrix} a &amp; b \\\\ c &amp; d \\\\\\end{vmatrix}\\quad\\begin{Vmatrix} a &amp; b \\\\ c &amp; d \\\\\\end{Vmatrix}$$ \\begin{pmatrix} a & b\\\\ c & d \\\\ \\end{pmatrix} \\quad \\begin{bmatrix} a & b \\\\ c & d \\\\ \\end{bmatrix} \\quad \\begin{Bmatrix} a & b \\\\ c & d \\\\ \\end{Bmatrix} \\quad \\begin{vmatrix} a & b \\\\ c & d \\\\ \\end{vmatrix} \\quad \\begin{Vmatrix} a & b \\\\ c & d \\\\ \\end{Vmatrix}以下渲染均出现问题 已解决,渲染引擎将\\ _等符号自动转义成html语法。 把’\\\\’写成’\\\\\\\\’即可 将渲染引擎从hexo-renderer-marked \\stackrel{转换}{\\longrightarrow}hexo-renderer-kramed 13)长公式 123456$$\\begin{multline} x = a+b+c+{} \\\\ d+e+f+g \\end{multline}$$ \\begin{multline} x = a+b+c+{} \\\\ d+e+f+g \\end{multline}123456$$\\begin{split}x = {} &amp; a + b + c +{}\\\\ &amp; d + e + f + g\\end{split}$$ \\begin{split} x = {} & a + b + c +{}\\\\ & d + e + f + g \\end{split} 14)公式组 123456$$\\begin{align}a &amp;=b+c+d \\\\x &amp;=y+z \\\\5 &amp;= 4+1\\end{align}$$ \\begin{align} a &=b+c+d\\\\ x &=y+z\\\\ 5 &= 4+1 \\end{align} 15)分支公式 1234$$ y=\\begin{cases}-x,\\quad x\\leq 0\\\\x, \\quad x&gt;0\\end{cases} $$ y= \\begin{cases} -x, \\quad x\\leq 0 \\\\ x, \\quad x>0 \\end{cases}","categories":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://dayswithvenki.top/categories/MarkDown/"}],"tags":[{"name":"👾LaTeX","slug":"👾LaTeX","permalink":"http://dayswithvenki.top/tags/%F0%9F%91%BELaTeX/"}]},{"title":"LaTeX语法(上)","slug":"LateX语法上","date":"2022-03-24T08:43:10.790Z","updated":"2022-07-06T02:08:52.122Z","comments":false,"path":"posts/latex1.html","link":"","permalink":"http://dayswithvenki.top/posts/latex1.html","excerpt":"","text":"LateX语法 参考文献:https://www.jianshu.com/p/8c46e915c45e 由于内容过多,分为两篇来写 下一篇 http://dayswithvenki.top/posts/latex2.html 一、 MarkDown 排版格式 块公式排版 1$$c = \\sqrt{a^{2}+b_{xy}^2+e^{x}} $$ eg: c = \\sqrt{a^{2}+b_{xy}^2+e^{x}} 二、LaTeX的公式规则 1)转义 以下几个字符:# $ % &amp; ~ _ ^ { }有特殊意义，需要表示这些字符时，需要转义，即在每个字符前加上 \\ 。eg: \\boxed命令给公式加一个方框。 123$$E=mc^2\\quad 与 \\quad\\boxed{E=mc^2}$$ E=mc^2 \\quad与\\quad \\boxed{E=mc^2}\\quad 表示空格 2)希腊字母 希腊字母 LaTeX 希腊字母 LaTeX α \\alpha ν \\nu β \\beta ξ \\xi \\Xi γ \\gamma ο \\omicron δ \\delta π \\pi ε \\varepsilon ρ \\rho ζ \\zeta σ,∑ \\sigma \\Sigma η \\eta τ \\tau θ \\theta υ \\upsilon ι \\iota ϕ,φ,Φ \\phi \\varphi \\Phi κ \\kappa χ \\chi λ \\lambda ψ,Ψ \\psi \\Psi μ \\mu ω,Ω \\omega \\Omega 3) 上下标、根号 用^来表示上标用_来表示下标用\\sqrt表示根号 上下标如果多余一个字符或者符号，需要用{}括起来。 开方写法: \\sqrt[开方次数,默认为2]{开方式子} eg: 1$$ \\sum_{i=1}^n a_i $$ \\sum_{i=1}^n a_i1$$ \\sqrt{x}\\quad \\sqrt[3]{x} $$ \\sqrt{x}\\quad \\sqrt[3]{x} 4)分数 分数用\\frac表示 1$$ \\frac{1}{2}$$ \\frac{1}{2} 5)运算符 特殊运算则用以下特殊命令\\pm\\; \\times\\; \\div\\; \\cdot\\; \\cap\\; \\cup\\; \\geq\\; \\leq\\; \\neq\\; \\approx\\; \\equiv \\pm\\ \\times\\ \\div\\ \\cdot\\ \\cap\\ \\cup\\ \\geq\\ \\leq\\ \\neq\\ \\approx\\ \\equiv\\ 和、积、极限、积分 \\sum \\prod \\lim \\int \\sum \\quad \\prod \\quad \\lim \\quad \\int 12345678910$$ \\sum_{i=1}^n i \\quad\\prod_{i=1}^n \\quad\\lim_{x\\to0}x^2 \\quad\\int_{a}^{b}x^2 dx \\quad \\sum_{i=1}^n i \\quad\\prod_{i=1}^n \\quad\\lim_{x\\to0}x^2 \\quad\\int_{a}^{b}x^2 dx$$ \\sum_{i=1}^n i \\quad \\prod_{i=1}^n \\quad \\lim_{x\\to0}x^2 \\quad \\int_{a}^{b}x^2 dx \\quad \\sum_{i=1}^n i \\quad \\prod_{i=1}^n \\quad \\lim_{x\\to0}x^2 \\quad \\int_{a}^{b}x^2 dx 6)多重积分 使用如下形式: \\int 、\\iint 、\\iiint 、\\iiiint 、 \\idotsint \\int \\quad \\iint \\quad \\iiint \\quad \\idotsint","categories":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://dayswithvenki.top/categories/MarkDown/"}],"tags":[{"name":"👾LaTeX","slug":"👾LaTeX","permalink":"http://dayswithvenki.top/tags/%F0%9F%91%BELaTeX/"}]},{"title":"三角函数图像关系","slug":"图像关系","date":"2022-03-14T02:08:26.000Z","updated":"2022-07-06T02:04:44.820Z","comments":false,"path":"posts/91357ab4.html","link":"","permalink":"http://dayswithvenki.top/posts/91357ab4.html","excerpt":"","text":"图片来源:https://blog.csdn.net/qq_40828914/article/details/105929384 123456789101112131415161718192021221.倒三角：sin²+cos²=1tan²+1=sec²1+cot²=csc²2.对角线倒数3.邻点积tan*cos=sinsin*cot=cos4.求导:左三角导数正，右三角导数负上互换：sin'=coscos'=-sin中下2：tan'=sec²cot'=-csc²下中下：sec'=tan*seccsc=-cot*csc5.求积分：sec积分：ln|sec+tan|+Ccsc积分：-ln|csc+cot|+C 三角函数及其倒数的图像 sin x &amp; csc x cos x &amp; sec x tan x &amp; cot x 三角函数及其反函数的图像 sin x &amp; arcsin x cos x &amp; arccos x tan x &amp; arctan x 函数及其反函数图像关于y=x对称","categories":[{"name":"三角函数","slug":"三角函数","permalink":"http://dayswithvenki.top/categories/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"}],"tags":[{"name":"🧮三角函数","slug":"🧮三角函数","permalink":"http://dayswithvenki.top/tags/%F0%9F%A7%AE%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"}]},{"title":"三角函数求导","slug":"函数求导","date":"2022-03-14T00:55:19.000Z","updated":"2022-07-06T02:04:36.113Z","comments":false,"path":"posts/91357ab3.html","link":"","permalink":"http://dayswithvenki.top/posts/91357ab3.html","excerpt":"","text":"注：三角函数的导数=1/反三角函数导数的倒数(需要注意替换x,y) eg: sin x和 arcsin x ​ 三角函数 反三角函数","categories":[{"name":"三角函数","slug":"三角函数","permalink":"http://dayswithvenki.top/categories/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"}],"tags":[{"name":"🧮三角函数","slug":"🧮三角函数","permalink":"http://dayswithvenki.top/tags/%F0%9F%A7%AE%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"}]},{"title":"小郭的像素插画","slug":"show","date":"2022-03-10T16:12:03.948Z","updated":"2022-07-14T05:32:55.389Z","comments":true,"path":"posts/17ff13214.html","link":"","permalink":"http://dayswithvenki.top/posts/17ff13214.html","excerpt":"","text":"小郭的像素插画 See more in Pixilart of Kevin https://www.pixilart.com/kevin-venki future: Kevin: Venki: chaichai: mimao:","categories":[{"name":"插画","slug":"插画","permalink":"http://dayswithvenki.top/categories/%E6%8F%92%E7%94%BB/"}],"tags":[{"name":"🎨像素画","slug":"🎨像素画","permalink":"http://dayswithvenki.top/tags/%F0%9F%8E%A8%E5%83%8F%E7%B4%A0%E7%94%BB/"}]},{"title":"三角函数与反三角函数","slug":"三角函数与反三角函数","date":"2022-03-06T02:11:53.000Z","updated":"2022-07-06T02:05:31.883Z","comments":false,"path":"posts/91357ab2.html","link":"","permalink":"http://dayswithvenki.top/posts/91357ab2.html","excerpt":"","text":"三角函数 二倍角公式(逆推可以得到半角公式) 和差化积！！！ 注意：此处第一条sin的公式，左右两边正负号相反。!!! (即：三个符号分别为：+ + - / - - +) !!! 积化和差！！！ 反三角函数 主要的反三角函数以及图像(注意值域与定义域) 反三角函数公式(!!注意2和3的区别) -x的反三角函数与x的三角函数的关系 反三角函数的三角函数 三角函数的反三角函数","categories":[{"name":"三角函数","slug":"三角函数","permalink":"http://dayswithvenki.top/categories/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"}],"tags":[{"name":"🧮三角函数","slug":"🧮三角函数","permalink":"http://dayswithvenki.top/tags/%F0%9F%A7%AE%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"}]},{"title":"算法设计与分析第一次习题","slug":"algorithm1","date":"2022-03-03T08:17:17.000Z","updated":"2022-07-06T02:03:42.816Z","comments":false,"path":"posts/algorithm1.html","link":"","permalink":"http://dayswithvenki.top/posts/algorithm1.html","excerpt":"","text":"斐波那契数列（I） 已知斐波那契数列 Fn=Fn−1+Fn−2(n&gt;=3),F1=1,F2=1 用递归的方法求解该数列的第n项。 输入格式: 输入一个正整数n (1&lt;=n&lt;=40)。 输出格式: 输出一个数，数列的第n项。 输入样例 11 输出样例 13 代码示例 1234567891011121314151617#include &lt;iostream&gt;#define maxSize 40using namespace std;int Fib(int n){ if(n==1||n==2) return 1; else{ return Fib(n-2)+Fib(n-1); }}int main(){ int n; cin&gt;&gt;n; cout&lt;&lt;Fib(n)&lt;&lt;endl; return 0;} 斐波那契数列（II） 已知已知斐波那契数列 Fn=Fn−1+Fn−2(n&gt;=3),F1=1,F2=1 求解该数列的第n项，结果对998244353取模。 输入格式: 输入一个正整数n (1&lt;=n&lt;=40)。 输出格式: 输出一个数，数列的第n项。 输入样例 11 输出样例 13 代码示例 1234567891011121314151617181920#include &lt;iostream&gt;using namespace std;#define N 998244353int main(){ int n; int f1=1,f2=1,ans=0; int fn; cin&gt;&gt;n; if(n==1||n==2) ans=1; else{ for(int i=3;i&lt;=n;i++){ fn=(f1+f2)%N; f2=f1; f1=fn; } ans=fn; } cout&lt;&lt;ans; return 0;} 最大公约数和最小公倍数 本题要求两个给定正整数的最大公约数和最小公倍数。 输入格式: 输入在一行中给出两个正整数M和N（≤1000）。 输出格式: 在一行中顺序输出M和N的最大公约数和最小公倍数，两数字间以1空格分隔。 输入样例 1511 292 输出样例 173 2044 代码示例 12345678#include &lt;bits/stdc++.h&gt;using namespace std;int main(){ int n,m; cin&gt;&gt;n&gt;&gt;m; cout&lt;&lt;gcd(n,m)&lt;&lt;\" \"&lt;&lt;lcm(n,m)&lt;&lt;endl; return 0;} 打印选课学生名单 假设全校有最多40000名学生和最多2500门课程。现给出每个学生的选课清单，要求输出每门课的选课学生名单。 输入格式: 输入的第一行是两个正整数：N（≤40000），为全校学生总数；K（≤2500），为总课程数。此后N行，每行包括一个学生姓名（3个大写英文字母+1位数字）、一个正整数C（≤20）代表该生所选的课程门数、随后是C个课程编号。简单起见，课程从1到K编号。 输出格式: 顺序输出课程1到K的选课学生名单。格式为：对每一门课，首先在一行中输出课程编号和选课学生总数（之间用空格分隔），之后在第二行按字典序输出学生名单，每个学生名字占一行。 输入样例 123456789101110 5ZOE1 2 4 5ANN0 3 5 2 1BOB5 5 3 4 2 1 5JOE4 1 2JAY9 4 1 2 5 4FRA8 3 4 2 5DON2 2 4 5AMY7 1 5KAT3 3 5 4 2LOR6 4 2 4 1 5 输出样例 123456789101112131415161718192021222324252627282930313233341 4ANN0BOB5JAY9LOR62 7ANN0BOB5FRA8JAY9JOE4KAT3LOR63 1BOB54 7BOB5DON2FRA8JAY9KAT3LOR6ZOE15 9AMY7ANN0BOB5DON2FRA8JAY9KAT3LOR6ZOE1 代码示例 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;using namespace std;struct node{ char name[5];}course[2510][40000];int num[2510]; bool cmp(node a,node b){ return strcmp(a.name,b.name)&lt;0;}int main(){ int n, k; cin&gt;&gt;n&gt;&gt;k; int i, j; for(i = 0; i &lt; n; i++) { char name[5]; cin&gt;&gt;name; int c; cin&gt;&gt;c; int id; for(j = 0; j &lt; c; j++) { cin&gt;&gt;id; strcpy(course[id][num[id]++].name, name); } } for(i = 1; i &lt;= k; i++) { sort(course[i], course[i] + num[i], cmp);//字典序排序 } for(i = 1; i &lt;= k; i++) { cout&lt;&lt;i&lt;&lt;\" \"&lt;&lt;num[i]&lt;&lt;endl; for(j = 0; j &lt; num[i]; j++) { printf(\"%s\\n\", course[i][j].name); //cout&lt;&lt;course[i][j].name&lt;&lt;endl; } } return 0;} 两个有序链表序列的交集 已知两个非降序链表序列S1与S2，设计函数构造出S1与S2的交集新链表S3。 输入格式: 输入分两行，分别在每行给出由若干个正整数构成的非降序序列，用−1表示序列的结尾（−1不属于这个序列）。数字用空格间隔。。 输出格式: 在一行中输出两个输入序列的交集序列，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出NULL。 输入样例 121 2 5 -12 4 5 8 10 -1 输出样例 12 5 代码示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;iostream&gt;#define maxSize 1000using namespace std;struct Node { int data; Node* next; Node() :data(0),next(NULL){} Node(int num) :data(num),next(NULL) {}};class LinkList {public: Node* first; LinkList() {first = new Node(); } void CreateList(int val); void Insert(int val); void show();};void LinkList::CreateList(int val) { Node* newNode, * last=first; int d; while (cin &gt;&gt; d &amp;&amp; d != val) { if (first-&gt;next == NULL) { newNode = new Node(d); first-&gt;next = newNode; last = newNode; } else { newNode = new Node(d); last-&gt;next = newNode; last = newNode; } }}void LinkList::show() { Node* cur = first; while (cur-&gt;next != NULL) { cur = cur-&gt;next; if (cur-&gt;next == NULL) cout &lt;&lt; cur-&gt;data; else cout &lt;&lt; cur-&gt;data &lt;&lt; \" \"; } if (first-&gt;next == NULL) cout &lt;&lt; \"NULL\" &lt;&lt; endl;}void LinkList::Insert(int val) { Node* newNode = new Node(val); Node* cur = first; while (cur-&gt;next != NULL) cur = cur-&gt;next; cur-&gt;next = newNode;}void CompareListNode(LinkList s1, LinkList s2, LinkList s3) { Node* a = s1.first-&gt;next, * b = s2.first-&gt;next; while (a &amp;&amp; b) { if ((a-&gt;data) &lt; (b-&gt;data)) a = a-&gt;next; else if ((a-&gt;data) &gt; (b-&gt;data)) b = b-&gt;next; else if ((a-&gt;data) == (b-&gt;data)) { s3.Insert(a-&gt;data); a = a-&gt;next; b = b-&gt;next; } }}int main() { LinkList s1, s2,s3; s1.CreateList(-1); s2.CreateList(-1); CompareListNode(s1, s2, s3); s3.show(); return 0;} 人以群分 社交网络中我们给每个人定义了一个“活跃度”，现希望根据这个指标把人群分为两大类，即外向型（outgoing，即活跃度高的）和内向型（introverted，即活 跃度低的）。要求两类人群的规模尽可能接近，而他们的总活跃度差距尽可能拉开。 输入格式: 输入第一行给出一个正整数N（2≤N≤10^5)。随后一行给出N个正整数，分别是每个人的活跃度，其间以空格分隔。题目保证这些数字以及它们的和都不会超过2^31。 输出格式: 123Outgoing #: N1Introverted #: N2Diff = N3 其中N1是外向型人的个数；N2是内向型人的个数；N3是两群人总活跃度之差的绝对值。 输入样例 121023 8 10 99 46 2333 46 1 666 555 输出样例 123Outgoing #: 5Introverted #: 5Diff = 3611 代码示例 12345678910111213141516171819202122232425262728293031323334353637#include &lt;bits/stdc++.h&gt;#define maxSize 100000using namespace std;typedef long long ll;int compare(const void* a, const void* b){ return (*(ll*)a - *(ll*)b);}int main() { int n;ll og = 0, it = 0; ll* a = new ll[maxSize]; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; a[i]; } qsort(a,n,sizeof(ll),compare); if (n%2) { for (int i = 0; i &lt; n; i++) { if (i &lt; n / 2) it += a[i]; else og += a[i]; } cout &lt;&lt; \"Outgoing #: \" &lt;&lt; n/2+1 &lt;&lt; endl; cout &lt;&lt; \"Introverted #: \" &lt;&lt; n/2 &lt;&lt; endl; cout &lt;&lt; \"Diff = \" &lt;&lt; og - it &lt;&lt; endl; } else { for (int i = 0; i &lt; n; i++) { if (i &lt; n / 2) it += a[i]; else og += a[i]; } cout &lt;&lt; \"Outgoing #: \" &lt;&lt; n / 2 &lt;&lt; endl; cout &lt;&lt; \"Introverted #: \" &lt;&lt; n / 2 &lt;&lt; endl; cout &lt;&lt; \"Diff = \" &lt;&lt; og - it &lt;&lt; endl; } return 0;} 公路村村通 现有村落间道路的统计数据表中，列出了有可能建设成标准公路的若干条道路的成本，求使每个村落都有公路连通所需要的最低成本。 输入格式: 输入数据包括城镇数目正整数N（≤1000）和候选道路数目M（≤3N）；随后的M行对应M条道路，每行给出3个正整数，分别是该条道路直接连通的两个城镇的编号以及该道路改建的预算成本。为简单起见，城镇从1到N编号。 输出格式: 输出村村通需要的最低成本。如果输入数据不足以保证畅通，则输出−1，表示需要建设更多公路。 输入样例 123456789101112131415166 151 2 51 3 31 4 71 5 41 6 22 3 42 4 62 5 22 6 63 4 63 5 13 6 14 5 104 6 85 6 3 输出样例 112 代码示例1还在做...","categories":[{"name":"算法设计与分析","slug":"算法设计与分析","permalink":"http://dayswithvenki.top/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"}],"tags":[{"name":"🖥️算法设计与分析","slug":"🖥️算法设计与分析","permalink":"http://dayswithvenki.top/tags/%F0%9F%96%A5%EF%B8%8F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"},{"name":"⌨️PTA","slug":"⌨️PTA","permalink":"http://dayswithvenki.top/tags/%E2%8C%A8%EF%B8%8FPTA/"}]},{"title":"hexo常用命令","slug":"hexo常用命令","date":"2022-03-01T15:17:45.865Z","updated":"2022-07-02T06:58:28.579Z","comments":false,"path":"posts/33f59116.html","link":"","permalink":"http://dayswithvenki.top/posts/33f59116.html","excerpt":"","text":"- -hexo s- hexo s &lt;/div&gt; 启动本地服务器，默认：http://localhost::4000/ - hexo s 是 hexo server 的缩写，命令效果一致； - 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可； 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。 --- -hexo n- `` hexo n \"new test\"`` 新建一篇标题为 new test 的文章，因为标题里有空格，所以加上了引号。 - 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些； hexo n 是 hexo new 的缩写，命令效果一致。 -hexo d- ``hexo d`` 自动生成网站静态文件，并部署到设定的仓库。 - 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些； hexo d 是 hexo deploy 的缩写，命令效果一致。 -hexo clean- ``hexo clean`` 清除缓存文件 db.json 和已生成的静态文件 public。 -网站显示异常时可以执行这条命令试试。 --- -hexo g- ``hexo g`` 生成网站静态文件到默认设置的 public 文件夹。 -便于查看网站生成的静态文件或者手动部署网站； -如果使用自动部署，不需要先执行该命令； -hexo g 是 hexo generate 的缩写，命令效果一致。 --- -hexo n page- ``hexo n page aboutme`` 新建一个标题为 aboutme 的页面， 默认链接地址为 主页地址/aboutme/ -标题可以为中文，但一般习惯用英文； -页面标题和文章一样可以随意修改； -页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。 --- 常用组合 ``hexo clean &amp;&amp; hexo s`` ``hexo clean &amp;&amp; hexo d`` 更多请参照 官方文档&lt;/h1&gt;","categories":[{"name":"HEXO","slug":"HEXO","permalink":"http://dayswithvenki.top/categories/HEXO/"}],"tags":[]},{"title":"小酒窝","slug":"songtest","date":"2022-03-01T15:17:45.856Z","updated":"2022-07-02T06:57:29.089Z","comments":false,"path":"posts/17ffbd8e.html","link":"","permalink":"http://dayswithvenki.top/posts/17ffbd8e.html","excerpt":"","text":"小酒窝 12345include &lt;bits/stdc++.h&gt;using namespace std;int main(){ cout&lt;&lt;\"Hello Venki!\";} 12345&lt;div align=\"center\"&gt; &lt;audio controls=\"controls\" autoplay=\"autoplay\" loop=\"loop\"&gt; &lt;source src=https://jsdelivr.pai233.top/gh/Wadehl/web-data/MyBlogdata/music/%E5%B0%8F%E9%85%92%E7%AA%9D.mp3 /&gt; &lt;/audio&gt;&lt;/div&gt; 不用网易云： 12345&lt;div align=\"center\"&gt; &lt;audio controls=\"controls\"&gt; &lt;source src=https://jsdelivr.pai233.top/gh/Wadehl/web-data/MyBlogdata/music/%E5%B0%8F%E9%85%92%E7%AA%9D.mp3 /&gt; &lt;/audio&gt;&lt;/div&gt;","categories":[],"tags":[]}],"categories":[{"name":"Days","slug":"Days","permalink":"http://dayswithvenki.top/categories/Days/"},{"name":"插画","slug":"插画","permalink":"http://dayswithvenki.top/categories/%E6%8F%92%E7%94%BB/"},{"name":"HEXO","slug":"HEXO","permalink":"http://dayswithvenki.top/categories/HEXO/"},{"name":"算法设计与分析","slug":"算法设计与分析","permalink":"http://dayswithvenki.top/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"},{"name":"MarkDown","slug":"MarkDown","permalink":"http://dayswithvenki.top/categories/MarkDown/"},{"name":"三角函数","slug":"三角函数","permalink":"http://dayswithvenki.top/categories/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"}],"tags":[{"name":"💻前端","slug":"💻前端","permalink":"http://dayswithvenki.top/tags/%F0%9F%92%BB%E5%89%8D%E7%AB%AF/"},{"name":"🐍Python","slug":"🐍Python","permalink":"http://dayswithvenki.top/tags/%F0%9F%90%8DPython/"},{"name":"🕷️爬虫","slug":"🕷️爬虫","permalink":"http://dayswithvenki.top/tags/%F0%9F%95%B7%EF%B8%8F%E7%88%AC%E8%99%AB/"},{"name":"🎨像素画","slug":"🎨像素画","permalink":"http://dayswithvenki.top/tags/%F0%9F%8E%A8%E5%83%8F%E7%B4%A0%E7%94%BB/"},{"name":"📖考研英语","slug":"📖考研英语","permalink":"http://dayswithvenki.top/tags/%F0%9F%93%96%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/"},{"name":"🦋Butterfly","slug":"🦋Butterfly","permalink":"http://dayswithvenki.top/tags/%F0%9F%A6%8BButterfly/"},{"name":"🖥️算法设计与分析","slug":"🖥️算法设计与分析","permalink":"http://dayswithvenki.top/tags/%F0%9F%96%A5%EF%B8%8F%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/"},{"name":"👾LaTeX","slug":"👾LaTeX","permalink":"http://dayswithvenki.top/tags/%F0%9F%91%BELaTeX/"},{"name":"🧮三角函数","slug":"🧮三角函数","permalink":"http://dayswithvenki.top/tags/%F0%9F%A7%AE%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"},{"name":"⌨️PTA","slug":"⌨️PTA","permalink":"http://dayswithvenki.top/tags/%E2%8C%A8%EF%B8%8FPTA/"}]}